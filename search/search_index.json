{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Ultra\n\n\nWe are pleased to announce the launch of version 1 of Ultra Platform on Android App. With this launch, we take a leap forward towards a vision of becoming a single shopping destination for all customer needs. This effort also brings us to a place where we can enable faster learnings for us on not-so-known shopping categories like Travel \n Food, as well as non-shopping categories like Video and Music. It\u2019s an idea which is designed to pave new ways for users to interact with any 3rd party App within Flipkart App securely and with trust. Hence, Ultra and its meaning ( Revolution) has become synonymous and is consecrated by usage.\n\n\nWhat is Ultra?\n\n\nUltra is a project name for all the efforts required to \nonboard\n other services ( like Travel tickets, Bill payments, etc) through \npartners\n like MakeMyTrip, PhonePe, etc on Flipkart Android App, keeping following ethos in mind with utmost sincerity. \n\n\n\n\n\n\nSwift onboarding\n\n\n\n\n\n\nData Security\n\n\n\n\n\n\nUser Privacy\n\n\n\n\n\n\nPayment Security\n\n\n\n\n\n\nUser Experience\n\n\n\n\n\n\nCustomer Experience\n\n\n\n\n\n\nDeveloper Experience\n\n\n\n\n\n\nApp Performance\n\n\n\n\n\n\nAffordability\n\n\n\n\n\n\nWhat is launched in Ultra V1?\n\n\nIn Ultra V1, we have setup a minimal viable process required to onboard a partner keeping above ethos in check. We also took some strategic product decisions which has shaped Ultra as a service offering to partners, like following\n\n\n\n\n\n\nUser experience over purchase funnel will be built and owned by the partner.\n\n\n\n\n\n\nDiscovery of Applications will be controlled by Flipkart.\n\n\n\n\n\n\nOnly Logged in Users can access partner applications.\n\n\n\n\n\n\nPayments is powered by Flipkart Payment Gateway(FKPG).\n\n\n\n\n\n\nFlipkart can run offers on partners purchase funnel.\n\n\n\n\n\n\nFulfillment and post purchase experience will also be built and owned by the partner.\n\n\n\n\n\n\nAll customer support related queries will be answered by the partner\n\n\n\n\n\n\nMoney will reach partner\u2019s nodal account directly.\n\n\n\n\n\n\nYou can read step by step approach to onboard a partner in the Onboarding section\n\n\nWhat is in for Partners/Businesses?\n\n\nPartners can integrate their Apps to Flipkart\u2019s Android App using developer\u2019s friendly API\u2019s and use the benefit of being on more than 100 million handhelds in the country. \n\n\nWhat is in for Developers?\n\n\nUltra plans to become one of the most dominant channel that no business or, developer can afford to miss. Ultra platform is one of its kind which supports a wide variety of technologies from the most basic web apps to very advanced experiences powered by React Native. This provides ample room to grow and develop unique skills while keeping entry barrier low so that no one is overwhelmed. In near future we would want Ultra to be a prestigious developer platform enabling cutting edge experiences. Being great on Ultra should be synonymous with being a great developer.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-ultra", 
            "text": "We are pleased to announce the launch of version 1 of Ultra Platform on Android App. With this launch, we take a leap forward towards a vision of becoming a single shopping destination for all customer needs. This effort also brings us to a place where we can enable faster learnings for us on not-so-known shopping categories like Travel   Food, as well as non-shopping categories like Video and Music. It\u2019s an idea which is designed to pave new ways for users to interact with any 3rd party App within Flipkart App securely and with trust. Hence, Ultra and its meaning ( Revolution) has become synonymous and is consecrated by usage.", 
            "title": "Welcome to Ultra"
        }, 
        {
            "location": "/#what-is-ultra", 
            "text": "Ultra is a project name for all the efforts required to  onboard  other services ( like Travel tickets, Bill payments, etc) through  partners  like MakeMyTrip, PhonePe, etc on Flipkart Android App, keeping following ethos in mind with utmost sincerity.     Swift onboarding    Data Security    User Privacy    Payment Security    User Experience    Customer Experience    Developer Experience    App Performance    Affordability    What is launched in Ultra V1?  In Ultra V1, we have setup a minimal viable process required to onboard a partner keeping above ethos in check. We also took some strategic product decisions which has shaped Ultra as a service offering to partners, like following    User experience over purchase funnel will be built and owned by the partner.    Discovery of Applications will be controlled by Flipkart.    Only Logged in Users can access partner applications.    Payments is powered by Flipkart Payment Gateway(FKPG).    Flipkart can run offers on partners purchase funnel.    Fulfillment and post purchase experience will also be built and owned by the partner.    All customer support related queries will be answered by the partner    Money will reach partner\u2019s nodal account directly.    You can read step by step approach to onboard a partner in the Onboarding section  What is in for Partners/Businesses?  Partners can integrate their Apps to Flipkart\u2019s Android App using developer\u2019s friendly API\u2019s and use the benefit of being on more than 100 million handhelds in the country.   What is in for Developers?  Ultra plans to become one of the most dominant channel that no business or, developer can afford to miss. Ultra platform is one of its kind which supports a wide variety of technologies from the most basic web apps to very advanced experiences powered by React Native. This provides ample room to grow and develop unique skills while keeping entry barrier low so that no one is overwhelmed. In near future we would want Ultra to be a prestigious developer platform enabling cutting edge experiences. Being great on Ultra should be synonymous with being a great developer.", 
            "title": "What is Ultra?"
        }, 
        {
            "location": "/tutorial/", 
            "text": "Tutorial\n\n\nThis tutorial will help you integrate your service into the Ultra platform. If you dont like to read instructions and want to tinker around first, head over to the \ndemo\n to open the playground app. You can open it on your browser to understand how the APIs are implemented.\n\n\nStep 1 - Decide your UI platform\n\n\nTo start building an app on Ultra, lets first decide whether you want to build it on \nReact native platform\n or on HTML/PWA.\nUltra supports both containers. Here's a brief comparison of the platforms.\n\n\n\n\n\n\n\n\nReact native\n\n\nHTML\n\n\n\n\n\n\n\n\n\n\nCode in JS\n\n\nCode in JS\n\n\n\n\n\n\nAwesome performance\n\n\nDecent performance\n\n\n\n\n\n\nVery optimized for mobile\n\n\nNot highly optimized\n\n\n\n\n\n\nBundle is delivered from FK CDN, only differential components are downloaded, and is cached within the FK app\n\n\nBundle and assets follow cache-control headers and might be slower to render even from cache\n\n\n\n\n\n\n\n\nReact Native\n\n\nIf you choose React native, Ultra will pull in your react native bundle from your github repository, and then deliver it to Flipkart app over-the-air. React native JS bundles are delivered to Flipkart app via \nDUS\n. We highly encourage you to visit the github page to understand how it works.\n\n\nThe only limitations are :\n\n\n\n\n\n\nYou cannot use any other extra native bridges which are not exposed by Flipkart. \n\n\n\n\n\n\nYou cannot use local assets like images/videos within the bundle since only JS is delivered over-the-air. All assets have to be uploaded to your CDN manually and referenced within the JS code.\n\n\n\n\n\n\nOnce DUS fetches your bundle within the Flipkart app, your react native experience will be loaded within a React Fragment and from there on you can navigate to other pages accordingly.\n\n\nWebview\n\n\nIf you choose to build via HTML/PWA, then ultra will launch your webpage inside Android's webview. If you have your existing mobile website, you can choose to reuse it for Ultra, by only choosing to make small changes. The only catch is that you are not allowed to navigate away from your main domain.\n\n\nStep 2 - Integrate JS SDK\n\n\nBased on the platform you choose, you have to \nadd the Ultra Javascript SDK to your HTML/React-native app\n. This SDK will provide access to Ultra specific bridge methods needed for Oauth/Login and Payments. Once you add the dependency for the SDK, you need to \ninitialize the SDK with your clientId\n.\n\n\nContact flipkart\n to generate a \nclientId\n and \nsecret\n needed to access Ultra APIs. For playing around with the APIs you can use \nour test credentials\n.\n\n\nMost apps require its users to enter their email address and name before proceeding. We all know that asking the user to login to your app even if he is logged in on Flipkart app is not a good idea. Hence Ultra encourages apps to automatically login the user with their consent.\n\n\nIn this step we will learn how to fetch user details from flipkart securely by asking the user to grant permissions to their data.\n\n\nThis section will also introduce you to terms which are common in the Oauth world like \nGranted Scopes\n  and \nGrant tokens\n.\n\n\nThe first step in fetching user data is to \ncall \ngetToken\n and supply the list of user resources you like to fetch. This will render the Allow/Deny permission prompt to user, once allowed, the \nPromise\n which contains the \ntoken\n is resolved.\n\n\nWhen you call \ngetToken\n the following bottomsheet is shown to the user.\n\n\n\nUse flags like \nshouldVerify\n and \nisMandatory\n (\ndetails here\n) to control whether you want the permission mandatorily and also whether the resources like email and phone should be OTP verfied on Flipkart's end. Most phone numbers on Flipkart systems are OTP verified, so they would not need to verify their phone number within the \ngetToken\n flow. For users who arent OTP verified, they will be shown a screen to verify their phone numbers before the control comes back to you. \n\n\nStep 3 - Fetch user data\n\n\nSend the token to you server using a AJAX call or any other mechanism you prefer. This token can be used by the server to get an access token which we will learn in the next step.\n\n\nOn your server side, use this grant token and fetch the access token by making a call to \n/1/authorization/auth\n. More details \nhere\n.\nUse the access token and fetch resources like \nuser.email\n and \nuser.mobile\n. More details \nhere\n.\n\n\nNote\n : Although the APIs to fetch user data are available on client side also (since they are REST APIs), make sure you always fetch user data on server side and not on the client side to avoid security risks like MITM attacks.\n\n\nStep 4 - Auto login the user\n\n\nUse the value of \nmobileNumber\n in combination with the \nisVerified\n flag to automatically log the user in. You could now set a cookie which prevents calls to \ngetToken\n from happening each time the user opens your app. This completes the Login flow. Its highly recommended that you do this towards the end of the user funnel to avoid dropouts.\n\n\nStep 5 - Payment\n\n\nFollow steps in \npayment flow\n to create a payment token and to \nstartPayment\n and once payment is successful, redirect the user to your own order confirmation page.\n\n\nThe money will reach the MIDs which have to be configured. Contact Flipkart so that your MID onboarding is done before the integration starts. This process takes a significant amount of time.\n\n\nThe following screen is shown when you call \nstartPayment\n :\n\n\n\n\nAlso integrate with \nrefund API\n as per your business requirements.\n\n\nStep 6 - OMS integration\n\n\nNow that the user has paid you, he will want to check for the status of your order using My Orders page in the Flipkart app.\nTo do this you have to integrate with \nFlipkart OMS APIs\n to let us know the status of an Order. A successful payment need not always mean a successful order. Hence a separate API call is required for this. More info \nhere\n. These flows will also help Flipkart's Customer service agent answer customer queries/calls in a more meaningful manner.\n\n\n\n\nThis is a MANDATORY step and not optional. Although this step has no UI implications, your app cannot go live unless this data is being sent to our server.\n\n\n\n\nDemo\n\n\nCheckout the \ndemo page\n to see this flow in action.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#tutorial", 
            "text": "This tutorial will help you integrate your service into the Ultra platform. If you dont like to read instructions and want to tinker around first, head over to the  demo  to open the playground app. You can open it on your browser to understand how the APIs are implemented.", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#step-1-decide-your-ui-platform", 
            "text": "To start building an app on Ultra, lets first decide whether you want to build it on  React native platform  or on HTML/PWA.\nUltra supports both containers. Here's a brief comparison of the platforms.     React native  HTML      Code in JS  Code in JS    Awesome performance  Decent performance    Very optimized for mobile  Not highly optimized    Bundle is delivered from FK CDN, only differential components are downloaded, and is cached within the FK app  Bundle and assets follow cache-control headers and might be slower to render even from cache", 
            "title": "Step 1 - Decide your UI platform"
        }, 
        {
            "location": "/tutorial/#react-native", 
            "text": "If you choose React native, Ultra will pull in your react native bundle from your github repository, and then deliver it to Flipkart app over-the-air. React native JS bundles are delivered to Flipkart app via  DUS . We highly encourage you to visit the github page to understand how it works.  The only limitations are :    You cannot use any other extra native bridges which are not exposed by Flipkart.     You cannot use local assets like images/videos within the bundle since only JS is delivered over-the-air. All assets have to be uploaded to your CDN manually and referenced within the JS code.    Once DUS fetches your bundle within the Flipkart app, your react native experience will be loaded within a React Fragment and from there on you can navigate to other pages accordingly.", 
            "title": "React Native"
        }, 
        {
            "location": "/tutorial/#webview", 
            "text": "If you choose to build via HTML/PWA, then ultra will launch your webpage inside Android's webview. If you have your existing mobile website, you can choose to reuse it for Ultra, by only choosing to make small changes. The only catch is that you are not allowed to navigate away from your main domain.", 
            "title": "Webview"
        }, 
        {
            "location": "/tutorial/#step-2-integrate-js-sdk", 
            "text": "Based on the platform you choose, you have to  add the Ultra Javascript SDK to your HTML/React-native app . This SDK will provide access to Ultra specific bridge methods needed for Oauth/Login and Payments. Once you add the dependency for the SDK, you need to  initialize the SDK with your clientId .  Contact flipkart  to generate a  clientId  and  secret  needed to access Ultra APIs. For playing around with the APIs you can use  our test credentials .  Most apps require its users to enter their email address and name before proceeding. We all know that asking the user to login to your app even if he is logged in on Flipkart app is not a good idea. Hence Ultra encourages apps to automatically login the user with their consent.  In this step we will learn how to fetch user details from flipkart securely by asking the user to grant permissions to their data.  This section will also introduce you to terms which are common in the Oauth world like  Granted Scopes   and  Grant tokens .  The first step in fetching user data is to  call  getToken  and supply the list of user resources you like to fetch. This will render the Allow/Deny permission prompt to user, once allowed, the  Promise  which contains the  token  is resolved.  When you call  getToken  the following bottomsheet is shown to the user.  Use flags like  shouldVerify  and  isMandatory  ( details here ) to control whether you want the permission mandatorily and also whether the resources like email and phone should be OTP verfied on Flipkart's end. Most phone numbers on Flipkart systems are OTP verified, so they would not need to verify their phone number within the  getToken  flow. For users who arent OTP verified, they will be shown a screen to verify their phone numbers before the control comes back to you.", 
            "title": "Step 2 - Integrate JS SDK"
        }, 
        {
            "location": "/tutorial/#step-3-fetch-user-data", 
            "text": "Send the token to you server using a AJAX call or any other mechanism you prefer. This token can be used by the server to get an access token which we will learn in the next step.  On your server side, use this grant token and fetch the access token by making a call to  /1/authorization/auth . More details  here .\nUse the access token and fetch resources like  user.email  and  user.mobile . More details  here .  Note  : Although the APIs to fetch user data are available on client side also (since they are REST APIs), make sure you always fetch user data on server side and not on the client side to avoid security risks like MITM attacks.", 
            "title": "Step 3 - Fetch user data"
        }, 
        {
            "location": "/tutorial/#step-4-auto-login-the-user", 
            "text": "Use the value of  mobileNumber  in combination with the  isVerified  flag to automatically log the user in. You could now set a cookie which prevents calls to  getToken  from happening each time the user opens your app. This completes the Login flow. Its highly recommended that you do this towards the end of the user funnel to avoid dropouts.", 
            "title": "Step 4 - Auto login the user"
        }, 
        {
            "location": "/tutorial/#step-5-payment", 
            "text": "Follow steps in  payment flow  to create a payment token and to  startPayment  and once payment is successful, redirect the user to your own order confirmation page.  The money will reach the MIDs which have to be configured. Contact Flipkart so that your MID onboarding is done before the integration starts. This process takes a significant amount of time.  The following screen is shown when you call  startPayment  :   Also integrate with  refund API  as per your business requirements.", 
            "title": "Step 5 - Payment"
        }, 
        {
            "location": "/tutorial/#step-6-oms-integration", 
            "text": "Now that the user has paid you, he will want to check for the status of your order using My Orders page in the Flipkart app.\nTo do this you have to integrate with  Flipkart OMS APIs  to let us know the status of an Order. A successful payment need not always mean a successful order. Hence a separate API call is required for this. More info  here . These flows will also help Flipkart's Customer service agent answer customer queries/calls in a more meaningful manner.   This is a MANDATORY step and not optional. Although this step has no UI implications, your app cannot go live unless this data is being sent to our server.", 
            "title": "Step 6 - OMS integration"
        }, 
        {
            "location": "/tutorial/#demo", 
            "text": "Checkout the  demo page  to see this flow in action.", 
            "title": "Demo"
        }, 
        {
            "location": "/onboarding/", 
            "text": "Onboarding process\n\n\nToday integration with a new partner requires us to take following steps.\n\n\n\n\n\n\nClosure on \nLegal Contracts\n and \nBusiness Agreement\n with partners.\n\n\n\n\n\n\nInformation security\n review and privacy policy Agreement.\n\n\n\n\n\n\nAPI Integration\n with\n\n\n\n\n\n\nLogin\n as a service which\n\n\n\n\n\n\nIntegrates partners user service with oAuth2.0 built by Flipkart Authn Service.\n\n\n\n\n\n\nCreates and Provides IdentityToken so that merchants have accountId equivalent, but yet user\u2019s flipkart flow is not compromised.\n\n\n\n\n\n\nPrompts user for data sharing permissions when partner requests user\u2019s data like email/phone number.\n\n\n\n\n\n\nSolicits missing data when a new use case arises at partners and in return enriches Flipkart data.\n\n\n\n\n\n\nPrompts email verification/phone verification flows within native app so that merchants don\u2019t have to do verification on their end.\n\n\n\n\n\n\n\n\n\n\nPayment\n as a service which\n\n\n\n\n\n\nLets partner configure their nodal account and MIDS to power payments completion via flipkart payment gateway.\n\n\n\n\n\n\nLets partner decide the allowed payment options for a user.\n\n\n\n\n\n\nLets partner Run payment bank offers.\n\n\n\n\n\n\nLets partner configure expiry timer, convenience/ other fees.\n\n\n\n\n\n\nLets partner take the benefits of Fintech constructs like EMI, BNPL etc in future.\n\n\n\n\n\n\nLets partner share order and payment details like payment status.\n\n\n\n\n\n\nLets partner issue refunds and cancellations.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProcess Agreement and Semi automated integration with\n\n\n\n\n\n\nCustomer experience\n\n\n\n\n\n\nwhich solves for Visibility of orders on My Orders\n\n\n\n\n\n\nwhich solves for Discovery of help in Help Centre\n\n\n\n\n\n\nwhich solves for Communication on inbound and outbound calls\n\n\n\n\n\n\n\n\n\n\nAccounting\n\n\n\n\nWhich solves for reconciliation, Taxes, etc\n\n\n\n\n\n\n\n\nReporting\n\n\n\n\nWhich solves for visibility of business metrics periodically at both ends.", 
            "title": "Onboarding"
        }, 
        {
            "location": "/onboarding/#onboarding-process", 
            "text": "Today integration with a new partner requires us to take following steps.    Closure on  Legal Contracts  and  Business Agreement  with partners.    Information security  review and privacy policy Agreement.    API Integration  with    Login  as a service which    Integrates partners user service with oAuth2.0 built by Flipkart Authn Service.    Creates and Provides IdentityToken so that merchants have accountId equivalent, but yet user\u2019s flipkart flow is not compromised.    Prompts user for data sharing permissions when partner requests user\u2019s data like email/phone number.    Solicits missing data when a new use case arises at partners and in return enriches Flipkart data.    Prompts email verification/phone verification flows within native app so that merchants don\u2019t have to do verification on their end.      Payment  as a service which    Lets partner configure their nodal account and MIDS to power payments completion via flipkart payment gateway.    Lets partner decide the allowed payment options for a user.    Lets partner Run payment bank offers.    Lets partner configure expiry timer, convenience/ other fees.    Lets partner take the benefits of Fintech constructs like EMI, BNPL etc in future.    Lets partner share order and payment details like payment status.    Lets partner issue refunds and cancellations.        Process Agreement and Semi automated integration with    Customer experience    which solves for Visibility of orders on My Orders    which solves for Discovery of help in Help Centre    which solves for Communication on inbound and outbound calls      Accounting   Which solves for reconciliation, Taxes, etc     Reporting   Which solves for visibility of business metrics periodically at both ends.", 
            "title": "Onboarding process"
        }, 
        {
            "location": "/flows/", 
            "text": "Flows\n\n\nThese flow diagrams will help you understand flow of data between systems well.\n\n\nHigh level diagram\n\n\n\n\nScope Selection / Modification\n\n\nShowing the permission prompt with Allow/Deny buttons to the user.\n\n\n\n\nFetching Resource\n\n\nFetching Oauth resources like \nuser.name\n, \nuser.email\n\n\n\n\nForward Flow for payments.\n\n\nInitiating payment and opening order confirmation page (thank you page)\n\n\n\nLegend\n\n\n\n\nClient UI / Partner UI : The HTML / React-native UI which renders your experience within flipkart app.\n\n\nSDK : The Javascript client SDK which exposes all Ultra client side APIs.\n\n\nClient server : Your backend server.\n\n\nUltra API : Public API exposed by Ultra (\nplatform.flipkart.net\n)", 
            "title": "Flow diagrams"
        }, 
        {
            "location": "/flows/#flows", 
            "text": "These flow diagrams will help you understand flow of data between systems well.", 
            "title": "Flows"
        }, 
        {
            "location": "/flows/#high-level-diagram", 
            "text": "", 
            "title": "High level diagram"
        }, 
        {
            "location": "/flows/#scope-selection-modification", 
            "text": "Showing the permission prompt with Allow/Deny buttons to the user.", 
            "title": "Scope Selection / Modification"
        }, 
        {
            "location": "/flows/#fetching-resource", 
            "text": "Fetching Oauth resources like  user.name ,  user.email", 
            "title": "Fetching Resource"
        }, 
        {
            "location": "/flows/#forward-flow-for-payments", 
            "text": "Initiating payment and opening order confirmation page (thank you page)", 
            "title": "Forward Flow for payments."
        }, 
        {
            "location": "/flows/#legend", 
            "text": "Client UI / Partner UI : The HTML / React-native UI which renders your experience within flipkart app.  SDK : The Javascript client SDK which exposes all Ultra client side APIs.  Client server : Your backend server.  Ultra API : Public API exposed by Ultra ( platform.flipkart.net )", 
            "title": "Legend"
        }, 
        {
            "location": "/clients/", 
            "text": "Ultra Client Side SDK\n\n\n\n\nLatest JS SDK version : \n1.0.0-beta\n\n\n\n\nOverview\n\n\nThis SDK enables developers to build applications that run inside Flipkart app.\n\n\nAll the methods mentioned here will work with both React Native and Webview. \nAll the methods are asynchronous in nature and will always return a promise that gets resolved with the values. Fire and forget calls are an exception where you may not care about the response.\n\n\nGetting Started\n\n\nAdd the dependency\n\n\nIf using node, add this repository as an npm package (Both webview and react-native)\n\n\n1\nnpm install --save fk-platform-sdk\n\n\n\n\n\n\nYou can also visit \nthe NPM\n page for the SDK \n\n\nAlternatively, if you are using webview only you can also include the following script directly inside a \nscript\n tag:\n\n\n1\nhttps\n:\n//img1a.flixcart.com/linchpin-web/fk-platform-sdk/fkext-browser-min@1.0.0-beta.1.js\n\n\n\n\n\n\n\nInitialize the SDK\n\n\nImport SDK and create a new platform instance. You will need to provide clientId given to you by Flipkart.\n\n\nIn Node Environment:\n\n\n1\n2\nimport\n \nFKPlatform\n \nfrom\n \nfk-platform-sdk\n\n\nlet\n \nfkPlatform\n \n=\n \nnew\n \nFKPlatform\n(\nclientId\n);\n\n\n\n\n\n\n\nIn Browser:\n\n\n1\nvar\n \nfkPlatform\n \n=\n \nFKExtension\n.\nnewPlatformInstance\n(\nclientID\n);\n\n\n\n\n\n\n\nPost this you can start using modules.\n\n\nNote: You should call \nFKPlatform.isPlatformAvailable()\n or, \nwindow.FKExtension \n FKExtension.isPlatformAvailable()\n to check if you're inside Flipkart platform. It is recommended not to do any checks in partner code.\n\n\nModules\n\n\nPermissions Module\n\n\n1\n2\n3\n4\nlet\n \npermissionsModule\n \n=\n \nfkPlatform\n.\ngetModuleHelper\n().\ngetPermissionsModule\n()\n\n\n\n//To get scopes:\n\n\nconst\n \nSCOPES\n \n=\n \npermissionsModule\n.\ngetScopes\n();\n\n\n\n\n\n\n\nAvailable Scopes:\n\n\n1\n2\n3\nSCOPES.USER_EMAIL,\nSCOPES.USER_MOBILE,\nSCOPES.USER_NAME\n\n\n\n\n\n\nMethods:\n\n\n1\ngetToken: (permissions: ScopeAccessRequest[]) =\n Promise\nNativeModuleResponse\nPermissionsManagerResponse\n\n\n\n\n\n\n\nRelevant interfaces:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\ninterface\n \nScopeAccessRequest\n \n{\n\n    \nscope\n:\n \nScopes\n;\n\n    \nisMandatory\n?:\n \nboolean\n;\n\n    \nshouldVerify\n?:\n \nboolean\n;\n\n\n}\n\n\n\ninterface\n \nNativeModuleResponse\nT\n \n{\n\n    \nresult\n:\n \nT\n,\n\n    \ngrantToken\n?:\n \nstring\n \n|\n \nnull\n\n\n}\n\n\n\ninterface\n \nPermissionsManagerResponse\n \n{\n \n[\nkey\n:\n \nScopes\n]\n:\n \nboolean\n;\n \n}\n\n\n\n\n\n\n\nSample\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nvar\n \nscopeReq\n \n=\n \n[{\nscope\n:\nuser.email\n,\nisMandatory\n:\ntrue\n,\nshouldVerify\n:\nfalse\n},{\nscope\n:\nuser.mobile\n,\nisMandatory\n:\nfalse\n,\nshouldVerify\n:\nfalse\n},{\nscope\n:\nuser.name\n,\nisMandatory\n:\nfalse\n,\nshouldVerify\n:\nfalse\n}];\n\n\nfkPlatform\n.\ngetModuleHelper\n().\ngetPermissionsModule\n().\ngetToken\n(\nscopeReq\n).\nthen\n(\n\n\nfunction\n \n(\ne\n)\n \n{\n\n    \nconsole\n.\nlog\n(\nYour grant token is: \n \n+\n \ne\n.\ngrantToken\n);\n\n\n}).\ncatch\n(\n\n\nfunction\n \n(\ne\n)\n \n{\n\n    \nconsole\n.\nlog\n(\ne\n.\nmessage\n);\n\n\n}\n\n\n\n\n\n\n\nisMandatory\n is a boolean which says whether you want the scope to be mandatorily filled by the user\n\n\nadditionally \nshouldVerify\n is boolean which says whether you want the scope to be mandatorily verified as well\n\n\nfor e.g if you call \ngetToken(['scope':'user.email', 'isMandatory':true, 'shouldVerify':true])\n, then that means user cannot grant permissions without filling his email address and also verifying it. You can use this on situations where you know that he user has an unverified email address and want to trigger email verification for the user.\nNote that the flags \nisMandatory\n and \nshouldVerify\n should be set to \ntrue\n only when you ABSOLUTELY need an email address which has to be verified as well, because you could see a significant drop off of permission grants when such constraints are imposed on users. \n\n\nAlso note that the permission popup has a special behaviour when a single scope is requested and also has a unverified value prefilled by the user. For e.g, when you ask permission for a user.email scope, and the user already has an unverified email address in our system, then the UI will automatically initiate the email verfication flow. This is done to avoid an extra click for the user.\n\n\nThe method \ngetToken\n returns you both list of allowed and rejected permissions which depend on user response. It also returns an access token which you should be passing to your server using which it can hit Flipkart api to read relevant info. For security reasons secure info should only be read server to server using given grantToken.\n\n\nPromise resolution\n\n\nPromise fails and enters the \ncatch\n block only if the user dismisses the permission popup (bottomsheet) or the SDK network calls failed.\nIf user denies a permission, the promise will be resolved successfully and you get a \ngrantToken\n.\nThis is because there could be partial permission denial as well. For e.g user denied phone number, but granted email address\nHence all the denials as well as accepts will still be treated as success from a token generation point of view.\nIf you want to check if user denied a permission, you can check the \nNativeModuleResponse\n result to see if the permissions are granted or not.\n\n\nIf the promise fails, Catch block function is invoked with an object which has \nmessage\n and \ncode\n.\nPossible errors are \nhere\n. \n\n\nHandling denials\n\n\nYou can analyze the \nNativeModuleResponse.result\n to know the exact list of scopes which got denied.\nThe ideal way of handling denials is to show a page to the user as to why these permissions are mandatory to continue. Refer \nAndroid's user guide\n on this topic on knowing more about this.\n\n\nNavigation Module\n\n\nCommon methods which will enable your application to control their exit behaviour and deeplink into other parts of the app.\n\n\n1\nlet\n \nnavigationModule\n \n=\n \nfkPlatform\n.\ngetModuleHelper\n().\ngetNavigationModule\n()\n\n\n\n\n\n\n\nMethods:\n\nThe following methods are supported on the navigation module.\n\n\nExit Session\n\n\n1\nexitSession\n()\n:\n \nvoid\n\n\n\n\n\n\n\nCloses the application and takes user back to the page from where the app was launched.\n\n\nExit to Homepage\n\n\n1\nexitToHomePage\n()\n:\n \nvoid\n\n\n\n\n\n\n\nCloses the application and takes user to Flipkart homepage.\n\n\nStart Payment\n\n\n1\nstartPayment\n(\npaymentToken\n:\n \nstring\n)\n:\n \nvoid\n\n\n\n\n\n\n\nLaunches Flipkart payment screen for given payment token. The payment token has to be generated by your server by hitting Flipkart PG server API. Once you call the startPayment() method on the client, the container will switch to Payments. Once payments is successful/failed the container switches back to ultra and you will get a callback.\n\n\nThis callback will happen through a page load to the \nsuccessfulCallBackUrl\n or \nfailureCallBackUrl\n specified when payment token was generated. This URL will be opened within the payment container and is supposed to validate the payment response from FKPG (POST params are to be validated) and then do a container switch back to ultra. A container switch can be initiated by a HTTP redirect to the following URL\n\n\n1\nfapp://action?value={\nscreenType\n:\nultra\n,\nparams\n:{\nurl\n:\nURLENCODED_URL_TO_OPEN_WITHIN_ULTRA\n,\nclientId\n:\nYOUR_CLIENT_ID\n,\npostPaymentFlow\n:true,\nsuccess\n:\nTRUE_OR_FALSE\n}}\n\n\n\n\n\n\nOn Webview, once the container switches, the url specified in the params for \nfapp://\n will load as a regular page load. This loaded page should render the \nOrder confirmation\n page for your service.\n\n\nOn ReactNative, once the container switches, you will get a custom event which will be emitted via RN Event Emitter.\nThe name of the event is \nloadUri\n which will contain the URL you specified as params in the above \nfapp://\n redirect.\n\n\nClear history\n\n\n\n\nThis is a Webview Only method\n\n\n\n\n1\nclearHistory\n()\n?:\n \nvoid\n\n\n\n\n\n\n\nClears both forward and backward history such that only the existing page remains on webview.\n\n\nNavigate to Flipkart\n\n\n1\nnavigateToFlipkart\n(\nurl\n \n:\n \nstring\n)\n:\n \nvoid\n\n\n\n\n\n\n\n\n\nAvailable only on JS SDK 1.0.0-beta.1 onwards, FK app v6.7 onwards and ultra SDK v1.9 onwards\n\n\n\n\nNavigates to a Flipkart page given the URL. The URL should be a \nfapp://\n URL.\n\n\nThe following URLs are supported.\n\n\n\n\n\n\n\n\nDescription\n\n\nURL\n\n\n\n\n\n\n\n\n\n\nFlipkart plus coins page\n\n\nfapp://action?value={\"params\": {\"screenName\": \"LOCKED_COINS\",\"valid\":true},\"screenType\": \"multiWidgetPage\",\"type\":\"NAVIGATION\",\"url\": \"/locked-coins\"}\n\n\n\n\n\n\n\n\nNotify page location change\n\n\n\n\nThis should be called only if you are using React Native.\n\n\nAvailable only on JS SDK 1.0.0-beta.1 onwards, FK app v6.7 onwards and ultra SDK v1.9 onwards\n\n\n\n\n1\nnotifyPageLocationChange\n(\ncurrentUri\n:\n \nstring\n,\n \nisBackNavigation\n:\n \nboolean\n)\n:\n \nvoid\n\n\n\n\n\n\n\n1\n2\ncurrentUri\n \n:\n \nSome\n \nrepresentation\n \nof\n \nthe\n \ncurrent\n \npage\n \nin\n \nthe\n \nURI\n \nformat\n.\n \nE\n.\ng\n \n:\n \nhttp\n://\nexample\n.\ncom\n/\nsearch\n\n\nisBackNavigation\n:\n \ntrue\n \nif\n \nthe\n \npage\n \nopened\n \ndue\n \nto\n \na\n \nback\n \nnavigation\n.\n \n\n\n\n\n\n\nFor basic analytics, Flipkart tries to optimize the funnel. For this purpose, its important to understand your funnel using events whenever a page change happens. On webviews, a page change can be inferred using the change in URL. But on react native, there is no way to infer this. Hence you are required to call this method to let flipkart's analytics to know that the user has navigated to a page.\n\n\nCall this whenever the screen changes. For e.g once on homepage and then on search page and then on details page. Also call this if your screen changes when the back button is pressed.\n\n\nContacts Module\n\n\n\n\nAvailable from flipkart app v6.3, ultra v1.4.1\n\n\n\n\nHelps in launching a UI that allows user to select a contact from his address book as well as get contact details.\n\n\n1\nlet\n \ncontactModule\n \n=\n \nfkPlatform\n.\ngetModuleHelper\n().\ngetContactsModule\n()\n\n\n\n\n\n\n\nMethods:\n\n\n1\npickPhoneNumber\n()\n:\n \nPromise\nNativeModuleResponse\nContact\n\n\n\n\n\n\n\nLaunches UI to pick a phone number and returns the same.\n\n\n1\ngetContactInfo\n(\nphoneNumbers\n:\n \nstring\n[])\n:\n \nPromise\nNativeModuleResponse\n{[\nkey\n:\n \nstring\n]\n:\n \nContact\n;}\n\n\n\n\n\n\n\nFetches names and other info against given list of phone numbers. Keys of the returned map will be given phone numbers. \n\n\nRelevant types\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\ninterface\n \nNativeModuleResponse\nT\n \n{\n\n    \nresult\n:\n \nT\n,\n\n    \ngrantToken\n?:\n \nstring\n \n|\n \nnull\n\n\n}\n\n\n\ninterface\n \nContact\n \n{\n\n    \nname\n:\n \nstring\n\n    \nphoneNumber\n:\n \nstring\n\n\n}\n\n\n\n\n\n\n\nHandling Errors\n\n\nEvery promise reject contains an error code and a message:\nType:\n\n\n1\n2\n3\n4\ninterface\n \nNativeModuleError\n \n{\n\n    \nmessage\n:\n \nstring\n;\n\n    \nerrorCode\n:\n \nnumber\n;\n\n\n}\n\n\n\n\n\n\n\nError Codes:\n\n\n1\n2\n3\n4\n5\n6\n7\n8\nERROR_CODE_UNKNOWN\n \n=\n \n0\n;\n\n\nERROR_CODE_NETWORK_ERROR\n \n=\n \n1001\n;\n\n\nERROR_CODE_JSON_PARSE_ERROR\n \n=\n \n1002\n;\n\n\nERROR_CODE_INVALID_PERMISSIONS\n \n=\n \n1003\n;\n\n\nERROR_CODE_USER_DISMISS\n \n=\n \n1004\n;\n\n\nERROR_CODE_BAD_PERMISSION_REQUEST\n \n=\n \n1005\n;\n\n\nERROR_CODE_BAD_CONTACT_FETCH_REQUEST\n \n=\n \n1006\n;\n\n\nERROR_CODE_NATIVE_PERMISSIONS_MISSING\n \n=\n \n1007\n;\n\n\n\n\n\n\n\nDetecting flipkart environment\n\n\nIf you want to detect if your webpage is running within Flipkart's ultra environment, you have three ways.\n\n\n\n\n\n\n[PREFERRED] Use JS SDK's \nFKPlatform.isPlatformAvailable()\n method.\n\n\n\n\n\n\n[WEBVIEW-ONLY] Use the user agent which contains \"Ultra\". This method is useful if you want to inject the JS SDK only when running within flipkart's ultra environment. An example user agent string \n\nMozilla/5.0 (Linux; Android 8.0.0; Android SDK built for x86 Build/OSR1.170901.008; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.125 Mobile Safari/537.36 [Flipkart/com.flipkart.android/850000/5.16/UltraSDK/4/1.4.2]\n\nNote that if you have service workers making requests, this user agent will not be present.\n\n\n\n\n\n\n[WEBVIEW-ONLY] Use X-Requested-With header which will contain the value 'com.flipkart.android'. This will work for all requests including service workers. This is the least preferred method.\n\n\n\n\n\n\nDetecting presence of a certain feature\n\n\n\n\nUser Agent is available in both webview and react native.\n\n\n\n\nUser agent string in ultra is of the following format:\n\n\n1\nMozilla/5.0 (Linux; Android 8.0.0; Android SDK built for x86 Build/OSR1.170901.008; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.125 Mobile Safari/537.36 [Flipkart/com.flipkart.android/850000/5.16/UltraSDK/4/1.4.2]\n\n\n\n\n\n\nIn the above user agent string, if you focus on the last part, 5.16 is the version name and 850000 is version code for flipkart app, 1.4.2 is version name and 4 is version code for ultra SDK. \n\n\nBased on just the ultra version name (1.4.2) you can check if certain newly added modules are present or not.\n\n\nHandling file uploads and downloads on webview\n\n\n\n\nAvailable from flipkart app v6.3, ultra v1.3.7\n\n\n\n\nStarting with Flipkart app version 6.3, ultra version 1.3.7, file uploads and downloads are present.\nFor downloads, ensure that 'download' attribute is not used. For e.g \na href='abcd.pdf' download='xyz.pdf' /\n will not work.\nAlso apis like FileSaver.js or blob based APIs dont work due to limitations in webview.\nFor uploads, there are no restrictions.\n\n\nDebugging Webview\n\n\nIf you see API calls failing or images/page not loading issues, you can also debug ultra within Chrome debugger. The APK which is shared with partners have debugging enabled for webviews. This means you will able to connect to the chrome instance via Remote debugging. \nSee here\n\n\nDebugging React Native\n\n\nThe special APK shared with partners has a way to run your react native code within ultra by pointing to your IP address of your react native packager. This way you can actively develop as well as debug the code without any special tools. This mechanism runs your react native bundle without using \nFlipkart DUS\n.", 
            "title": "Client Side API"
        }, 
        {
            "location": "/clients/#ultra-client-side-sdk", 
            "text": "Latest JS SDK version :  1.0.0-beta", 
            "title": "Ultra Client Side SDK"
        }, 
        {
            "location": "/clients/#overview", 
            "text": "This SDK enables developers to build applications that run inside Flipkart app.  All the methods mentioned here will work with both React Native and Webview. \nAll the methods are asynchronous in nature and will always return a promise that gets resolved with the values. Fire and forget calls are an exception where you may not care about the response.", 
            "title": "Overview"
        }, 
        {
            "location": "/clients/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/clients/#add-the-dependency", 
            "text": "If using node, add this repository as an npm package (Both webview and react-native)  1 npm install --save fk-platform-sdk   You can also visit  the NPM  page for the SDK   Alternatively, if you are using webview only you can also include the following script directly inside a  script  tag:  1 https : //img1a.flixcart.com/linchpin-web/fk-platform-sdk/fkext-browser-min@1.0.0-beta.1.js", 
            "title": "Add the dependency"
        }, 
        {
            "location": "/clients/#initialize-the-sdk", 
            "text": "Import SDK and create a new platform instance. You will need to provide clientId given to you by Flipkart.  In Node Environment:  1\n2 import   FKPlatform   from   fk-platform-sdk  let   fkPlatform   =   new   FKPlatform ( clientId );    In Browser:  1 var   fkPlatform   =   FKExtension . newPlatformInstance ( clientID );    Post this you can start using modules.  Note: You should call  FKPlatform.isPlatformAvailable()  or,  window.FKExtension   FKExtension.isPlatformAvailable()  to check if you're inside Flipkart platform. It is recommended not to do any checks in partner code.", 
            "title": "Initialize the SDK"
        }, 
        {
            "location": "/clients/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/clients/#permissions-module", 
            "text": "1\n2\n3\n4 let   permissionsModule   =   fkPlatform . getModuleHelper (). getPermissionsModule ()  //To get scopes:  const   SCOPES   =   permissionsModule . getScopes ();    Available Scopes:  1\n2\n3 SCOPES.USER_EMAIL,\nSCOPES.USER_MOBILE,\nSCOPES.USER_NAME   Methods:  1 getToken: (permissions: ScopeAccessRequest[]) =  Promise NativeModuleResponse PermissionsManagerResponse    Relevant interfaces:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12 interface   ScopeAccessRequest   { \n     scope :   Scopes ; \n     isMandatory ?:   boolean ; \n     shouldVerify ?:   boolean ;  }  interface   NativeModuleResponse T   { \n     result :   T , \n     grantToken ?:   string   |   null  }  interface   PermissionsManagerResponse   {   [ key :   Scopes ] :   boolean ;   }    Sample  1\n2\n3\n4\n5\n6\n7\n8 var   scopeReq   =   [{ scope : user.email , isMandatory : true , shouldVerify : false },{ scope : user.mobile , isMandatory : false , shouldVerify : false },{ scope : user.name , isMandatory : false , shouldVerify : false }];  fkPlatform . getModuleHelper (). getPermissionsModule (). getToken ( scopeReq ). then (  function   ( e )   { \n     console . log ( Your grant token is:    +   e . grantToken );  }). catch (  function   ( e )   { \n     console . log ( e . message );  }    isMandatory  is a boolean which says whether you want the scope to be mandatorily filled by the user  additionally  shouldVerify  is boolean which says whether you want the scope to be mandatorily verified as well  for e.g if you call  getToken(['scope':'user.email', 'isMandatory':true, 'shouldVerify':true]) , then that means user cannot grant permissions without filling his email address and also verifying it. You can use this on situations where you know that he user has an unverified email address and want to trigger email verification for the user.\nNote that the flags  isMandatory  and  shouldVerify  should be set to  true  only when you ABSOLUTELY need an email address which has to be verified as well, because you could see a significant drop off of permission grants when such constraints are imposed on users.   Also note that the permission popup has a special behaviour when a single scope is requested and also has a unverified value prefilled by the user. For e.g, when you ask permission for a user.email scope, and the user already has an unverified email address in our system, then the UI will automatically initiate the email verfication flow. This is done to avoid an extra click for the user.  The method  getToken  returns you both list of allowed and rejected permissions which depend on user response. It also returns an access token which you should be passing to your server using which it can hit Flipkart api to read relevant info. For security reasons secure info should only be read server to server using given grantToken.", 
            "title": "Permissions Module"
        }, 
        {
            "location": "/clients/#promise-resolution", 
            "text": "Promise fails and enters the  catch  block only if the user dismisses the permission popup (bottomsheet) or the SDK network calls failed.\nIf user denies a permission, the promise will be resolved successfully and you get a  grantToken .\nThis is because there could be partial permission denial as well. For e.g user denied phone number, but granted email address\nHence all the denials as well as accepts will still be treated as success from a token generation point of view.\nIf you want to check if user denied a permission, you can check the  NativeModuleResponse  result to see if the permissions are granted or not.  If the promise fails, Catch block function is invoked with an object which has  message  and  code .\nPossible errors are  here .", 
            "title": "Promise resolution"
        }, 
        {
            "location": "/clients/#handling-denials", 
            "text": "You can analyze the  NativeModuleResponse.result  to know the exact list of scopes which got denied.\nThe ideal way of handling denials is to show a page to the user as to why these permissions are mandatory to continue. Refer  Android's user guide  on this topic on knowing more about this.", 
            "title": "Handling denials"
        }, 
        {
            "location": "/clients/#navigation-module", 
            "text": "Common methods which will enable your application to control their exit behaviour and deeplink into other parts of the app.  1 let   navigationModule   =   fkPlatform . getModuleHelper (). getNavigationModule ()    Methods: \nThe following methods are supported on the navigation module.", 
            "title": "Navigation Module"
        }, 
        {
            "location": "/clients/#exit-session", 
            "text": "1 exitSession () :   void    Closes the application and takes user back to the page from where the app was launched.", 
            "title": "Exit Session"
        }, 
        {
            "location": "/clients/#exit-to-homepage", 
            "text": "1 exitToHomePage () :   void    Closes the application and takes user to Flipkart homepage.", 
            "title": "Exit to Homepage"
        }, 
        {
            "location": "/clients/#start-payment", 
            "text": "1 startPayment ( paymentToken :   string ) :   void    Launches Flipkart payment screen for given payment token. The payment token has to be generated by your server by hitting Flipkart PG server API. Once you call the startPayment() method on the client, the container will switch to Payments. Once payments is successful/failed the container switches back to ultra and you will get a callback.  This callback will happen through a page load to the  successfulCallBackUrl  or  failureCallBackUrl  specified when payment token was generated. This URL will be opened within the payment container and is supposed to validate the payment response from FKPG (POST params are to be validated) and then do a container switch back to ultra. A container switch can be initiated by a HTTP redirect to the following URL  1 fapp://action?value={ screenType : ultra , params :{ url : URLENCODED_URL_TO_OPEN_WITHIN_ULTRA , clientId : YOUR_CLIENT_ID , postPaymentFlow :true, success : TRUE_OR_FALSE }}   On Webview, once the container switches, the url specified in the params for  fapp://  will load as a regular page load. This loaded page should render the  Order confirmation  page for your service.  On ReactNative, once the container switches, you will get a custom event which will be emitted via RN Event Emitter.\nThe name of the event is  loadUri  which will contain the URL you specified as params in the above  fapp://  redirect.", 
            "title": "Start Payment"
        }, 
        {
            "location": "/clients/#clear-history", 
            "text": "This is a Webview Only method   1 clearHistory () ?:   void    Clears both forward and backward history such that only the existing page remains on webview.", 
            "title": "Clear history"
        }, 
        {
            "location": "/clients/#navigate-to-flipkart", 
            "text": "1 navigateToFlipkart ( url   :   string ) :   void     Available only on JS SDK 1.0.0-beta.1 onwards, FK app v6.7 onwards and ultra SDK v1.9 onwards   Navigates to a Flipkart page given the URL. The URL should be a  fapp://  URL.  The following URLs are supported.     Description  URL      Flipkart plus coins page  fapp://action?value={\"params\": {\"screenName\": \"LOCKED_COINS\",\"valid\":true},\"screenType\": \"multiWidgetPage\",\"type\":\"NAVIGATION\",\"url\": \"/locked-coins\"}", 
            "title": "Navigate to Flipkart"
        }, 
        {
            "location": "/clients/#notify-page-location-change", 
            "text": "This should be called only if you are using React Native.  Available only on JS SDK 1.0.0-beta.1 onwards, FK app v6.7 onwards and ultra SDK v1.9 onwards   1 notifyPageLocationChange ( currentUri :   string ,   isBackNavigation :   boolean ) :   void    1\n2 currentUri   :   Some   representation   of   the   current   page   in   the   URI   format .   E . g   :   http :// example . com / search  isBackNavigation :   true   if   the   page   opened   due   to   a   back   navigation .     For basic analytics, Flipkart tries to optimize the funnel. For this purpose, its important to understand your funnel using events whenever a page change happens. On webviews, a page change can be inferred using the change in URL. But on react native, there is no way to infer this. Hence you are required to call this method to let flipkart's analytics to know that the user has navigated to a page.  Call this whenever the screen changes. For e.g once on homepage and then on search page and then on details page. Also call this if your screen changes when the back button is pressed.", 
            "title": "Notify page location change"
        }, 
        {
            "location": "/clients/#contacts-module", 
            "text": "Available from flipkart app v6.3, ultra v1.4.1   Helps in launching a UI that allows user to select a contact from his address book as well as get contact details.  1 let   contactModule   =   fkPlatform . getModuleHelper (). getContactsModule ()    Methods:  1 pickPhoneNumber () :   Promise NativeModuleResponse Contact    Launches UI to pick a phone number and returns the same.  1 getContactInfo ( phoneNumbers :   string []) :   Promise NativeModuleResponse {[ key :   string ] :   Contact ;}    Fetches names and other info against given list of phone numbers. Keys of the returned map will be given phone numbers.", 
            "title": "Contacts Module"
        }, 
        {
            "location": "/clients/#relevant-types", 
            "text": "1\n2\n3\n4\n5\n6\n7\n8\n9 interface   NativeModuleResponse T   { \n     result :   T , \n     grantToken ?:   string   |   null  }  interface   Contact   { \n     name :   string \n     phoneNumber :   string  }", 
            "title": "Relevant types"
        }, 
        {
            "location": "/clients/#handling-errors", 
            "text": "Every promise reject contains an error code and a message:\nType:  1\n2\n3\n4 interface   NativeModuleError   { \n     message :   string ; \n     errorCode :   number ;  }    Error Codes:  1\n2\n3\n4\n5\n6\n7\n8 ERROR_CODE_UNKNOWN   =   0 ;  ERROR_CODE_NETWORK_ERROR   =   1001 ;  ERROR_CODE_JSON_PARSE_ERROR   =   1002 ;  ERROR_CODE_INVALID_PERMISSIONS   =   1003 ;  ERROR_CODE_USER_DISMISS   =   1004 ;  ERROR_CODE_BAD_PERMISSION_REQUEST   =   1005 ;  ERROR_CODE_BAD_CONTACT_FETCH_REQUEST   =   1006 ;  ERROR_CODE_NATIVE_PERMISSIONS_MISSING   =   1007 ;", 
            "title": "Handling Errors"
        }, 
        {
            "location": "/clients/#detecting-flipkart-environment", 
            "text": "If you want to detect if your webpage is running within Flipkart's ultra environment, you have three ways.    [PREFERRED] Use JS SDK's  FKPlatform.isPlatformAvailable()  method.    [WEBVIEW-ONLY] Use the user agent which contains \"Ultra\". This method is useful if you want to inject the JS SDK only when running within flipkart's ultra environment. An example user agent string  Mozilla/5.0 (Linux; Android 8.0.0; Android SDK built for x86 Build/OSR1.170901.008; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.125 Mobile Safari/537.36 [Flipkart/com.flipkart.android/850000/5.16/UltraSDK/4/1.4.2] \nNote that if you have service workers making requests, this user agent will not be present.    [WEBVIEW-ONLY] Use X-Requested-With header which will contain the value 'com.flipkart.android'. This will work for all requests including service workers. This is the least preferred method.", 
            "title": "Detecting flipkart environment"
        }, 
        {
            "location": "/clients/#detecting-presence-of-a-certain-feature", 
            "text": "User Agent is available in both webview and react native.   User agent string in ultra is of the following format:  1 Mozilla/5.0 (Linux; Android 8.0.0; Android SDK built for x86 Build/OSR1.170901.008; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.125 Mobile Safari/537.36 [Flipkart/com.flipkart.android/850000/5.16/UltraSDK/4/1.4.2]   In the above user agent string, if you focus on the last part, 5.16 is the version name and 850000 is version code for flipkart app, 1.4.2 is version name and 4 is version code for ultra SDK.   Based on just the ultra version name (1.4.2) you can check if certain newly added modules are present or not.", 
            "title": "Detecting presence of a certain feature"
        }, 
        {
            "location": "/clients/#handling-file-uploads-and-downloads-on-webview", 
            "text": "Available from flipkart app v6.3, ultra v1.3.7   Starting with Flipkart app version 6.3, ultra version 1.3.7, file uploads and downloads are present.\nFor downloads, ensure that 'download' attribute is not used. For e.g  a href='abcd.pdf' download='xyz.pdf' /  will not work.\nAlso apis like FileSaver.js or blob based APIs dont work due to limitations in webview.\nFor uploads, there are no restrictions.", 
            "title": "Handling file uploads and downloads on webview"
        }, 
        {
            "location": "/clients/#debugging-webview", 
            "text": "If you see API calls failing or images/page not loading issues, you can also debug ultra within Chrome debugger. The APK which is shared with partners have debugging enabled for webviews. This means you will able to connect to the chrome instance via Remote debugging.  See here", 
            "title": "Debugging Webview"
        }, 
        {
            "location": "/clients/#debugging-react-native", 
            "text": "The special APK shared with partners has a way to run your react native code within ultra by pointing to your IP address of your react native packager. This way you can actively develop as well as debug the code without any special tools. This mechanism runs your react native bundle without using  Flipkart DUS .", 
            "title": "Debugging React Native"
        }, 
        {
            "location": "/backend/", 
            "text": "Ultra Backend APIs\n\n\nEndpoint Contracts\n\n\nProd endpoint: \nhttps://platform.flipkart.net\n\n\n\n\nThere is no staging endpoint for Ultra. You can do all development on Prod endpoint.\n\n\n\n\nSecurity\n\n\nAll production endpoints will be over https.\nWe will validate Client\u2019s identity using JWT.\nThe JWT will be shared in every call in header as a \u2018secureToken\u2019\nProperties of secure token\n\n\nHeader\n\n\n1\n2\n3\n4\n{\n  \nalg\n: \nRS256\n,\n  \ntyp\n: \nJWT\n\n}\n\n\n\n\n\n\nPayload\n\n\n'Note:' clientId should be fetched from flipkart.\n\n\n1\n2\n3\n4\n5\n{\n  \niss\n: \u2264clientId\u2265,\n  \niat\n: \nunix timestamp in seconds\n, // Issued at. Should be in past.\n  \nexp\n: \nunix timestamp in seconds\n // Expiry of token. Should be in future. Also exp - iat should not be \n 100.\n}\n\n\n\n\n\n\nThe Public key should be shared with flipkart before hand.\n\n\n1\n2\n3\n4\nPath: /1/dummy\nMethod: GET\nHeader: secureToken\nResponse:  Will be HTTP 200 if secureToken is valid otherwise response code will be self explanatory.\n\n\n\n\n\n\nAccess token flow\n\n\nUsing the grantToken from the SDK, you have to fetch the accessToken before querying for any resources.\nGet Auth token flow\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\nPath: /1/authorization/auth\n\nMethod: GET\n\nQuery parameters:\ngrantToken : String\nclientId : String\nclientSecret : String\n\nResponse :\nAuthTokenResponse {\nidentityToken (string),\naccessToken (string)\n}\n\n\n\n\n\n\nResource fetching flow\n\n\nResources like user.mobile, user.email can be fetched with this API\nfetch bulk data\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\nPath: /1/resource/bulk\n\nMethod: POST\nQuery parameters:\naccessToken : String\nBody: List\nString\n //where each string is scope for which data is to be fetched.\nResponse : Map\nString,Object\n // String the scope and Object for each scope is defined below\nuser.mobile{\nemail(string)\nisVerified(boolean)\n}\nuser.email{\nmobileNumber(string)\nisVerified(boolean)\n}\n\n\n\n\n\n\nPayment flow.\n\n\nThis section describes FKPG (Flipkart payment gateway) APIs which can be used to initiate payments and for receiving refunds.\nContact Flipkart team to get the merchant credentials required to access this API. The merchant credentials are different from \nclientId\n and \nsecret\n used for Ultra APIs\n\n\nPayment Token\n\n\nThis is the first step in initiating payments. Use this API to generate a payment token which can be used to show the FKPG payment options screen, this screen can be shown via Ultra's client SDK. This will open FKPG outside of Ultra container.\n\n\nNote\n: Category should be fetched from flipkart.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\nPath\n:\n \n2\n/payment/\ntoken\n\n\n\nMethod\n:\n \nPOST\n\n\nBody\n:\n \nPaymentTokenRequest\n\n\nPaymentTokenRequest\n \n{\n\n\nmerchantCredential\n(\nMerchantCredential\n),\n\n\namountPaise\n \n(\nlong\n),\n\n\ncategory\n(\nstring\n),\n\n\npaymentExpiryMilliSeconds\n \n(\nlong\n,\n \noptional\n),\n\n\nuserInfo\n \n(\nUserInfo\n),\n\n\nadjustmentWrapper\n(\nAdjustmentWrapper\n,\n \noptional\n),\n\n\npriceSummary\n \n(\nPriceSummary\n),\n\n\nsuccessfulCallBackUrl\n \n(\nstring\n),\n\n\nfailureCallBackUrl\n \n(\nstring\n),\n\n\naddress\n \n(\nAddress\n,\n \noptional\n),\n\n\ndescription\n \n(\nstring\n,\n \noptional\n),\n\n\nmetadata\n \n(\nstring\n,\n \noptional\n),\n\n\nmerchantTransactionId\n \n(\nstring\n),\n\n\nmerchantReferenceId\n \n(\nstring\n)\n\n\n}\n\n\nMerchantCredential\n \n{\n\n\nname\n \n(\nstring\n),\n\n\npassword\n \n(\nstring\n)\n\n\n}\n\n\nUserInfo\n \n{\n\n\nname\n \n(\nstring\n,\n \noptional\n),\n\n\nphone\n \n(\nstring\n,\n \noptional\n),\n\n\nemail\n \n(\nstring\n,\n \noptional\n),\n\n\nidentityToken\n \n(\nstring\n)\n\n\n}\n\n\nAdjustmentWrapper\n \n{\n\n\neligibleAdjustments\n(\nArray\n[\nEligibleAdjustment\n],\n \noptional\n)\n\n\n}\n\n\nEligibleAdjustment\n \n{\n\n\nadjustment_id\n \n(\nstring\n,\n \noptional\n),\n\n\nofferUnitPrice\n \n(\nlong\n,\n \noptional\n),\n\n\nmetadata\n \n(\nobject\n,\n \noptional\n)\n\n\n}\n\n\nPriceSummary\n \n{\n\n\nbasePricePaise\n \n(\nlong\n),\n\n\nitemCount\n \n(\ninteger\n),\n\n\nbreakup\n(\nArray\n[\nPriceSummaryBreakup\n])\n\n\n}\n\n\nPriceSummaryBreakup\n \n{\n\n\ndescription\n \n(\nstring\n),\n\n\ndisplayText\n \n(\nstring\n),\n\n\nvalueInPaise\n \n(\nlong\n),\n\n\nbreakupType\n \n(\nstring\n)\n \n=\n \n[\nDEFAULT\n \nor\n \nDISCOUNT\n]\n\n\n}\n\n\nAddress\n \n{\n\n\naddressLine\n \n(\nstring\n,\n \noptional\n),\n\n\ncity\n \n(\nstring\n,\n \noptional\n),\n\n\nstate\n \n(\nstring\n,\n \noptional\n),\n\n\npincode\n \n(\nstring\n,\n \noptional\n),\n\n\ncountry\n \n(\nstring\n,\n \noptional\n)\n\n\n}\n\n\nResponse\n \n:\n \nPaymentToken\n\n\nPaymentToken\n \n{\n\n\ntoken\n \n(\nstring\n)\n\n\n}\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\nSample Request\n{\n  \nmerchantCredential\n: {\n    \nname\n: \nEnter name here\n,\n    \npassword\n: \nEnter hash here\n\n  },\n  \nmerchantTransactionId\n: \ntransaction1\n,\n  \nmerchantReferenceId\n: \norder1\n,\n  \namountPaise\n: 200,\n  \npaymentExpiryMilliSeconds\n: 100000,\n  \ncategory\n: \ntest\n,\n  \nuserInfo\n: {\n    \nidentityToken\n: \nActual ID token here\n\n  },\n  \nsuccessfulCallBackUrl\n: \nhttp://www.partner.com/success\n,\n  \nfailureCallBackUrl\n: \nhttp://www.partner.com/failure\n,\n  \ndescription\n: \nthis is a test transaction\n,\n  \nmetadata\n: \nthis is a test transaction\n,\n  \npriceSummary\n: {\n    \nbasePricePaise\n: 100,\n    \nitemCount\n: 0,\n    \nbreakup\n: [\n      {\n        \ndescription\n: \nconvinience_fee\n,\n        \ndisplayText\n: \nConvinence Fee\n,\n        \nvalueInPaise\n: 100,\n        \nbreakupType\n: \nDEFAULT\n\n      }\n    ]\n  }\n}\n\n\n\n\n\n\nCallback after PGResponse\n\n\nOnce a user pays, a \nPOST\n call is made to the \nsuccessfulCallBackUrl\n specified in payment token request. The payload of the FORM data is present below.\nYou can then issue a HTTP redirect to the \nfapp:\n URL to redirect back to ultra container and also specify the order confirmation page url to open in the same format.\nThis will open your order confirmation page within ultra container (payment happens outside of it). Its mandatory to redirect to ultra container via \nfapp:\n. Do not open any UI outside of ultra container.\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\nRequest (will be sent as form parameters)\n\n{\n      \ntransaction_status\n: \n, //  SUCCESS, FAILED\n      \naccount_type\n: \nNODAL\n,\n      \npg_trackid\n: \n,     \n      \nmerchant_adjustments\n:\n      \n[\n      {\noffer_id\n:\n,\n      \noffer_unit_price\n:0,\n      \namount_applied\n:0,\n      \namount_requested\n:0,\n      \nactual_subvention_amount\n:0,\n      \neffective_subvention_amount\n:0,\n      \nAdjustment_response_code\n: AdjustmentResponseCode,   //  Appendix\n      \nmetadata\n:{\npaymentSystem\n:\n, \nofferId\n:\n, \ndiscountType\n:\n}}\n      ]\n,\n      \ntransaction_amount\n: \n,\n      \nemi_months\n: \n,\n      \nmerchant_id\n: \n,\n      \ntransaction_response_code\n: \n,      //  Appendix\n      \npayzippy_transaction_id\n: \n,\n      \nhaving_multiple_transactions\n: \n,\n      \nbank_name\n: \n,\n      \ncard_brand\n: CardName,   //  Appendix\n      \nhash_method\n: \n,\n      \ntransaction_time\n: \n,\n      \ntransaction_currency\n: \n,\n      \npayment_method\n: \n,     //  Appendix\n      \ntimestamp\n: \n,\n      \nmerchant_key_id\n: \n,\n      \nprimary_record\n:\n      \n{\ntransaction_id\n: \n, \nprimary_amount\n: \n}\n,\n      \nmerchant_transaction_id\n: \n,\n      \nbank_transaction_id\n: \n,\n      \npayment_instrument\n: \n,\n      \ntransaction_response_message\n: \n,\n      \npg_mid\n: \n,\n      \npg_name\n: \n,\n      \npg_authcode\n: \n,\n      \npg_id\n: \n,\n      \nis_international\n: \n,\n      \nfraud_action\n: \n,\n      \nis_risky_instrument\n: \n,\n      \ntransaction_auth_state\n: \n,\n      \nhash\n: \n,\n      \nmasked_card_number\n: \n,\n\ncard_bin\n: \n,\n}\n\n\n\n\n\n\n1\n2\n3\nForm Data\n\ntransaction_status=\naccount_type=\npg_trackid=\nmerchant_adjustments=[ {\noffer_id\n:\n, \noffer_unit_price\n:0, \namount_applied\n:0, \namount_requested\n:0, \nactual_subvention_amount\n:0, \neffective_subvention_amount\n:0, ent_response_code\n:\n, \nmetadata\n:{\npaymentSystem\n:\n, \nofferId\n:\n, \ndiscountType\n:\n}} ]transaction_amount=\nemi_months=\nmerchant_id=\ntransaction_response_code=\npayzippy_transaction_id=\nhaving_multiple_transactions=\nbank_name=\ncard_brand=\nhash_method=\ntransaction_time=\ntransaction_currency=\npayment_method=\ntimestamp=\nmerchant_key_id=\nprimary_record={\ntransaction_id\n: \n, \nprimary_amount\n: \n}merchant_transaction_id=\nbank_transaction_id=\npayment_instrument=\ntransaction_response_message=\npg_mid=\npg_name=\npg_authcode=\npg_id=\nis_international=\nfraud_action=\nis_risky_instrument=\ntransaction_auth_state=\nhash=\nmasked_card_number=\ntransaction_status=\naccount_type=\npg_trackid=\nmerchant_adjustments=\ntransaction_amount=\nemi_months=\nmerchant_id=\ntransaction_response_code=\npayzippy_transaction_id=\nhaving_multiple_transactions=\nbank_name=\ncard_brand=\nhash_method=\ntransaction_time=\ntransaction_currency=\npayment_method=\ntimestamp=\nmerchant_key_id=\nprimary_record=\nmerchant_transaction_id=\nbank_transaction_id=\npayment_instrument=\ntransaction_response_message=\npg_mid=\npg_name=\npg_authcode=\npg_id=\nis_international=\nfraud_action=\nis_risky_instrument=\ntransaction_auth_state=\nhash=\nmasked_card_number=\n\n\n\n\n\n\n\nQuery\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\nPath\n:\n \n2\n/payment/\nquery\n\n\n\nMethod\n:\n \nPOST\n\n\nBody\n:\n \nQueryRequest\n\n\nQueryRequest\n \n{\n\n\nmerchantCredential\n(\nMerchantCredential\n),\n\n\nforcePgQuery\n \n(\nboolean\n,\n \noptional\n),\n\n\nmerchantTransactionId\n \n(\nstring\n),\n\n\npaymentTransactionId\n \n(\nstring\n),\n\n\ntransactionType\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nADJUSTMENT\n \nor\n \nSALE\n \nor\n \nREFUND\n \nor\n \nREVADJUSTMENT\n]\n\n\n}\n\n\nMerchantCredential\n \n{\n\n\nname\n \n(\nstring\n),\n\n\npassword\n \n(\nstring\n)\n\n\n}\n\n\nResponse\n \n:\n \nQueryResponse\n\n \nQueryResponse\n \n{\n\n\nresponseStatus\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nSUCCESS\n \nor\n \nFAILED\n],\n\n\nresponseType\n \n(\nstring\n,\n \noptional\n),\n\n\nresponseMessage\n \n(\nstring\n,\n \noptional\n),\n\n\nmessages\n \n(\nArray\n[\nQueryMessage\n],\n \noptional\n),\n\n\nmerchantId\n \n(\nstring\n,\n \noptional\n),\n\n\nmerchantTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nmerchantReferenceId\n \n(\nstring\n,\n \noptional\n),\n\n\ntransactionState\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nINITIATED\n \nor\n \nPENDING\n \nor\n \nSUCCESS\n \nor\n \nFAILED\n],\n\n\npaymentTransactions\n \n(\nArray\n[\nPaymentTransaction\n],\n \noptional\n)\n\n\n}\n\n\n\nQueryMessage\n \n{\n\n\ntype\n \n(\nstring\n,\n \noptional\n),\n\n\nmessage\n \n(\nstring\n,\n \noptional\n)\n\n\n}\n\n\nPaymentTransaction\n \n{\n\n\nmerchantTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\npaymentTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\ntransactionAmount\n \n(\nlong\n,\n \noptional\n),\n\n\ntransactionCurrency\n \n(\nstring\n,\n \noptional\n),\n\n\ntransactionType\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nADJUSTMENT\n \nor\n \nSALE\n \nor\n \nREFUND\n \nor\n \nREVADJUSTMENT\n],\n\n\ntransactionTime\n \n(\nstring\n,\n \noptional\n),\n\n\nrealTransactionTime\n \n(\nstring\n,\n \noptional\n),\n\n\ntransactionStatus\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nINITIATED\n \nor\n \nPENDING\n \nor\n \nSUCCESS\n \nor\n \nFAILED\n],\n\n\ntransactionAuthState\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nPRE_AUTH\n \nor\n \nPARTIAL_CAPTURED\n \nor\n \nFULL_CAPTURED\n \nor\n \nCAPTURE_COMPLETED\n \nor\n \nVOID\n \nor\n \nFAILED\n \nor\n \nSALE\n],\n\n\ntransactionResponseCode\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nREFUND_REQUEST_ACCEPTED\n \nor\n \nREFUND_REQUEST_SENT\n \nor\n \nREFUNDED\n \nor\n \nREFUND_VOID_SUCCESS\n \nor\n \nTXNID_NOT_FOUND\n \nor\n \nREFUND_NOT_SUPPORTED\n \nor\n \nREFUND_WINDOW_EXPIRED\n \nor\n \nSIMILAR_PREVIOUS_PARTIAL_REFUND_DETECTED\n \nor\n \nSALE_TRANSACTION_UNSUCCESSFUL\n \nor\n \nSALE_TRANSACTION_VOID\n \nor\n \nPARTIAL_REFUNDS_UNSUPPORTED\n \nor\n \nINSUFFICIENT_BALANCE\n \nor\n \nDUPLICATE_REFUND_REQUEST\n \nor\n \nEXCESS_REFUND_AMOUNT\n \nor\n \nSALE_TRANSACTION_REFUNDED\n \nor\n \nMULTIPLE_REFUNDS_UNSUPPORTED\n \nor\n \nREFUND_TEMPORARILY_UNAVAILABLE\n \nor\n \nVISA_DIRECT_TIMEOUT\n \nor\n \nPENDING_ON_REFUND_REQUERY\n \nor\n \nFAILED_ON_REFUND_REQUERY\n \nor\n \nCOULD_NOT_ACQUIRE_LOCK\n \nor\n \n_3DS_AUTH_FAILED\n \nor\n \n_3DS_AUTH_UNSUPPORTED\n \nor\n \nADDRESS_VERIFICATION_FAILED\n \nor\n \nBANK_RESPONSE_DELAYED\n \nor\n \nBIN_BLOCKED_BY_ACQUIRER\n \nor\n \nCARD_EXPIRED\n \nor\n \nCARD_NOT_ENROLLED\n \nor\n \nCARD_NUMBER_INVALID\n \nor\n \nCOUNTRY_NOT_SUPPORTED\n \nor\n \nCVV_INCORRECT\n \nor\n \nCVV_MISSING\n \nor\n \nSBI_DEBIT_CARD_BLOCKED\n \nor\n \nPIN_INCORRECT\n \nor\n \nCANCELLED_BY_ACQUIRER\n \nor\n \nDECLINED_BY_ACQUIRER\n \nor\n \nDECLINED_BY_ISSUER\n \nor\n \nDECLINED_BY_RISK\n \nor\n \nINSUFFICIENT_FUNDS\n \nor\n \nISSUER_TECHNICAL_ERROR\n \nor\n \nEMI_NO_PG_FOR_CURRENT_AMOUNT\n \nor\n \nNO_PG_FOR_CURRENT_AMOUNT\n \nor\n \nUPI_EXTERNAL_VPA_UNSUPPORTED\n \nor\n \nMID_NOT_ACTIVE\n \nor\n \nMID_NOT_FOUND\n \nor\n \nDUPLICATE_TXN_REQUEST\n \nor\n \nINVALID_TRANSACTION_ID\n \nor\n \nMERCHANT_AUTH_FAILED\n \nor\n \nDECLINED_BY_PAYZIPPY\n \nor\n \nBANK_UNAVAILABLE\n \nor\n \nCARD_EXPIRY_DATE_INVALID\n \nor\n \nCANCELLED_BY_USER\n \nor\n \nUSER_SESSION_TIMED_OUT\n \nor\n \nUSER_REFRESH_COUNT_EXCEEDED\n \nor\n \nUSER_RETRY_COUNT_EXCEEDED\n \nor\n \nINVALID_PROCESSPAY_REQUEST\n \nor\n \nMANDATORY_PARAM_MISSING\n \nor\n \nINVALID_PARAM_FORMAT\n \nor\n \nINVALID_PARAM_VALUE\n \nor\n \nINVALID_PAYZIPPY_ACCOUNT\n \nor\n \nNETBANKING_NOT_ENABLED\n \nor\n \nNETBANKING_LIMIT_EXCEEDED\n \nor\n \nACCOUNT_ON_HOLD\n \nor\n \nPAY_LATER_ELIGIBILITY_FAILURE\n \nor\n \nPAYZIPPY_TECHNICAL_ERROR\n \nor\n \nACQUIRER_TECHNICAL_ERROR\n \nor\n \nSUCCESS\n \nor\n \nINITIATED\n \nor\n \nPENDING\n \nor\n \nREQUEST_FIELD_INVALID\n \nor\n \nSYSTEM_UNDER_MAINTENANCE\n \nor\n \nEMPTY_OTP_ERROR\n \nor\n \nINTERNAL_SERVER_ERROR\n \nor\n \nDATABASE_SERVER_ERROR\n \nor\n \nPROTOCOL_ERROR\n \nor\n \nNOT_PERMITTED\n \nor\n \nCARD_NOT_IN_3DS_RANGE\n \nor\n \nINVALID_AUTH_DATA\n \nor\n \nINVALID_REQUEST_TYPE\n \nor\n \nINVALID_REQUEST_XML_FORMAT\n \nor\n \nHASH_CHECK_FAILED\n \nor\n \nINVALID_MERCHANT_ID\n \nor\n \nITP_VALIDATION_FAILED\n \nor\n \nINVALID_IVR_OTP_DATA\n \nor\n \nTIMED_OUT\n \nor\n \nUNABLE_TO_PROCESS_REQUEST\n \nor\n \nINVALID_RESPONSE_XML_FORMAT\n \nor\n \nCARD_BLOCKS\n \nor\n \nOPEN_ECS_NACH_MANDATE\n \nor\n \nDDF_DEALER\n \nor\n \nCARD_OFFER_EXHAUSTED\n \nor\n \nCHECK_SUM_MISMATCH\n],\n\n\nrefundResponseCode\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nSUCCESS\n \nor\n \nREFUND_REQUEST_ACCEPTED\n \nor\n \nREFUND_REQUEST_SENT\n \nor\n \nREFUNDED\n \nor\n \nREFUND_VOID_SUCCESS\n \nor\n \nTXNID_NOT_FOUND\n \nor\n \nREFUND_NOT_SUPPORTED\n \nor\n \nREFUND_WINDOW_EXPIRED\n \nor\n \nSIMILAR_PREVIOUS_PARTIAL_REFUND_DETECTED\n \nor\n \nSALE_TRANSACTION_UNSUCCESSFUL\n \nor\n \nSALE_TRANSACTION_VOID\n \nor\n \nPARTIAL_REFUNDS_UNSUPPORTED\n \nor\n \nINSUFFICIENT_BALANCE\n \nor\n \nDUPLICATE_REFUND_REQUEST\n \nor\n \nEXCESS_REFUND_AMOUNT\n \nor\n \nSALE_TRANSACTION_REFUNDED\n \nor\n \nMULTIPLE_REFUNDS_UNSUPPORTED\n \nor\n \nPAYZIPPY_TECHNICAL_ERROR\n \nor\n \nACQUIRER_TECHNICAL_ERROR\n \nor\n \nREFUND_TEMPORARILY_UNAVAILABLE\n \nor\n \nVISA_DIRECT_TIMEOUT\n \nor\n \nPENDING_ON_REFUND_REQUERY\n \nor\n \nFAILED_ON_REFUND_REQUERY\n \nor\n \nCOULD_NOT_ACQUIRE_LOCK\n \nor\n \nUPI_EXTERNAL_VPA_UNSUPPORTED\n],\n\n\ntransactionResponseMessage\n \n(\nstring\n,\n \noptional\n),\n\n\nbankArn\n \n(\nstring\n,\n \noptional\n),\n\n\nrefundSla\n \n(\nRefundSla\n,\n \noptional\n),\n\n\npaymentMethod\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nCREDIT\n \nor\n \nDEBIT\n \nor\n \nEMI\n \nor\n \nNET\n \nor\n \nPAYZIPPY\n \nor\n \nNET_OPTIONS\n \nor\n \nEMI_OPTIONS\n \nor\n \nPHONEPE\n \nor\n \nFLIPKART_CREDIT\n],\n\n\npaymentInstrument\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nCREDIT\n \nor\n \nDEBIT\n \nor\n \nEMI\n \nor\n \nNET\n \nor\n \nPAYZIPPY\n \nor\n \nNET_OPTIONS\n \nor\n \nEMI_OPTIONS\n \nor\n \nPHONEPE\n \nor\n \nFLIPKART_CREDIT\n],\n\n\nemiMonths\n \n(\nlong\n,\n \noptional\n),\n\n\nbankName\n \n(\nstring\n,\n \noptional\n),\n\n\nemiScheme\n \n(\nEmiScheme\n,\n \noptional\n),\n\n\nfraudAction\n \n(\nstring\n,\n \noptional\n),\n\n\nfraudDecision\n \n(\nstring\n,\n \noptional\n),\n\n\nfraudDetails\n \n(\nstring\n,\n \noptional\n),\n\n\nfraudSource\n \n(\nstring\n,\n \noptional\n),\n\n\npgMID\n \n(\nstring\n,\n \noptional\n),\n\n\npgTrackId\n \n(\nstring\n,\n \noptional\n),\n\n\npgId\n \n(\nstring\n,\n \noptional\n),\n\n\npgName\n \n(\nstring\n,\n \noptional\n),\n\n\nbankTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nterminalId\n \n(\nstring\n,\n \noptional\n),\n\n\npgAuthCode\n \n(\nstring\n,\n \noptional\n),\n\n\naccountType\n \n(\nstring\n,\n \noptional\n),\n\n\nsubventionPercentage\n \n(\nlong\n,\n \noptional\n),\n\n\ncardBrand\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nVISA\n \nor\n \nMASTERCARD\n \nor\n \nAMEX\n \nor\n \nMAESTRO\n \nor\n \nDINERS\n \nor\n \nRUPAY\n \nor\n \nDEFAULT\n \nor\n \nDISCOVER\n \nor\n \nBAJAJ\n],\n\n\ncardBin\n \n(\nstring\n,\n \noptional\n),\n\n\norderId\n \n(\nstring\n,\n \noptional\n),\n\n\nrelatedRecords\n \n(\nArray\n[\nRelatedRecord\n],\n \noptional\n),\n\n\nprimaryAmount\n \n(\nlong\n,\n \noptional\n),\n\n\nmerchantAdjustments\n \n(\nArray\n[\nMerchantAdjustment\n],\n \noptional\n),\n\n\nqueryTransactionStatus\n \n(\nstring\n,\n \noptional\n),\n\n\nmetadata\n \n(\nstring\n,\n \noptional\n),\n\n\nsaleTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nconfirmedFraud\n \n(\nboolean\n,\n \noptional\n),\n\n\ninternational\n \n(\nboolean\n,\n \noptional\n),\n\n\nriskyInstrument\n \n(\nboolean\n,\n \noptional\n)\n\n\n}\n\n\nRefundSla\n \n{\n\n\nminSla\n \n(\nlong\n,\n \noptional\n),\n\n\nmaxSla\n \n(\nlong\n,\n \noptional\n)\n\n\n}\n\n\nEmiScheme\n \n{\n\n\nemiTenureInMonths\n \n(\nlong\n,\n \noptional\n),\n\n\ninterestValue\n \n(\nlong\n,\n \noptional\n),\n\n\ninterestType\n \n(\nstring\n,\n \noptional\n)\n\n\n}\n\n\nRelatedRecord\n \n{\n\n\nadjustmentTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nrelation\n \n(\nstring\n,\n \noptional\n),\n\n\nadjustmentId\n \n(\nstring\n,\n \noptional\n),\n\n\nadjustmentAmount\n \n(\nlong\n,\n \noptional\n)\n\n\n}\n\n\nMerchantAdjustment\n \n{\n\n\ntransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nofferId\n \n(\nstring\n,\n \noptional\n),\n\n\nofferUnitPrice\n \n(\nlong\n,\n \noptional\n),\n\n\namountApplied\n \n(\nlong\n,\n \noptional\n),\n\n\namountRequested\n \n(\nlong\n,\n \noptional\n),\n\n\npromiseDate\n \n(\nstring\n,\n \noptional\n),\n\n\nactualSubventionAmount\n \n(\nlong\n,\n \noptional\n),\n\n\neffectiveSubventionAmount\n \n(\nlong\n,\n \noptional\n),\n\n\nadjustmentResponseCode\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nEXPIRED\n \nor\n \nINVALID\n \nor\n \nFAILED_BY_TIME\n \nor\n \nREJECTED_BY_WHITELIST\n \nor\n \nREJECTED_BY_BLACKLIST\n \nor\n \nREJECTED_BY_RULE\n \nor\n \nREJECTED_LOW_PRIORITY\n \nor\n \nEXHAUSTED_BY_TXNID\n \nor\n \nEXHAUSTED_BY_EMAIL\n \nor\n \nEXHAUSTED_BY_ACCOUNT\n \nor\n \nEXHAUSTED_BY_PHONE\n \nor\n \nEXHAUSTED_BY_IP\n \nor\n \nEXHAUSTED_BY_ACCID\n \nor\n \nEXHAUSTED_BY_MID\n \nor\n \nEXHAUSTED_GLOBAL\n \nor\n \nEXHAUSTED_BY_CARD\n \nor\n \nMISSING_PAYMENT_INFO\n \nor\n \nELIGIBLE\n \nor\n \nNOT_ELIGIBLE\n \nor\n \nOFFER_NOT_APPLIED\n \nor\n \nREJECTED_DUE_TO_PAYMENT_WARNING\n],\n\n\nadjustmentType\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nINSTANT_DISCOUNT\n \nor\n \nCASHBACK_ON_CARD\n \nor\n \nCASHBACK_IN_BANK\n \nor\n \nCASHBACK_IN_WALLET\n \nor\n \nINSTANT_CASHBACK\n \nor\n \nDOWN_PAYMENT\n],\n\n\nmetadata\n \n(\nobject\n,\n \noptional\n)\n\n\n}\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nSample Request\n{\n  \nmerchantCredential\n: {\n    \nname\n: \nEnter name here\n,\n    \npassword\n: \nEnter hash here\n\n  },\n  \nforcePgQuery\n: true,\n  \nmerchantTransactionId\n: \ntransaction1\n,\n  \npaymentTransactionId\n: \nPZT1712211056FQM0400\n\n}\n\n\n\n\n\n\nRefund\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\nPath\n:\n \n2\n/payment/\nrefund\n\n\n\nMethod\n:\n \nPOST\n\n\nBody\n:\n \nRefundRequest\n\n\nRefundRequest\n \n{\n\n\nmerchantCredential\n(\nMerchantCredential\n),\n\n\nmerchantTransactionId\n \n(\nstring\n),\n\n\npayzippySaleTrasactionId\n \n(\nstring\n),\n\n\nrefundAmount\n \n(\nlong\n),\n\n\nrefundReason\n \n(\nstring\n),\n\n\nrefundedBy\n \n(\nstring\n),\n\n\nmerchantRefundTransactionId\n(\nstring\n,\n \noptional\n),\n\n\nidempotencyId\n \n(\nstring\n,\n \noptional\n),\n\n\nmetadata\n \n(\nstring\n,\n \noptional\n)\n\n\n}\n\n\nMerchantCredential\n \n{\n\n\nname\n \n(\nstring\n),\n\n\npassword\n \n(\nstring\n)\n\n\n}\n\n\nResponse\n \n:\n \nRefundResponse\n\n\nRefundResponse\n \n{\n\n\nbankArn\n \n(\nstring\n,\n \noptional\n),\n\n\npgMID\n \n(\nstring\n,\n \noptional\n),\n\n\npgTrackId\n \n(\nstring\n,\n \noptional\n),\n\n\npgId\n \n(\nstring\n,\n \noptional\n),\n\n\npgName\n \n(\nstring\n,\n \noptional\n),\n\n\nbankTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nterminalId\n \n(\nstring\n,\n \noptional\n),\n\n\ncardBrand\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nVISA\n \nor\n \nMASTERCARD\n \nor\n \nAMEX\n \nor\n \nMAESTRO\n \nor\n \nDINERS\n \nor\n \nRUPAY\n \nor\n \nDEFAULT\n \nor\n \nDISCOVER\n \nor\n \nBAJAJ\n],\n\n\ncardBin\n \n(\nstring\n,\n \noptional\n),\n\n\nadjustmentTransactionIds\n \n(\nstring\n,\n \noptional\n),\n\n\nadjustmentRelations\n \n(\nstring\n,\n \noptional\n),\n\n\nadjustmentIds\n \n(\nstring\n,\n \noptional\n),\n\n\nadjustmentAmounts\n \n(\nstring\n,\n \noptional\n),\n\n\nrefundAmount\n \n(\nlong\n,\n \noptional\n),\n\n\nmerchantTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\npayzippyTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nrefundCurrency\n \n(\nstring\n,\n \noptional\n),\n\n\ntransactionTime\n \n(\nlong\n,\n \noptional\n),\n\n\nrefundSla\n \n(\nRefundSla\n,\n \noptional\n),\n\n\nrefundStatus\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nREFUND_REQUEST_RECEIVED\n \nor\n \nREFUND_REQUEST_SUBMITTED\n \nor\n \nSUCCESS\n \nor\n \nFAILED\n \nor\n \nREFUNDED\n \nor\n \nPENDING\n],\n\n\nrefundResponseCode\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nSUCCESS\n \nor\n \nREFUND_REQUEST_ACCEPTED\n \nor\n \nREFUND_REQUEST_SENT\n \nor\n \nREFUNDED\n \nor\n \nREFUND_VOID_SUCCESS\n \nor\n \nTXNID_NOT_FOUND\n \nor\n \nREFUND_NOT_SUPPORTED\n \nor\n \nREFUND_WINDOW_EXPIRED\n \nor\n \nSIMILAR_PREVIOUS_PARTIAL_REFUND_DETECTED\n \nor\n \nSALE_TRANSACTION_UNSUCCESSFUL\n \nor\n \nSALE_TRANSACTION_VOID\n \nor\n \nPARTIAL_REFUNDS_UNSUPPORTED\n \nor\n \nINSUFFICIENT_BALANCE\n \nor\n \nDUPLICATE_REFUND_REQUEST\n \nor\n \nEXCESS_REFUND_AMOUNT\n \nor\n \nSALE_TRANSACTION_REFUNDED\n \nor\n \nMULTIPLE_REFUNDS_UNSUPPORTED\n \nor\n \nPAYZIPPY_TECHNICAL_ERROR\n \nor\n \nACQUIRER_TECHNICAL_ERROR\n \nor\n \nREFUND_TEMPORARILY_UNAVAILABLE\n \nor\n \nVISA_DIRECT_TIMEOUT\n \nor\n \nPENDING_ON_REFUND_REQUERY\n \nor\n \nFAILED_ON_REFUND_REQUERY\n \nor\n \nCOULD_NOT_ACQUIRE_LOCK\n \nor\n \nUPI_EXTERNAL_VPA_UNSUPPORTED\n],\n\n\nrefundResponseMessage\n \n(\nstring\n,\n \noptional\n),\n\n\nmetaData\n \n(\nstring\n,\n \noptional\n)\n\n\n}\n\n\nRefundSla\n \n{\n\n\nminSla\n \n(\nlong\n,\n \noptional\n),\n\n\nmaxSla\n \n(\nlong\n,\n \noptional\n)\n\n\n}\n\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\nSample Request\n{\n  \nmerchantCredential\n: {\n    \nname\n: \nEnter name here\n,\n    \npassword\n: \nEnter hash here\n\n  },\n  \nmerchantTransactionId\n: \ntransaction1\n,\n  \npayzippySaleTrasactionId\n: \nPZT1712211056FQM0400\n,\n  \nrefundAmount\n: 100,\n  \nrefundReason\n: \ntesting\n,\n  \nrefundedBy\n: \nAnvay\n,\n  \nmerchantRefundTransactionId\n: \ntransaction1-refund1\n\n}\n\n\n\n\n\n\nOMS\n\n\nOMS stands for \nOrder Management System\n. Its the system which handles post order flows and its primary job is to power the \nMy Orders\n screen on the flipkart apps.\nWhen your system knows that an order has got placed or updated, you can call the following API to let Flipkart OMS know about the change.\nThis information will be rendered on the user's \nMy orders\n screen with all the details you provide. We will also use this information for powering our CX agents for better experience.\nFor a better view of OMS, to understand its purpose and to understand the meaning of every field being uploaded refer \nthis page\n too\n\n\nOMS Upsert\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\nPath: /2/oms\nMethod: POST\nBody:\nOrder {\norderId (string),\ndescription (string),\nidentityToken (string),\norderTimestamp (long),\norderUpdatedTimestamp(long),\norderUrl (string),\nitems (Array[Item]),\nforwardTransactions (Array[ForwardTransaction], optional),\nreverseTransactions (Array[ReverseTransaction], optional),\nmerchantAdjustments (Array[MerchantAdjustment], optional),\nflipkartAdjustments (Array[FlipkartAdjustment], optional),\ncancellationCharges (Array[CancellationCharges], optional)\n}\nItem {\nitemId (string),\ntitle (string),\nimage (string),\nbasePrice (double),\nfinalPrice (double, optional),\ncategory (string),\nfulfillmentDate (long),\nitemState (string) = [\nINIT\n or \nSUCCESSFUL\n or \nCANCELLED\n or \nPENDING\n],\nbrand (string),\nproduct (string),\ncustomerName (string),\nquantity (string)\n}\nForwardTransaction {\ntransactionId (string),\namount (double),\ndescription (string),\ntimestamp (long)\n}\nReverseTransaction {\nforwardTransactionId (string),\nreverseTransactionId (string),\namount (double),\ndescription (string),\ntimestamp (long)\n}\nMerchantAdjustment {\nadjustmentId (string),\namount (double),\ntitle (string)\n}\nFlipkartAdjustment {\nadjustmentId (string),\namount (double)\n}\nCancellationCharges {\nitemId (string),\nreason (string),\namount (double)\n}\n\n\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\nSample Request\n{\n  \norderId\n: \nDummyOrderId\n,\n  \ndescription\n: \nThis is a dummy description\n,\n  \nidentityToken\n: \nsomeIdentityToken\n,\n  \norderTimestamp\n: 1530622713945,\n  \norderUpdatedTimestamp\n: 1530622713945,\n  \norderUrl\n: \nsomeURLToOrderPage\n,\n  \nitems\n: [\n    {\n      \nitemId\n: \nProduct 1\n,\n      \ntitle\n: \nThis is a product\n,\n      \nimage\n: \nimage.url\n,\n      \nbasePrice\n: 120,\n      \nfinalPrice\n: 100,\n      \ncategory\n: \ntest\n,\n      \nfulfillmentDate\n: 1530622713946,\n      \nitemState\n: \nSUCCESSFUL\n,\n      \nbrand\n: \nSome brand\n,\n      \nproduct\n: \nmodelNumber\n,\n      \ncustomerName\n: \nLorem Ipsum\n,\n      \nquantity\n: 1\n    },\n    {\n      \nitemId\n: \nProduct 2\n,\n      \ntitle\n: \nThis is a product\n,\n      \nimage\n: \nimage.url\n,\n      \nbasePrice\n: 120,\n      \nfinalPrice\n: 100,\n      \ncategory\n: \ntest\n,\n      \nfulfillmentDate\n: 1530622713946,\n      \nitemState\n: \nSUCCESSFUL\n,\n      \nbrand\n: \nSome brand\n,\n      \nproduct\n: \nmodelNumber\n,\n      \ncustomerName\n: \nLorem Ipsum 2\n,\n      \nquantity\n: 1\n    }\n  ],\n  \nforwardTransactions\n: [\n    {\n      \ntransactionId\n: \ntransaction1\n,\n      \namount\n: 100,\n      \ndescription\n: \nPaid via FKPG\n,\n      \ntimestamp\n: 1530622713956\n    }\n  ],\n  \nreverseTransactions\n: [\n    {\n      \nforwardTransactionId\n: \ntransaction1\n,\n      \nreverseTransactionId\n: \nrev_transaction1\n,\n      \namount\n: 10,\n      \ndescription\n: \nRefund for cancellation\n,\n      \ntimestamp\n: 1530622714957\n    }\n  ],\n  \nmerchantAdjustments\n: [\n    {\n      \nadjustmentId\n: \nDummy merchant adjustment id\n,\n      \ntitle\n: \nThis is some title\n,\n      \namount\n: 20\n    }\n  ],\n  \nflipkartAdjustments\n: [\n    {\n      \nadjustmentId\n: \ndummyAdjustmentId\n,\n      \namount\n: 20\n    }\n  ],\n  \ncancellationCharges\n: [\n    {\n      \nitemId\n: \nProduct 1\n,\n      \nreason\n: \nCancellation costs are sometimes deducted\n,\n      \namount\n: 10\n    }\n  ]\n}\n\n\n\n\n\n\nOffers\n\n\nFlipkart might have some offers. These Apis let you interact with them.\n\n\nGet offers list\n\n\n1\n2\nPath: /2/offers/active\nMethod: GET", 
            "title": "Basic APIs"
        }, 
        {
            "location": "/backend/#ultra-backend-apis", 
            "text": "", 
            "title": "Ultra Backend APIs"
        }, 
        {
            "location": "/backend/#endpoint-contracts", 
            "text": "Prod endpoint:  https://platform.flipkart.net   There is no staging endpoint for Ultra. You can do all development on Prod endpoint.", 
            "title": "Endpoint Contracts"
        }, 
        {
            "location": "/backend/#security", 
            "text": "All production endpoints will be over https.\nWe will validate Client\u2019s identity using JWT.\nThe JWT will be shared in every call in header as a \u2018secureToken\u2019\nProperties of secure token", 
            "title": "Security"
        }, 
        {
            "location": "/backend/#header", 
            "text": "1\n2\n3\n4 {\n   alg :  RS256 ,\n   typ :  JWT \n}", 
            "title": "Header"
        }, 
        {
            "location": "/backend/#payload", 
            "text": "'Note:' clientId should be fetched from flipkart.  1\n2\n3\n4\n5 {\n   iss : \u2264clientId\u2265,\n   iat :  unix timestamp in seconds , // Issued at. Should be in past.\n   exp :  unix timestamp in seconds  // Expiry of token. Should be in future. Also exp - iat should not be   100.\n}   The Public key should be shared with flipkart before hand.  1\n2\n3\n4 Path: /1/dummy\nMethod: GET\nHeader: secureToken\nResponse:  Will be HTTP 200 if secureToken is valid otherwise response code will be self explanatory.", 
            "title": "Payload"
        }, 
        {
            "location": "/backend/#access-token-flow", 
            "text": "Using the grantToken from the SDK, you have to fetch the accessToken before querying for any resources.\nGet Auth token flow   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14 Path: /1/authorization/auth\n\nMethod: GET\n\nQuery parameters:\ngrantToken : String\nclientId : String\nclientSecret : String\n\nResponse :\nAuthTokenResponse {\nidentityToken (string),\naccessToken (string)\n}", 
            "title": "Access token flow"
        }, 
        {
            "location": "/backend/#resource-fetching-flow", 
            "text": "Resources like user.mobile, user.email can be fetched with this API\nfetch bulk data   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15 Path: /1/resource/bulk\n\nMethod: POST\nQuery parameters:\naccessToken : String\nBody: List String  //where each string is scope for which data is to be fetched.\nResponse : Map String,Object  // String the scope and Object for each scope is defined below\nuser.mobile{\nemail(string)\nisVerified(boolean)\n}\nuser.email{\nmobileNumber(string)\nisVerified(boolean)\n}", 
            "title": "Resource fetching flow"
        }, 
        {
            "location": "/backend/#payment-flow", 
            "text": "This section describes FKPG (Flipkart payment gateway) APIs which can be used to initiate payments and for receiving refunds.\nContact Flipkart team to get the merchant credentials required to access this API. The merchant credentials are different from  clientId  and  secret  used for Ultra APIs", 
            "title": "Payment flow."
        }, 
        {
            "location": "/backend/#payment-token", 
            "text": "This is the first step in initiating payments. Use this API to generate a payment token which can be used to show the FKPG payment options screen, this screen can be shown via Ultra's client SDK. This will open FKPG outside of Ultra container.  Note : Category should be fetched from flipkart.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60 Path :   2 /payment/ token  Method :   POST  Body :   PaymentTokenRequest  PaymentTokenRequest   {  merchantCredential ( MerchantCredential ),  amountPaise   ( long ),  category ( string ),  paymentExpiryMilliSeconds   ( long ,   optional ),  userInfo   ( UserInfo ),  adjustmentWrapper ( AdjustmentWrapper ,   optional ),  priceSummary   ( PriceSummary ),  successfulCallBackUrl   ( string ),  failureCallBackUrl   ( string ),  address   ( Address ,   optional ),  description   ( string ,   optional ),  metadata   ( string ,   optional ),  merchantTransactionId   ( string ),  merchantReferenceId   ( string )  }  MerchantCredential   {  name   ( string ),  password   ( string )  }  UserInfo   {  name   ( string ,   optional ),  phone   ( string ,   optional ),  email   ( string ,   optional ),  identityToken   ( string )  }  AdjustmentWrapper   {  eligibleAdjustments ( Array [ EligibleAdjustment ],   optional )  }  EligibleAdjustment   {  adjustment_id   ( string ,   optional ),  offerUnitPrice   ( long ,   optional ),  metadata   ( object ,   optional )  }  PriceSummary   {  basePricePaise   ( long ),  itemCount   ( integer ),  breakup ( Array [ PriceSummaryBreakup ])  }  PriceSummaryBreakup   {  description   ( string ),  displayText   ( string ),  valueInPaise   ( long ),  breakupType   ( string )   =   [ DEFAULT   or   DISCOUNT ]  }  Address   {  addressLine   ( string ,   optional ),  city   ( string ,   optional ),  state   ( string ,   optional ),  pincode   ( string ,   optional ),  country   ( string ,   optional )  }  Response   :   PaymentToken  PaymentToken   {  token   ( string )  }     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31 Sample Request\n{\n   merchantCredential : {\n     name :  Enter name here ,\n     password :  Enter hash here \n  },\n   merchantTransactionId :  transaction1 ,\n   merchantReferenceId :  order1 ,\n   amountPaise : 200,\n   paymentExpiryMilliSeconds : 100000,\n   category :  test ,\n   userInfo : {\n     identityToken :  Actual ID token here \n  },\n   successfulCallBackUrl :  http://www.partner.com/success ,\n   failureCallBackUrl :  http://www.partner.com/failure ,\n   description :  this is a test transaction ,\n   metadata :  this is a test transaction ,\n   priceSummary : {\n     basePricePaise : 100,\n     itemCount : 0,\n     breakup : [\n      {\n         description :  convinience_fee ,\n         displayText :  Convinence Fee ,\n         valueInPaise : 100,\n         breakupType :  DEFAULT \n      }\n    ]\n  }\n}", 
            "title": "Payment Token"
        }, 
        {
            "location": "/backend/#callback-after-pgresponse", 
            "text": "Once a user pays, a  POST  call is made to the  successfulCallBackUrl  specified in payment token request. The payload of the FORM data is present below.\nYou can then issue a HTTP redirect to the  fapp:  URL to redirect back to ultra container and also specify the order confirmation page url to open in the same format.\nThis will open your order confirmation page within ultra container (payment happens outside of it). Its mandatory to redirect to ultra container via  fapp: . Do not open any UI outside of ultra container.   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49 Request (will be sent as form parameters)\n\n{\n       transaction_status :  , //  SUCCESS, FAILED\n       account_type :  NODAL ,\n       pg_trackid :  ,     \n       merchant_adjustments :\n       [\n      { offer_id : ,\n       offer_unit_price :0,\n       amount_applied :0,\n       amount_requested :0,\n       actual_subvention_amount :0,\n       effective_subvention_amount :0,\n       Adjustment_response_code : AdjustmentResponseCode,   //  Appendix\n       metadata :{ paymentSystem : ,  offerId : ,  discountType : }}\n      ] ,\n       transaction_amount :  ,\n       emi_months :  ,\n       merchant_id :  ,\n       transaction_response_code :  ,      //  Appendix\n       payzippy_transaction_id :  ,\n       having_multiple_transactions :  ,\n       bank_name :  ,\n       card_brand : CardName,   //  Appendix\n       hash_method :  ,\n       transaction_time :  ,\n       transaction_currency :  ,\n       payment_method :  ,     //  Appendix\n       timestamp :  ,\n       merchant_key_id :  ,\n       primary_record :\n       { transaction_id :  ,  primary_amount :  } ,\n       merchant_transaction_id :  ,\n       bank_transaction_id :  ,\n       payment_instrument :  ,\n       transaction_response_message :  ,\n       pg_mid :  ,\n       pg_name :  ,\n       pg_authcode :  ,\n       pg_id :  ,\n       is_international :  ,\n       fraud_action :  ,\n       is_risky_instrument :  ,\n       transaction_auth_state :  ,\n       hash :  ,\n       masked_card_number :  , card_bin :  ,\n}   1\n2\n3 Form Data\n\ntransaction_status= account_type= pg_trackid= merchant_adjustments=[ { offer_id : ,  offer_unit_price :0,  amount_applied :0,  amount_requested :0,  actual_subvention_amount :0,  effective_subvention_amount :0, ent_response_code : ,  metadata :{ paymentSystem : ,  offerId : ,  discountType : }} ]transaction_amount= emi_months= merchant_id= transaction_response_code= payzippy_transaction_id= having_multiple_transactions= bank_name= card_brand= hash_method= transaction_time= transaction_currency= payment_method= timestamp= merchant_key_id= primary_record={ transaction_id :  ,  primary_amount :  }merchant_transaction_id= bank_transaction_id= payment_instrument= transaction_response_message= pg_mid= pg_name= pg_authcode= pg_id= is_international= fraud_action= is_risky_instrument= transaction_auth_state= hash= masked_card_number= transaction_status= account_type= pg_trackid= merchant_adjustments= transaction_amount= emi_months= merchant_id= transaction_response_code= payzippy_transaction_id= having_multiple_transactions= bank_name= card_brand= hash_method= transaction_time= transaction_currency= payment_method= timestamp= merchant_key_id= primary_record= merchant_transaction_id= bank_transaction_id= payment_instrument= transaction_response_message= pg_mid= pg_name= pg_authcode= pg_id= is_international= fraud_action= is_risky_instrument= transaction_auth_state= hash= masked_card_number=", 
            "title": "Callback after PGResponse"
        }, 
        {
            "location": "/backend/#query", 
            "text": "1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106 Path :   2 /payment/ query  Method :   POST  Body :   QueryRequest  QueryRequest   {  merchantCredential ( MerchantCredential ),  forcePgQuery   ( boolean ,   optional ),  merchantTransactionId   ( string ),  paymentTransactionId   ( string ),  transactionType   ( string ,   optional )   =   [ ADJUSTMENT   or   SALE   or   REFUND   or   REVADJUSTMENT ]  }  MerchantCredential   {  name   ( string ),  password   ( string )  }  Response   :   QueryResponse \n  QueryResponse   {  responseStatus   ( string ,   optional )   =   [ SUCCESS   or   FAILED ],  responseType   ( string ,   optional ),  responseMessage   ( string ,   optional ),  messages   ( Array [ QueryMessage ],   optional ),  merchantId   ( string ,   optional ),  merchantTransactionId   ( string ,   optional ),  merchantReferenceId   ( string ,   optional ),  transactionState   ( string ,   optional )   =   [ INITIATED   or   PENDING   or   SUCCESS   or   FAILED ],  paymentTransactions   ( Array [ PaymentTransaction ],   optional )  }  QueryMessage   {  type   ( string ,   optional ),  message   ( string ,   optional )  }  PaymentTransaction   {  merchantTransactionId   ( string ,   optional ),  paymentTransactionId   ( string ,   optional ),  transactionAmount   ( long ,   optional ),  transactionCurrency   ( string ,   optional ),  transactionType   ( string ,   optional )   =   [ ADJUSTMENT   or   SALE   or   REFUND   or   REVADJUSTMENT ],  transactionTime   ( string ,   optional ),  realTransactionTime   ( string ,   optional ),  transactionStatus   ( string ,   optional )   =   [ INITIATED   or   PENDING   or   SUCCESS   or   FAILED ],  transactionAuthState   ( string ,   optional )   =   [ PRE_AUTH   or   PARTIAL_CAPTURED   or   FULL_CAPTURED   or   CAPTURE_COMPLETED   or   VOID   or   FAILED   or   SALE ],  transactionResponseCode   ( string ,   optional )   =   [ REFUND_REQUEST_ACCEPTED   or   REFUND_REQUEST_SENT   or   REFUNDED   or   REFUND_VOID_SUCCESS   or   TXNID_NOT_FOUND   or   REFUND_NOT_SUPPORTED   or   REFUND_WINDOW_EXPIRED   or   SIMILAR_PREVIOUS_PARTIAL_REFUND_DETECTED   or   SALE_TRANSACTION_UNSUCCESSFUL   or   SALE_TRANSACTION_VOID   or   PARTIAL_REFUNDS_UNSUPPORTED   or   INSUFFICIENT_BALANCE   or   DUPLICATE_REFUND_REQUEST   or   EXCESS_REFUND_AMOUNT   or   SALE_TRANSACTION_REFUNDED   or   MULTIPLE_REFUNDS_UNSUPPORTED   or   REFUND_TEMPORARILY_UNAVAILABLE   or   VISA_DIRECT_TIMEOUT   or   PENDING_ON_REFUND_REQUERY   or   FAILED_ON_REFUND_REQUERY   or   COULD_NOT_ACQUIRE_LOCK   or   _3DS_AUTH_FAILED   or   _3DS_AUTH_UNSUPPORTED   or   ADDRESS_VERIFICATION_FAILED   or   BANK_RESPONSE_DELAYED   or   BIN_BLOCKED_BY_ACQUIRER   or   CARD_EXPIRED   or   CARD_NOT_ENROLLED   or   CARD_NUMBER_INVALID   or   COUNTRY_NOT_SUPPORTED   or   CVV_INCORRECT   or   CVV_MISSING   or   SBI_DEBIT_CARD_BLOCKED   or   PIN_INCORRECT   or   CANCELLED_BY_ACQUIRER   or   DECLINED_BY_ACQUIRER   or   DECLINED_BY_ISSUER   or   DECLINED_BY_RISK   or   INSUFFICIENT_FUNDS   or   ISSUER_TECHNICAL_ERROR   or   EMI_NO_PG_FOR_CURRENT_AMOUNT   or   NO_PG_FOR_CURRENT_AMOUNT   or   UPI_EXTERNAL_VPA_UNSUPPORTED   or   MID_NOT_ACTIVE   or   MID_NOT_FOUND   or   DUPLICATE_TXN_REQUEST   or   INVALID_TRANSACTION_ID   or   MERCHANT_AUTH_FAILED   or   DECLINED_BY_PAYZIPPY   or   BANK_UNAVAILABLE   or   CARD_EXPIRY_DATE_INVALID   or   CANCELLED_BY_USER   or   USER_SESSION_TIMED_OUT   or   USER_REFRESH_COUNT_EXCEEDED   or   USER_RETRY_COUNT_EXCEEDED   or   INVALID_PROCESSPAY_REQUEST   or   MANDATORY_PARAM_MISSING   or   INVALID_PARAM_FORMAT   or   INVALID_PARAM_VALUE   or   INVALID_PAYZIPPY_ACCOUNT   or   NETBANKING_NOT_ENABLED   or   NETBANKING_LIMIT_EXCEEDED   or   ACCOUNT_ON_HOLD   or   PAY_LATER_ELIGIBILITY_FAILURE   or   PAYZIPPY_TECHNICAL_ERROR   or   ACQUIRER_TECHNICAL_ERROR   or   SUCCESS   or   INITIATED   or   PENDING   or   REQUEST_FIELD_INVALID   or   SYSTEM_UNDER_MAINTENANCE   or   EMPTY_OTP_ERROR   or   INTERNAL_SERVER_ERROR   or   DATABASE_SERVER_ERROR   or   PROTOCOL_ERROR   or   NOT_PERMITTED   or   CARD_NOT_IN_3DS_RANGE   or   INVALID_AUTH_DATA   or   INVALID_REQUEST_TYPE   or   INVALID_REQUEST_XML_FORMAT   or   HASH_CHECK_FAILED   or   INVALID_MERCHANT_ID   or   ITP_VALIDATION_FAILED   or   INVALID_IVR_OTP_DATA   or   TIMED_OUT   or   UNABLE_TO_PROCESS_REQUEST   or   INVALID_RESPONSE_XML_FORMAT   or   CARD_BLOCKS   or   OPEN_ECS_NACH_MANDATE   or   DDF_DEALER   or   CARD_OFFER_EXHAUSTED   or   CHECK_SUM_MISMATCH ],  refundResponseCode   ( string ,   optional )   =   [ SUCCESS   or   REFUND_REQUEST_ACCEPTED   or   REFUND_REQUEST_SENT   or   REFUNDED   or   REFUND_VOID_SUCCESS   or   TXNID_NOT_FOUND   or   REFUND_NOT_SUPPORTED   or   REFUND_WINDOW_EXPIRED   or   SIMILAR_PREVIOUS_PARTIAL_REFUND_DETECTED   or   SALE_TRANSACTION_UNSUCCESSFUL   or   SALE_TRANSACTION_VOID   or   PARTIAL_REFUNDS_UNSUPPORTED   or   INSUFFICIENT_BALANCE   or   DUPLICATE_REFUND_REQUEST   or   EXCESS_REFUND_AMOUNT   or   SALE_TRANSACTION_REFUNDED   or   MULTIPLE_REFUNDS_UNSUPPORTED   or   PAYZIPPY_TECHNICAL_ERROR   or   ACQUIRER_TECHNICAL_ERROR   or   REFUND_TEMPORARILY_UNAVAILABLE   or   VISA_DIRECT_TIMEOUT   or   PENDING_ON_REFUND_REQUERY   or   FAILED_ON_REFUND_REQUERY   or   COULD_NOT_ACQUIRE_LOCK   or   UPI_EXTERNAL_VPA_UNSUPPORTED ],  transactionResponseMessage   ( string ,   optional ),  bankArn   ( string ,   optional ),  refundSla   ( RefundSla ,   optional ),  paymentMethod   ( string ,   optional )   =   [ CREDIT   or   DEBIT   or   EMI   or   NET   or   PAYZIPPY   or   NET_OPTIONS   or   EMI_OPTIONS   or   PHONEPE   or   FLIPKART_CREDIT ],  paymentInstrument   ( string ,   optional )   =   [ CREDIT   or   DEBIT   or   EMI   or   NET   or   PAYZIPPY   or   NET_OPTIONS   or   EMI_OPTIONS   or   PHONEPE   or   FLIPKART_CREDIT ],  emiMonths   ( long ,   optional ),  bankName   ( string ,   optional ),  emiScheme   ( EmiScheme ,   optional ),  fraudAction   ( string ,   optional ),  fraudDecision   ( string ,   optional ),  fraudDetails   ( string ,   optional ),  fraudSource   ( string ,   optional ),  pgMID   ( string ,   optional ),  pgTrackId   ( string ,   optional ),  pgId   ( string ,   optional ),  pgName   ( string ,   optional ),  bankTransactionId   ( string ,   optional ),  terminalId   ( string ,   optional ),  pgAuthCode   ( string ,   optional ),  accountType   ( string ,   optional ),  subventionPercentage   ( long ,   optional ),  cardBrand   ( string ,   optional )   =   [ VISA   or   MASTERCARD   or   AMEX   or   MAESTRO   or   DINERS   or   RUPAY   or   DEFAULT   or   DISCOVER   or   BAJAJ ],  cardBin   ( string ,   optional ),  orderId   ( string ,   optional ),  relatedRecords   ( Array [ RelatedRecord ],   optional ),  primaryAmount   ( long ,   optional ),  merchantAdjustments   ( Array [ MerchantAdjustment ],   optional ),  queryTransactionStatus   ( string ,   optional ),  metadata   ( string ,   optional ),  saleTransactionId   ( string ,   optional ),  confirmedFraud   ( boolean ,   optional ),  international   ( boolean ,   optional ),  riskyInstrument   ( boolean ,   optional )  }  RefundSla   {  minSla   ( long ,   optional ),  maxSla   ( long ,   optional )  }  EmiScheme   {  emiTenureInMonths   ( long ,   optional ),  interestValue   ( long ,   optional ),  interestType   ( string ,   optional )  }  RelatedRecord   {  adjustmentTransactionId   ( string ,   optional ),  relation   ( string ,   optional ),  adjustmentId   ( string ,   optional ),  adjustmentAmount   ( long ,   optional )  }  MerchantAdjustment   {  transactionId   ( string ,   optional ),  offerId   ( string ,   optional ),  offerUnitPrice   ( long ,   optional ),  amountApplied   ( long ,   optional ),  amountRequested   ( long ,   optional ),  promiseDate   ( string ,   optional ),  actualSubventionAmount   ( long ,   optional ),  effectiveSubventionAmount   ( long ,   optional ),  adjustmentResponseCode   ( string ,   optional )   =   [ EXPIRED   or   INVALID   or   FAILED_BY_TIME   or   REJECTED_BY_WHITELIST   or   REJECTED_BY_BLACKLIST   or   REJECTED_BY_RULE   or   REJECTED_LOW_PRIORITY   or   EXHAUSTED_BY_TXNID   or   EXHAUSTED_BY_EMAIL   or   EXHAUSTED_BY_ACCOUNT   or   EXHAUSTED_BY_PHONE   or   EXHAUSTED_BY_IP   or   EXHAUSTED_BY_ACCID   or   EXHAUSTED_BY_MID   or   EXHAUSTED_GLOBAL   or   EXHAUSTED_BY_CARD   or   MISSING_PAYMENT_INFO   or   ELIGIBLE   or   NOT_ELIGIBLE   or   OFFER_NOT_APPLIED   or   REJECTED_DUE_TO_PAYMENT_WARNING ],  adjustmentType   ( string ,   optional )   =   [ INSTANT_DISCOUNT   or   CASHBACK_ON_CARD   or   CASHBACK_IN_BANK   or   CASHBACK_IN_WALLET   or   INSTANT_CASHBACK   or   DOWN_PAYMENT ],  metadata   ( object ,   optional )  }     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 Sample Request\n{\n   merchantCredential : {\n     name :  Enter name here ,\n     password :  Enter hash here \n  },\n   forcePgQuery : true,\n   merchantTransactionId :  transaction1 ,\n   paymentTransactionId :  PZT1712211056FQM0400 \n}", 
            "title": "Query"
        }, 
        {
            "location": "/backend/#refund", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49 Path :   2 /payment/ refund  Method :   POST  Body :   RefundRequest  RefundRequest   {  merchantCredential ( MerchantCredential ),  merchantTransactionId   ( string ),  payzippySaleTrasactionId   ( string ),  refundAmount   ( long ),  refundReason   ( string ),  refundedBy   ( string ),  merchantRefundTransactionId ( string ,   optional ),  idempotencyId   ( string ,   optional ),  metadata   ( string ,   optional )  }  MerchantCredential   {  name   ( string ),  password   ( string )  }  Response   :   RefundResponse  RefundResponse   {  bankArn   ( string ,   optional ),  pgMID   ( string ,   optional ),  pgTrackId   ( string ,   optional ),  pgId   ( string ,   optional ),  pgName   ( string ,   optional ),  bankTransactionId   ( string ,   optional ),  terminalId   ( string ,   optional ),  cardBrand   ( string ,   optional )   =   [ VISA   or   MASTERCARD   or   AMEX   or   MAESTRO   or   DINERS   or   RUPAY   or   DEFAULT   or   DISCOVER   or   BAJAJ ],  cardBin   ( string ,   optional ),  adjustmentTransactionIds   ( string ,   optional ),  adjustmentRelations   ( string ,   optional ),  adjustmentIds   ( string ,   optional ),  adjustmentAmounts   ( string ,   optional ),  refundAmount   ( long ,   optional ),  merchantTransactionId   ( string ,   optional ),  payzippyTransactionId   ( string ,   optional ),  refundCurrency   ( string ,   optional ),  transactionTime   ( long ,   optional ),  refundSla   ( RefundSla ,   optional ),  refundStatus   ( string ,   optional )   =   [ REFUND_REQUEST_RECEIVED   or   REFUND_REQUEST_SUBMITTED   or   SUCCESS   or   FAILED   or   REFUNDED   or   PENDING ],  refundResponseCode   ( string ,   optional )   =   [ SUCCESS   or   REFUND_REQUEST_ACCEPTED   or   REFUND_REQUEST_SENT   or   REFUNDED   or   REFUND_VOID_SUCCESS   or   TXNID_NOT_FOUND   or   REFUND_NOT_SUPPORTED   or   REFUND_WINDOW_EXPIRED   or   SIMILAR_PREVIOUS_PARTIAL_REFUND_DETECTED   or   SALE_TRANSACTION_UNSUCCESSFUL   or   SALE_TRANSACTION_VOID   or   PARTIAL_REFUNDS_UNSUPPORTED   or   INSUFFICIENT_BALANCE   or   DUPLICATE_REFUND_REQUEST   or   EXCESS_REFUND_AMOUNT   or   SALE_TRANSACTION_REFUNDED   or   MULTIPLE_REFUNDS_UNSUPPORTED   or   PAYZIPPY_TECHNICAL_ERROR   or   ACQUIRER_TECHNICAL_ERROR   or   REFUND_TEMPORARILY_UNAVAILABLE   or   VISA_DIRECT_TIMEOUT   or   PENDING_ON_REFUND_REQUERY   or   FAILED_ON_REFUND_REQUERY   or   COULD_NOT_ACQUIRE_LOCK   or   UPI_EXTERNAL_VPA_UNSUPPORTED ],  refundResponseMessage   ( string ,   optional ),  metaData   ( string ,   optional )  }  RefundSla   {  minSla   ( long ,   optional ),  maxSla   ( long ,   optional )  }     1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13 Sample Request\n{\n   merchantCredential : {\n     name :  Enter name here ,\n     password :  Enter hash here \n  },\n   merchantTransactionId :  transaction1 ,\n   payzippySaleTrasactionId :  PZT1712211056FQM0400 ,\n   refundAmount : 100,\n   refundReason :  testing ,\n   refundedBy :  Anvay ,\n   merchantRefundTransactionId :  transaction1-refund1 \n}", 
            "title": "Refund"
        }, 
        {
            "location": "/backend/#oms", 
            "text": "OMS stands for  Order Management System . Its the system which handles post order flows and its primary job is to power the  My Orders  screen on the flipkart apps.\nWhen your system knows that an order has got placed or updated, you can call the following API to let Flipkart OMS know about the change.\nThis information will be rendered on the user's  My orders  screen with all the details you provide. We will also use this information for powering our CX agents for better experience.\nFor a better view of OMS, to understand its purpose and to understand the meaning of every field being uploaded refer  this page  too", 
            "title": "OMS"
        }, 
        {
            "location": "/backend/#oms-upsert", 
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58 Path: /2/oms\nMethod: POST\nBody:\nOrder {\norderId (string),\ndescription (string),\nidentityToken (string),\norderTimestamp (long),\norderUpdatedTimestamp(long),\norderUrl (string),\nitems (Array[Item]),\nforwardTransactions (Array[ForwardTransaction], optional),\nreverseTransactions (Array[ReverseTransaction], optional),\nmerchantAdjustments (Array[MerchantAdjustment], optional),\nflipkartAdjustments (Array[FlipkartAdjustment], optional),\ncancellationCharges (Array[CancellationCharges], optional)\n}\nItem {\nitemId (string),\ntitle (string),\nimage (string),\nbasePrice (double),\nfinalPrice (double, optional),\ncategory (string),\nfulfillmentDate (long),\nitemState (string) = [ INIT  or  SUCCESSFUL  or  CANCELLED  or  PENDING ],\nbrand (string),\nproduct (string),\ncustomerName (string),\nquantity (string)\n}\nForwardTransaction {\ntransactionId (string),\namount (double),\ndescription (string),\ntimestamp (long)\n}\nReverseTransaction {\nforwardTransactionId (string),\nreverseTransactionId (string),\namount (double),\ndescription (string),\ntimestamp (long)\n}\nMerchantAdjustment {\nadjustmentId (string),\namount (double),\ntitle (string)\n}\nFlipkartAdjustment {\nadjustmentId (string),\namount (double)\n}\nCancellationCharges {\nitemId (string),\nreason (string),\namount (double)\n}    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76 Sample Request\n{\n   orderId :  DummyOrderId ,\n   description :  This is a dummy description ,\n   identityToken :  someIdentityToken ,\n   orderTimestamp : 1530622713945,\n   orderUpdatedTimestamp : 1530622713945,\n   orderUrl :  someURLToOrderPage ,\n   items : [\n    {\n       itemId :  Product 1 ,\n       title :  This is a product ,\n       image :  image.url ,\n       basePrice : 120,\n       finalPrice : 100,\n       category :  test ,\n       fulfillmentDate : 1530622713946,\n       itemState :  SUCCESSFUL ,\n       brand :  Some brand ,\n       product :  modelNumber ,\n       customerName :  Lorem Ipsum ,\n       quantity : 1\n    },\n    {\n       itemId :  Product 2 ,\n       title :  This is a product ,\n       image :  image.url ,\n       basePrice : 120,\n       finalPrice : 100,\n       category :  test ,\n       fulfillmentDate : 1530622713946,\n       itemState :  SUCCESSFUL ,\n       brand :  Some brand ,\n       product :  modelNumber ,\n       customerName :  Lorem Ipsum 2 ,\n       quantity : 1\n    }\n  ],\n   forwardTransactions : [\n    {\n       transactionId :  transaction1 ,\n       amount : 100,\n       description :  Paid via FKPG ,\n       timestamp : 1530622713956\n    }\n  ],\n   reverseTransactions : [\n    {\n       forwardTransactionId :  transaction1 ,\n       reverseTransactionId :  rev_transaction1 ,\n       amount : 10,\n       description :  Refund for cancellation ,\n       timestamp : 1530622714957\n    }\n  ],\n   merchantAdjustments : [\n    {\n       adjustmentId :  Dummy merchant adjustment id ,\n       title :  This is some title ,\n       amount : 20\n    }\n  ],\n   flipkartAdjustments : [\n    {\n       adjustmentId :  dummyAdjustmentId ,\n       amount : 20\n    }\n  ],\n   cancellationCharges : [\n    {\n       itemId :  Product 1 ,\n       reason :  Cancellation costs are sometimes deducted ,\n       amount : 10\n    }\n  ]\n}", 
            "title": "OMS Upsert"
        }, 
        {
            "location": "/backend/#offers", 
            "text": "Flipkart might have some offers. These Apis let you interact with them.", 
            "title": "Offers"
        }, 
        {
            "location": "/backend/#get-offers-list", 
            "text": "1\n2 Path: /2/offers/active\nMethod: GET", 
            "title": "Get offers list"
        }, 
        {
            "location": "/oms/", 
            "text": "Purpose\n\n\nOMS lite is a view layer maintained by flipkart for orders placed on ultra platform. The OMS lite layer will act as a data source for flipkart\u2019s my order page as well as CX agents.\n\n\nMore information on how to make the API calls to OMS is \nhere\n\n\nThe following diagram should explain the high level purpose of OMS lite.\n\n\n\nMerchant Expectation\n\n\nMerchant is expected to push for every state change in their OMS.\n\n\nSchema\n\n\nOrder\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\nmandatory\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\norderId\n\n\nstring\n\n\nyes\n\n\norderId is expected to be reference to merchant's OMS entry\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nyes\n\n\n\n\n\n\n\n\nidentityToken\n\n\nstring\n\n\nyes\n\n\nThis identifies the user\n\n\n\n\n\n\norderTimestamp\n\n\nlong\n\n\nyes\n\n\nThe time when order was initialised\n\n\n\n\n\n\norderUpdatedTimestamp\n\n\nlong\n\n\nyes\n\n\nThe time when order was last modified\n\n\n\n\n\n\norderUrl\n\n\nstring\n\n\nyes\n\n\nThe url that will take us to this specific order.\n\n\n\n\n\n\nitems\n\n\nList of Item\n\n\nyes\n\n\nList of items which are a part of this order\n\n\n\n\n\n\nforwardTransactions\n\n\nList of ForwardTransaction\n\n\nno\n\n\nThese can be empty only if all items are in init state\n\n\n\n\n\n\nreverseTransactions\n\n\nList of ReverseTransaction\n\n\nno\n\n\nPopulate only if money has been reversed to customer\n\n\n\n\n\n\nmerchantAdjustments\n\n\nList of MerchantAdjustment\n\n\nno\n\n\nAll the discounts that have been offered by merchant. Base price of items - Merchant adjustments is what was passed to PG for payment from customer\n\n\n\n\n\n\nflipkartAdjustments\n\n\nList of FlipkartAdjustment\n\n\nno\n\n\nAfter response from PG, Merchants will know about additional discounts applied by PG. They should be mentioned here\n\n\n\n\n\n\ncancellationCharges\n\n\nList of CancellationCharges\n\n\nno\n\n\nMerchant can levy charges for cancellation, they have to be mentioned here\n\n\n\n\n\n\n\n\nItem\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\nmandatory\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\nitemId\n\n\nstring\n\n\nyes\n\n\nitem identifier. Can be used to take customer to product from order page\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\nyes\n\n\nDescription of item. This will be visible to customer\n\n\n\n\n\n\nimage\n\n\nstring\n\n\nyes\n\n\nItem's image\n\n\n\n\n\n\nbasePrice\n\n\ndouble\n\n\nyes\n\n\nprice of an item before any adjustments were applied\n\n\n\n\n\n\nfinalPrice\n\n\ndouble\n\n\nyes\n\n\nprice of an item after both merchantAdjustments and flipkartAdjustments have been applied. This can be null if state is INIT\n\n\n\n\n\n\ncategory\n\n\nstring\n\n\nyes\n\n\nWhich category does the item belong to. The category will be provided by flipkart. Please do not put your own values here\n\n\n\n\n\n\nfulfillmentDate\n\n\nlong\n\n\nyes\n\n\nDate when the item will be fulfilled(delivery date, travel date, etc)\n\n\n\n\n\n\nitemState\n\n\nenum('INIT' or 'SUCCESSFUL' or 'CANCELLED' or 'PENDING')\n\n\nyes\n\n\nINIT: To be used when customer has not yet paid.\n PENDING: Payment successful however merchant yet to confirm the order.\n SUCCESSFUL: Atleast some part of item is confirmed. Partial cancellation will also be a part of this state. \nCANCELLED: The entire item is cancelled. In this case the entire final price should either reflect in reverse transaction or cancellationCharges\n\n\n\n\n\n\nbrand\n\n\nstring\n\n\nyes\n\n\nProvider/Manufacturer of product\n\n\n\n\n\n\nproduct\n\n\nstring\n\n\nyes\n\n\nDescription of product. For some scenarios can be similar to title (Eg: E-commerce product), so other scenarios can provide specific details like Flight number, Recharge type, etc.\n\n\n\n\n\n\ncustomerName\n\n\nstring\n\n\nyes\n\n\nName of the person for which item is intended\n\n\n\n\n\n\nquantity\n\n\ninteger\n\n\nyes\n\n\nHow many products are clubbed in this order. In case of travel this would be number of passengers. If a business does not have multiple items, they can send 1\n\n\n\n\n\n\n\n\nForwardTransaction\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\nmandatory\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\ntransactionId\n\n\nstring\n\n\nyes\n\n\nThe transactionId shared by PG\n\n\n\n\n\n\namount\n\n\ndouble\n\n\nyes\n\n\nFinal amount deducted from customer\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nyes\n\n\n\n\n\n\n\n\ntimestamp\n\n\nlong\n\n\nyes\n\n\nTime of transaction\n\n\n\n\n\n\n\n\nReverseTransaction\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\nmandatory\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\nforwardTransactionId\n\n\nstring\n\n\nyes\n\n\nThe forward transaction used to take money from customer\n\n\n\n\n\n\nreverseTransactionId\n\n\nstring\n\n\nyes\n\n\n\n\n\n\n\n\namount\n\n\nlong\n\n\nyes\n\n\namount to be refunded\n\n\n\n\n\n\ndescription\n\n\nstring\n\n\nyes\n\n\n\n\n\n\n\n\ntimestamp\n\n\nlong\n\n\nyes\n\n\nTime of transaction\n\n\n\n\n\n\n\n\nMerchantAdjustment\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\nmandatory\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\nadjustmentId\n\n\nstring\n\n\nyes\n\n\nIdentifier for the adjustment on merchant side\n\n\n\n\n\n\namount\n\n\ndouble\n\n\nyes\n\n\nAdjustment amount\n\n\n\n\n\n\ntitle\n\n\nstring\n\n\nyes\n\n\nAdjustment Description. This could be visible to customer\n\n\n\n\n\n\n\n\nFlipkartAdjustment\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\nmandatory\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\nadjustmentId\n\n\nstring\n\n\nyes\n\n\nIdentifier for the adjustment on provided by flipkart in PG response\n\n\n\n\n\n\namount\n\n\ndouble\n\n\nyes\n\n\nAdjustment amount\n\n\n\n\n\n\n\n\nCancellationCharges\n\n\n\n\n\n\n\n\nname\n\n\ntype\n\n\nmandatory\n\n\nnotes\n\n\n\n\n\n\n\n\n\n\nitemId\n\n\nstring\n\n\nyes\n\n\nThis item should be present in Items\n\n\n\n\n\n\nreason\n\n\nstring\n\n\nyes\n\n\nThis will be visible to customer\n\n\n\n\n\n\namount\n\n\ndouble\n\n\nyes\n\n\nCancellation amount", 
            "title": "OMS"
        }, 
        {
            "location": "/oms/#purpose", 
            "text": "OMS lite is a view layer maintained by flipkart for orders placed on ultra platform. The OMS lite layer will act as a data source for flipkart\u2019s my order page as well as CX agents.  More information on how to make the API calls to OMS is  here  The following diagram should explain the high level purpose of OMS lite.", 
            "title": "Purpose"
        }, 
        {
            "location": "/oms/#merchant-expectation", 
            "text": "Merchant is expected to push for every state change in their OMS.", 
            "title": "Merchant Expectation"
        }, 
        {
            "location": "/oms/#schema", 
            "text": "", 
            "title": "Schema"
        }, 
        {
            "location": "/oms/#order", 
            "text": "name  type  mandatory  notes      orderId  string  yes  orderId is expected to be reference to merchant's OMS entry    description  string  yes     identityToken  string  yes  This identifies the user    orderTimestamp  long  yes  The time when order was initialised    orderUpdatedTimestamp  long  yes  The time when order was last modified    orderUrl  string  yes  The url that will take us to this specific order.    items  List of Item  yes  List of items which are a part of this order    forwardTransactions  List of ForwardTransaction  no  These can be empty only if all items are in init state    reverseTransactions  List of ReverseTransaction  no  Populate only if money has been reversed to customer    merchantAdjustments  List of MerchantAdjustment  no  All the discounts that have been offered by merchant. Base price of items - Merchant adjustments is what was passed to PG for payment from customer    flipkartAdjustments  List of FlipkartAdjustment  no  After response from PG, Merchants will know about additional discounts applied by PG. They should be mentioned here    cancellationCharges  List of CancellationCharges  no  Merchant can levy charges for cancellation, they have to be mentioned here", 
            "title": "Order"
        }, 
        {
            "location": "/oms/#item", 
            "text": "name  type  mandatory  notes      itemId  string  yes  item identifier. Can be used to take customer to product from order page    title  string  yes  Description of item. This will be visible to customer    image  string  yes  Item's image    basePrice  double  yes  price of an item before any adjustments were applied    finalPrice  double  yes  price of an item after both merchantAdjustments and flipkartAdjustments have been applied. This can be null if state is INIT    category  string  yes  Which category does the item belong to. The category will be provided by flipkart. Please do not put your own values here    fulfillmentDate  long  yes  Date when the item will be fulfilled(delivery date, travel date, etc)    itemState  enum('INIT' or 'SUCCESSFUL' or 'CANCELLED' or 'PENDING')  yes  INIT: To be used when customer has not yet paid.  PENDING: Payment successful however merchant yet to confirm the order.  SUCCESSFUL: Atleast some part of item is confirmed. Partial cancellation will also be a part of this state.  CANCELLED: The entire item is cancelled. In this case the entire final price should either reflect in reverse transaction or cancellationCharges    brand  string  yes  Provider/Manufacturer of product    product  string  yes  Description of product. For some scenarios can be similar to title (Eg: E-commerce product), so other scenarios can provide specific details like Flight number, Recharge type, etc.    customerName  string  yes  Name of the person for which item is intended    quantity  integer  yes  How many products are clubbed in this order. In case of travel this would be number of passengers. If a business does not have multiple items, they can send 1", 
            "title": "Item"
        }, 
        {
            "location": "/oms/#forwardtransaction", 
            "text": "name  type  mandatory  notes      transactionId  string  yes  The transactionId shared by PG    amount  double  yes  Final amount deducted from customer    description  string  yes     timestamp  long  yes  Time of transaction", 
            "title": "ForwardTransaction"
        }, 
        {
            "location": "/oms/#reversetransaction", 
            "text": "name  type  mandatory  notes      forwardTransactionId  string  yes  The forward transaction used to take money from customer    reverseTransactionId  string  yes     amount  long  yes  amount to be refunded    description  string  yes     timestamp  long  yes  Time of transaction", 
            "title": "ReverseTransaction"
        }, 
        {
            "location": "/oms/#merchantadjustment", 
            "text": "name  type  mandatory  notes      adjustmentId  string  yes  Identifier for the adjustment on merchant side    amount  double  yes  Adjustment amount    title  string  yes  Adjustment Description. This could be visible to customer", 
            "title": "MerchantAdjustment"
        }, 
        {
            "location": "/oms/#flipkartadjustment", 
            "text": "name  type  mandatory  notes      adjustmentId  string  yes  Identifier for the adjustment on provided by flipkart in PG response    amount  double  yes  Adjustment amount", 
            "title": "FlipkartAdjustment"
        }, 
        {
            "location": "/oms/#cancellationcharges", 
            "text": "name  type  mandatory  notes      itemId  string  yes  This item should be present in Items    reason  string  yes  This will be visible to customer    amount  double  yes  Cancellation amount", 
            "title": "CancellationCharges"
        }, 
        {
            "location": "/demo/", 
            "text": "Ultra playground\n\n\nTo play around with the API's first install Flipkart Android app and then clicking on \nthis link\n on your android phone will open Ultra playground within flipkart app.\nThis process will open \nthis page\n within Ultra container where you can play around the javascript APIs exposed to Ultra. Note that the page won't function properly outside of Ultra container.\n\n\nTo see the code running behind the hood, open the \nplayground app\n on your browser and use Chrome inspect to see the code.\n\n\nDemo Video", 
            "title": "Demo"
        }, 
        {
            "location": "/demo/#ultra-playground", 
            "text": "To play around with the API's first install Flipkart Android app and then clicking on  this link  on your android phone will open Ultra playground within flipkart app.\nThis process will open  this page  within Ultra container where you can play around the javascript APIs exposed to Ultra. Note that the page won't function properly outside of Ultra container.  To see the code running behind the hood, open the  playground app  on your browser and use Chrome inspect to see the code.", 
            "title": "Ultra playground"
        }, 
        {
            "location": "/demo/#demo-video", 
            "text": "", 
            "title": "Demo Video"
        }, 
        {
            "location": "/contact/", 
            "text": "Contact us\n\n\nMail us at \nultra-oncall@flipkart.com", 
            "title": "Contact Us"
        }, 
        {
            "location": "/contact/#contact-us", 
            "text": "Mail us at  ultra-oncall@flipkart.com", 
            "title": "Contact us"
        }, 
        {
            "location": "/announcement/", 
            "text": "New JS SDK Methods\n\n\n20/Aug/2018\n\n\nNew JS SDK methods added in v1.0.0. Only available in v6.7 of FK app.\n\n\n\n\nNavigate to Flipkart\n: To navigate to any flipkart native page\n\n\nNotify page location change\n: To notify that your page location has changed (React native only)\n\n\n\n\nNew v2 Server Side APIs\n\n\n09/Aug/2018\n\n\nWe have updated APIs for following\n\n\n\n\nNew way for generating \nsecureToken\n. Earlier we used to just take company name as clientId. From now on \nclientId = \ncompanyName\n.\nappId\n\n\nV2 for get active offers. \nActive offers\n\n\nV2 for payment APIs\n\n\nPaymentToken\n.  Added category in request.\n\n\nQuery\n. Linked to new secureToken.\n\n\nRefund\n. Linked to new secureToken.\n\n\n\n\n\n\nDo not forget to update your clientId in post payment \nfapp:// redirect\n too. \n\n\n\n\nOMS contracts updated\n\n\n12/July/2018\n\n\nAfter feedback from merchants we have decided to change the following in our v2 OMS contracts.\n\n\n\n\nAddition of orderUrl in \nOrder\n.\n\n\nAddition of brand, product, customerName, quantity in \nItem\n.\n\n\n\n\n\n\nRoot Cause Analysis of Order failures on MMT (07/07/2018)\n\n\nSummary\n\n\nFrom approximately 2pm to 9pm on 7 July even if users made the payment for ticket, order was not getting confirmed. There was 100% failure and no successful order were placed in this time.\n\n\nEvent Description\n\n\nUltra's offers were configured using a json config file. There was a planned activity going on to move offers from this file to a database fronted with UI, so that the offers can be edited by business and be exposed to merchants using Offer API. The changes were coded and merged tested on local and then deployed on master. To ensure that double offer is not applied, Offer DB was populated to be a copy of config that was live. Post this console was expected to go live and exposed to business. However due to various reasons, the console go live was delayed. Because of which the transition period where both Offer database and Offer Config we appending offers was extended over weekend. All of this was done on 4th July. There was no impact on production because both config and database were appending the same offers.\n\n\nOn 7th July at 2pm the config was changed to have new offers. Because of this FKPG got 2 offers: one from db (the old one) and another from config(the new one). Because of this MMT was getting 2 offers in response. As a result of which they were not confirming the orders on their side. This was corrected at 9 pm when Offers DB was disabled.\n\n\nChronology of Events/Timeline\n\n\n\n\n4 July :\n\n\nOffer DB deployed to prod with offers in sync with Offers Config.\n\n\n\n\n\n\n5 July :\n\n\nOffer Console was not deployed due to tech issues. \nOffers DB was not disabled.\n\n\nOffers on both sources are in sync, hence production is stable.\n\n\n\n\n\n\n7 July :\n\n\n2:00 pm: Offers changed in config. Leading to double offers. MMT does not support multiple offers applied in a single transaction , it right fully stopped processing orders for these payment transaction.\n\n\n5:30 pm: MMT informs Flipkart that none of the orders are getting confirmed.\n\n\n8:37 pm: Tech team was notified about the issue.\n\n\n9:00 pm: After investigation Flipkart tech realises that the issue is with offer DB being out of sync. Offer DB was disabled. Production was stabilised.\n\n\n\n\n\n\n\n\nFindings\n\n\nQ\n Why was transition period long.\n\n\nA\n The console deployment had some issues. Because of which switchover was blocked.\n\n\nQ\n How could the transition period have been shortened.\n\n\nA\n Rather than keeping the config in sync, we should have disabled offer DB, till console was not deployed.\n\n\nQ\n Why did it take 3 hours + for flipkart to debug.\n\n\nA\n There is no on-call email alias published for Ultra. By the time it came through to the engineering team 3 hours had elapsed.\n\n\nCorrective Action\n\n\n\n\nWe are setting up an on call alias for ultra, which should be used by all merchants for any production issue. Every stakeholder of ultra will be a part of this on call so that all issues are broadcasted immediately.\n\n\nDefine a play book for configuring offers and publish it. This playbook will include standard operating procedures around monitoring the health after an offer has been deployed\n\n\nHave a weekly deployment cycles on Thursday of every week, allowing for one business day to notice and fix any issues. Hot fixes can still be done on Friday/Weekends with an on call support.\n\n\nChanges in ultra will be broadcasted beforehand internally for other's FYI.\n\n\n\n\nOpen Tickets\n\n\n\n\nUltra-33\n : Create an alias for ultra-oncall\n\n\nUltra-34\n : Create a playbook for configuring offers\n\n\n\n\n\n\nRoot Cause Analysis of Ultra Outage (24/06/2018-25/06/2018)\n\n\nSummary\n\n\nUltra api\u2019s were throwing internal server error from 24th Jul 2018 (2:20 am) to 25th Jul 2018(10:40am). Preventing new user\u2019s to come onboard ultra platform as well as transacting.\n\n\nEvent Description\n\n\nOn 24th Jun 2018 at about 2:20am an ultra API deployment was done to patch a bug for feature being developed right now. The patch was small and only for on of internal APIs. However along with above mentioned patch, rate limiting which was merged to master was also deployed. Since the config for rate limiting was only set for our test app, after deployment MMT and Phonepe api\u2019s were throttled to 0.\nThe issue was observed on 25th 10:19am after MMT notified that APIs are not working correctly. The issue was patched by adding proper config in config service and the issue was rectified by 10:40 am.\n\n\nChronology of Events/Timeline\n\n\n\n\n11th Jun 2018: Rate limiting implemented and tested for playground app. Merged to master.\n\n\n22th Jun 2018\n\n\n5:00pm : Patched a bug for an internal API, merged to master after code review and testing.\n\n\n5:10pm : Deployment failed due to bug in deployment service. Raised a ticket and informed\ninternal team that deployment will be done asap.\n\n\n\n\n\n\n24th Jun 2018\n\n\n1:00 am: Verified that deployment service bug is fixed and started deployment to preprod.\n\n\n2:00 am: Verified the internal API on preprod and propagated the changes to prod.\n\n\n2:20 am: Prod deployment completed.\n\n\n\n\n\n\n25th Jun 2018\n\n\n12:25 am: MMT notified on slack that the API is not working.\n\n\n10:21 am: Ultra team noticed the bug and started debugging. * 10:40 am: Correct config updated for both Phonepe and MMT.\n\n\n\n\n\n\n\n\nFindings and Root Cause\n\n\nQ\n Why did the APIs fail?\n\n\nA\n The APIs failed because rate limiting was deployed without correct config.\n\n\nQ\n Why was Config not present for rate limiting?\n\n\nA\n We consider this as a miss during the code review and testing process. Config should have been propagated for all merchant\u2019s before the code was merged to master.\n\n\nQ\n Why was the issue not detected earlier?\n\n\nA\n There was a dip in QPS numbers. And Alerts were not triggered.\n\n\nQ\n Are the alerts working?\n\n\nA\n While figuring out this issue we have figured out that our alerting are not working and will be fixed asap.\n\n\nCorrective Action\n\n\nWe will take the following corrective actions.\n\n Fix and test alerting.\n\n Ensure that deployments don\u2019t happen over weekend.\n\n Post every deployment test all API\u2019s thoroughly.\n\n Have regular deployments so that testing the delta is manageable.\n* Solve open tickets.\n\n\nOpen Tickets\n\n\nUltra-5\n : Figure out how to add alerts on QPS and HTTP response codes. (\nResolved\n)\n\n\nUltra-4\n : Investigate why error log growth did not cause an alert. (\nResolved\n)", 
            "title": "Announcements"
        }, 
        {
            "location": "/announcement/#new-js-sdk-methods", 
            "text": "20/Aug/2018  New JS SDK methods added in v1.0.0. Only available in v6.7 of FK app.   Navigate to Flipkart : To navigate to any flipkart native page  Notify page location change : To notify that your page location has changed (React native only)", 
            "title": "New JS SDK Methods"
        }, 
        {
            "location": "/announcement/#new-v2-server-side-apis", 
            "text": "09/Aug/2018  We have updated APIs for following   New way for generating  secureToken . Earlier we used to just take company name as clientId. From now on  clientId =  companyName . appId  V2 for get active offers.  Active offers  V2 for payment APIs  PaymentToken .  Added category in request.  Query . Linked to new secureToken.  Refund . Linked to new secureToken.    Do not forget to update your clientId in post payment  fapp:// redirect  too.", 
            "title": "New v2 Server Side APIs"
        }, 
        {
            "location": "/announcement/#oms-contracts-updated", 
            "text": "12/July/2018  After feedback from merchants we have decided to change the following in our v2 OMS contracts.   Addition of orderUrl in  Order .  Addition of brand, product, customerName, quantity in  Item .", 
            "title": "OMS contracts updated"
        }, 
        {
            "location": "/announcement/#root-cause-analysis-of-order-failures-on-mmt-07072018", 
            "text": "", 
            "title": "Root Cause Analysis of Order failures on MMT (07/07/2018)"
        }, 
        {
            "location": "/announcement/#summary", 
            "text": "From approximately 2pm to 9pm on 7 July even if users made the payment for ticket, order was not getting confirmed. There was 100% failure and no successful order were placed in this time.", 
            "title": "Summary"
        }, 
        {
            "location": "/announcement/#event-description", 
            "text": "Ultra's offers were configured using a json config file. There was a planned activity going on to move offers from this file to a database fronted with UI, so that the offers can be edited by business and be exposed to merchants using Offer API. The changes were coded and merged tested on local and then deployed on master. To ensure that double offer is not applied, Offer DB was populated to be a copy of config that was live. Post this console was expected to go live and exposed to business. However due to various reasons, the console go live was delayed. Because of which the transition period where both Offer database and Offer Config we appending offers was extended over weekend. All of this was done on 4th July. There was no impact on production because both config and database were appending the same offers.  On 7th July at 2pm the config was changed to have new offers. Because of this FKPG got 2 offers: one from db (the old one) and another from config(the new one). Because of this MMT was getting 2 offers in response. As a result of which they were not confirming the orders on their side. This was corrected at 9 pm when Offers DB was disabled.", 
            "title": "Event Description"
        }, 
        {
            "location": "/announcement/#chronology-of-eventstimeline", 
            "text": "4 July :  Offer DB deployed to prod with offers in sync with Offers Config.    5 July :  Offer Console was not deployed due to tech issues.  Offers DB was not disabled.  Offers on both sources are in sync, hence production is stable.    7 July :  2:00 pm: Offers changed in config. Leading to double offers. MMT does not support multiple offers applied in a single transaction , it right fully stopped processing orders for these payment transaction.  5:30 pm: MMT informs Flipkart that none of the orders are getting confirmed.  8:37 pm: Tech team was notified about the issue.  9:00 pm: After investigation Flipkart tech realises that the issue is with offer DB being out of sync. Offer DB was disabled. Production was stabilised.", 
            "title": "Chronology of Events/Timeline"
        }, 
        {
            "location": "/announcement/#findings", 
            "text": "Q  Why was transition period long.  A  The console deployment had some issues. Because of which switchover was blocked.  Q  How could the transition period have been shortened.  A  Rather than keeping the config in sync, we should have disabled offer DB, till console was not deployed.  Q  Why did it take 3 hours + for flipkart to debug.  A  There is no on-call email alias published for Ultra. By the time it came through to the engineering team 3 hours had elapsed.", 
            "title": "Findings"
        }, 
        {
            "location": "/announcement/#corrective-action", 
            "text": "We are setting up an on call alias for ultra, which should be used by all merchants for any production issue. Every stakeholder of ultra will be a part of this on call so that all issues are broadcasted immediately.  Define a play book for configuring offers and publish it. This playbook will include standard operating procedures around monitoring the health after an offer has been deployed  Have a weekly deployment cycles on Thursday of every week, allowing for one business day to notice and fix any issues. Hot fixes can still be done on Friday/Weekends with an on call support.  Changes in ultra will be broadcasted beforehand internally for other's FYI.", 
            "title": "Corrective Action"
        }, 
        {
            "location": "/announcement/#open-tickets", 
            "text": "Ultra-33  : Create an alias for ultra-oncall  Ultra-34  : Create a playbook for configuring offers", 
            "title": "Open Tickets"
        }, 
        {
            "location": "/announcement/#root-cause-analysis-of-ultra-outage-24062018-25062018", 
            "text": "", 
            "title": "Root Cause Analysis of Ultra Outage (24/06/2018-25/06/2018)"
        }, 
        {
            "location": "/announcement/#summary_1", 
            "text": "Ultra api\u2019s were throwing internal server error from 24th Jul 2018 (2:20 am) to 25th Jul 2018(10:40am). Preventing new user\u2019s to come onboard ultra platform as well as transacting.", 
            "title": "Summary"
        }, 
        {
            "location": "/announcement/#event-description_1", 
            "text": "On 24th Jun 2018 at about 2:20am an ultra API deployment was done to patch a bug for feature being developed right now. The patch was small and only for on of internal APIs. However along with above mentioned patch, rate limiting which was merged to master was also deployed. Since the config for rate limiting was only set for our test app, after deployment MMT and Phonepe api\u2019s were throttled to 0.\nThe issue was observed on 25th 10:19am after MMT notified that APIs are not working correctly. The issue was patched by adding proper config in config service and the issue was rectified by 10:40 am.", 
            "title": "Event Description"
        }, 
        {
            "location": "/announcement/#chronology-of-eventstimeline_1", 
            "text": "11th Jun 2018: Rate limiting implemented and tested for playground app. Merged to master.  22th Jun 2018  5:00pm : Patched a bug for an internal API, merged to master after code review and testing.  5:10pm : Deployment failed due to bug in deployment service. Raised a ticket and informed\ninternal team that deployment will be done asap.    24th Jun 2018  1:00 am: Verified that deployment service bug is fixed and started deployment to preprod.  2:00 am: Verified the internal API on preprod and propagated the changes to prod.  2:20 am: Prod deployment completed.    25th Jun 2018  12:25 am: MMT notified on slack that the API is not working.  10:21 am: Ultra team noticed the bug and started debugging. * 10:40 am: Correct config updated for both Phonepe and MMT.", 
            "title": "Chronology of Events/Timeline"
        }, 
        {
            "location": "/announcement/#findings-and-root-cause", 
            "text": "Q  Why did the APIs fail?  A  The APIs failed because rate limiting was deployed without correct config.  Q  Why was Config not present for rate limiting?  A  We consider this as a miss during the code review and testing process. Config should have been propagated for all merchant\u2019s before the code was merged to master.  Q  Why was the issue not detected earlier?  A  There was a dip in QPS numbers. And Alerts were not triggered.  Q  Are the alerts working?  A  While figuring out this issue we have figured out that our alerting are not working and will be fixed asap.", 
            "title": "Findings and Root Cause"
        }, 
        {
            "location": "/announcement/#corrective-action_1", 
            "text": "We will take the following corrective actions.  Fix and test alerting.  Ensure that deployments don\u2019t happen over weekend.  Post every deployment test all API\u2019s thoroughly.  Have regular deployments so that testing the delta is manageable.\n* Solve open tickets.", 
            "title": "Corrective Action"
        }, 
        {
            "location": "/announcement/#open-tickets_1", 
            "text": "Ultra-5  : Figure out how to add alerts on QPS and HTTP response codes. ( Resolved )  Ultra-4  : Investigate why error log growth did not cause an alert. ( Resolved )", 
            "title": "Open Tickets"
        }
    ]
}