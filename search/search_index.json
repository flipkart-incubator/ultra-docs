{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Ultra\n\n\nWe are pleased to announce the launch of version 1 of Ultra Platform on Android App. With this launch, we take a leap forward towards a vision of becoming a single shopping destination for all customer needs. This effort also brings us to a place where we can enable faster learnings for us on not-so-known shopping categories like Travel \n Food, as well as non-shopping categories like Video and Music. It\u2019s an idea which is designed to pave new ways for users to interact with any 3rd party App within Flipkart App securely and with trust. Hence, Ultra and its meaning ( Revolution) has become synonymous and is consecrated by usage.\n\n\nWhat is Ultra?\n\n\nUltra is a project name for all the efforts required to \nonboard\n other services ( like Travel tickets, Bill payments, etc) through \npartners\n like MakeMyTrip, PhonePe, etc on Flipkart Android App, keeping following ethos in mind with utmost sincerity. \n\n\n\n\n\n\nSwift onboarding\n\n\n\n\n\n\nData Security\n\n\n\n\n\n\nUser Privacy\n\n\n\n\n\n\nPayment Security\n\n\n\n\n\n\nUser Experience\n\n\n\n\n\n\nCustomer Experience\n\n\n\n\n\n\nDeveloper Experience\n\n\n\n\n\n\nApp Performance\n\n\n\n\n\n\nAffordability\n\n\n\n\n\n\nWhat is launched in Ultra V1?\n\n\nIn Ultra V1, we have setup a minimal viable process required to onboard a partner keeping above ethos in check. We also took some strategic product decisions which has shaped Ultra as a service offering to partners, like following\n\n\n\n\n\n\nUser experience over purchase funnel will be built and owned by the partner.\n\n\n\n\n\n\nDiscovery of Applications will be controlled by Flipkart.\n\n\n\n\n\n\nOnly Logged in Users can access partner applications.\n\n\n\n\n\n\nPayments is powered by Flipkart Payment Gateway(FKPG).\n\n\n\n\n\n\nFlipkart can run offers on partners purchase funnel.\n\n\n\n\n\n\nFulfillment and post purchase experience will also be built and owned by the partner.\n\n\n\n\n\n\nAll customer support related queries will be answered by the partner\n\n\n\n\n\n\nMoney will reach partner\u2019s nodal account directly.\n\n\n\n\n\n\nYou can read step by step approach to onboard a partner in the Onboarding section\n\n\nWhat is in for Partners/Businesses?\n\n\nPartners can integrate their Apps to Flipkart\u2019s Android App using developer\u2019s friendly API\u2019s and use the benefit of being on more than 100 million handhelds in the country. \n\n\nWhat is in for Developers?\n\n\nUltra plans to become one of the most dominant channel that no business or, developer can afford to miss. Ultra platform is one of its kind which supports a wide variety of technologies from the most basic web apps to very advanced experiences powered by React Native. This provides ample room to grow and develop unique skills while keeping entry barrier low so that no one is overwhelmed. In near future we would want Ultra to be a prestigious developer platform enabling cutting edge experiences. Being great on Ultra should be synonymous with being a great developer.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-ultra", 
            "text": "We are pleased to announce the launch of version 1 of Ultra Platform on Android App. With this launch, we take a leap forward towards a vision of becoming a single shopping destination for all customer needs. This effort also brings us to a place where we can enable faster learnings for us on not-so-known shopping categories like Travel   Food, as well as non-shopping categories like Video and Music. It\u2019s an idea which is designed to pave new ways for users to interact with any 3rd party App within Flipkart App securely and with trust. Hence, Ultra and its meaning ( Revolution) has become synonymous and is consecrated by usage.", 
            "title": "Welcome to Ultra"
        }, 
        {
            "location": "/#what-is-ultra", 
            "text": "Ultra is a project name for all the efforts required to  onboard  other services ( like Travel tickets, Bill payments, etc) through  partners  like MakeMyTrip, PhonePe, etc on Flipkart Android App, keeping following ethos in mind with utmost sincerity.     Swift onboarding    Data Security    User Privacy    Payment Security    User Experience    Customer Experience    Developer Experience    App Performance    Affordability    What is launched in Ultra V1?  In Ultra V1, we have setup a minimal viable process required to onboard a partner keeping above ethos in check. We also took some strategic product decisions which has shaped Ultra as a service offering to partners, like following    User experience over purchase funnel will be built and owned by the partner.    Discovery of Applications will be controlled by Flipkart.    Only Logged in Users can access partner applications.    Payments is powered by Flipkart Payment Gateway(FKPG).    Flipkart can run offers on partners purchase funnel.    Fulfillment and post purchase experience will also be built and owned by the partner.    All customer support related queries will be answered by the partner    Money will reach partner\u2019s nodal account directly.    You can read step by step approach to onboard a partner in the Onboarding section  What is in for Partners/Businesses?  Partners can integrate their Apps to Flipkart\u2019s Android App using developer\u2019s friendly API\u2019s and use the benefit of being on more than 100 million handhelds in the country.   What is in for Developers?  Ultra plans to become one of the most dominant channel that no business or, developer can afford to miss. Ultra platform is one of its kind which supports a wide variety of technologies from the most basic web apps to very advanced experiences powered by React Native. This provides ample room to grow and develop unique skills while keeping entry barrier low so that no one is overwhelmed. In near future we would want Ultra to be a prestigious developer platform enabling cutting edge experiences. Being great on Ultra should be synonymous with being a great developer.", 
            "title": "What is Ultra?"
        }, 
        {
            "location": "/onboarding/", 
            "text": "Onboarding process\n\n\nToday integration with a new partner requires us to take following steps.\n* Closure on \nLegal Contracts\n and \nBusiness Agreement\n with partners.\n\n\n\n\n\n\nInformation security\n review and privacy policy Agreement.\n\n\n\n\n\n\nAPI Integration\n with\n\n\n\n\n\n\nLogin\n as a service which\n\n\n\n\n\n\nIntegrates partners user service with oAuth2.0 built by Flipkart Authn Service.\n\n\n\n\n\n\nCreates and Provides IdentityToken so that merchants have accountId equivalent, but yet user\u2019s flipkart flow is not compromised.\n\n\n\n\n\n\nPrompts user for data sharing permissions when partner requests user\u2019s data like email/phone number.\n\n\n\n\n\n\nSolicits missing data when a new use case arises at partners and in return enriches Flipkart data.\n\n\n\n\n\n\nPrompts email verification/phone verification flows within native app so that merchants don\u2019t have to do verification on their end.\n\n\n\n\n\n\n\n\n\n\nPayment\n as a service which\n\n\n\n\n\n\nLets partner configure their nodal account and MIDS to power payments completion via flipkart payment gateway.\n\n\n\n\n\n\nLets partner decide the allowed payment options for a user.\n\n\n\n\n\n\nLets partner Run payment bank offers.\n\n\n\n\n\n\nLets partner configure expiry timer, convenience/ other fees.\n\n\n\n\n\n\nLets partner take the benefits of Fintech constructs like EMI, BNPL etc in future.\n\n\n\n\n\n\nLets partner share order and payment details like payment status.\n\n\n\n\n\n\nLets partner issue refunds and cancellations.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProcess Agreement and Semi automated integration with\n\n\n\n\n\n\nCustomer experience\n\n\n\n\n\n\nwhich solves for Visibility of orders on My Orders\n\n\n\n\n\n\nwhich solves for Discovery of help in Help Centre\n\n\n\n\n\n\nwhich solves for Communication on inbound and outbound calls\n\n\n\n\n\n\n\n\n\n\nAccounting\n\n\n\n\nWhich solves for reconciliation, Taxes, etc\n\n\n\n\n\n\n\n\nReporting\n\n\n\n\nWhich solves for visibility of business metrics periodically at both ends.", 
            "title": "Onboarding"
        }, 
        {
            "location": "/onboarding/#onboarding-process", 
            "text": "Today integration with a new partner requires us to take following steps.\n* Closure on  Legal Contracts  and  Business Agreement  with partners.    Information security  review and privacy policy Agreement.    API Integration  with    Login  as a service which    Integrates partners user service with oAuth2.0 built by Flipkart Authn Service.    Creates and Provides IdentityToken so that merchants have accountId equivalent, but yet user\u2019s flipkart flow is not compromised.    Prompts user for data sharing permissions when partner requests user\u2019s data like email/phone number.    Solicits missing data when a new use case arises at partners and in return enriches Flipkart data.    Prompts email verification/phone verification flows within native app so that merchants don\u2019t have to do verification on their end.      Payment  as a service which    Lets partner configure their nodal account and MIDS to power payments completion via flipkart payment gateway.    Lets partner decide the allowed payment options for a user.    Lets partner Run payment bank offers.    Lets partner configure expiry timer, convenience/ other fees.    Lets partner take the benefits of Fintech constructs like EMI, BNPL etc in future.    Lets partner share order and payment details like payment status.    Lets partner issue refunds and cancellations.        Process Agreement and Semi automated integration with    Customer experience    which solves for Visibility of orders on My Orders    which solves for Discovery of help in Help Centre    which solves for Communication on inbound and outbound calls      Accounting   Which solves for reconciliation, Taxes, etc     Reporting   Which solves for visibility of business metrics periodically at both ends.", 
            "title": "Onboarding process"
        }, 
        {
            "location": "/userguide/", 
            "text": "Integration steps on Client Side\n\n\nStep 1\n\n\nPaste this within your HTML's head tag.\n\n\nscript\n \nsrc\n=\nhttps://img1a.flixcart.com/linchpin-web/fk-platform-sdk/fkext-browser-min@0.0.8.js\n \ntype\n=\ntext/javascript\n/script\n\n\n\n\n\n\nStep 2\n\n\nInitialized the SDK with your clientId. Contact flipkart to generate a clientId and secret.\n\n\nscript\n \ntype\n=\ntext/javascript\n\n\nvar\n \nclientId\n \n=\n \nplayground\n;\n\n\nvar\n \nfkPlatform\n \n=\n \nFKExtension\n.\nnewPlatformInstance\n(\nclientId\n);\n\n\n/script\n\n\n\n\n\n\nStep 3\n\n\nCall getToken to get a grant token\n\n\nvar\n \nscopeReq\n \n=\n \n[{\nscope\n:\nuser.email\n,\nisMandatory\n:\ntrue\n,\nshouldVerify\n:\nfalse\n},{\nscope\n:\nuser.mobile\n,\nisMandatory\n:\nfalse\n,\nshouldVerify\n:\nfalse\n},{\nscope\n:\nuser.name\n,\nisMandatory\n:\nfalse\n,\nshouldVerify\n:\nfalse\n}];\n\n\nfkPlatform\n.\ngetModuleHelper\n().\ngetPermissionsModule\n().\ngetToken\n(\nscopeReq\n).\nthen\n(\n\n\nfunction\n \n(\ne\n)\n \n{\n\n    \nconsole\n.\nlog\n(\nYour grant token is: \n \n+\n \ne\n.\ngrantToken\n);\n\n\n}).\ncatch\n(\n\n\nfunction\n \n(\ne\n)\n \n{\n\n    \nconsole\n.\nlog\n(\ne\n.\nmessage\n);\n\n\n}\n\n\n\n\n\n\nStep 4\n\n\nSend the token to you server using a AJAX call or any other mechanism. This token can be used by the server to get an access token. This access token can be use to fetch the users identity token as well as other resources like name, email address and verified mobile number on the server side. Refer the server side guide for details. Note : Always get user data on server side and not on the client side to avoid security risks like MITM attacks.", 
            "title": "User guide"
        }, 
        {
            "location": "/userguide/#integration-steps-on-client-side", 
            "text": "", 
            "title": "Integration steps on Client Side"
        }, 
        {
            "location": "/userguide/#step-1", 
            "text": "Paste this within your HTML's head tag.  script   src = https://img1a.flixcart.com/linchpin-web/fk-platform-sdk/fkext-browser-min@0.0.8.js   type = text/javascript /script", 
            "title": "Step 1"
        }, 
        {
            "location": "/userguide/#step-2", 
            "text": "Initialized the SDK with your clientId. Contact flipkart to generate a clientId and secret.  script   type = text/javascript  var   clientId   =   playground ;  var   fkPlatform   =   FKExtension . newPlatformInstance ( clientId );  /script", 
            "title": "Step 2"
        }, 
        {
            "location": "/userguide/#step-3", 
            "text": "Call getToken to get a grant token  var   scopeReq   =   [{ scope : user.email , isMandatory : true , shouldVerify : false },{ scope : user.mobile , isMandatory : false , shouldVerify : false },{ scope : user.name , isMandatory : false , shouldVerify : false }];  fkPlatform . getModuleHelper (). getPermissionsModule (). getToken ( scopeReq ). then (  function   ( e )   { \n     console . log ( Your grant token is:    +   e . grantToken );  }). catch (  function   ( e )   { \n     console . log ( e . message );  }", 
            "title": "Step 3"
        }, 
        {
            "location": "/userguide/#step-4", 
            "text": "Send the token to you server using a AJAX call or any other mechanism. This token can be used by the server to get an access token. This access token can be use to fetch the users identity token as well as other resources like name, email address and verified mobile number on the server side. Refer the server side guide for details. Note : Always get user data on server side and not on the client side to avoid security risks like MITM attacks.", 
            "title": "Step 4"
        }, 
        {
            "location": "/clients/", 
            "text": "Ultra Client Side SDK\n\n\nOverview\n\n\nThis SDK enables developers to build applications that run inside Flipkart app.\n\n\nAll the methods mentioned here will work with both React Native and Webview. \nAll the methods are asynchronous in nature and will always return a promise that gets resolved with the values. Fire and forget calls are an exception where you may not care about the response.\n\n\nNote: Not open to all, access enabled only for partners.\n\n\nGetting Started\n\n\nIntegration steps:\n\n\nStep 1)\n\n\nIf using node, add this repository as an npm package\n\n\nnpm install --save fk-platform-sdk\n\n\n\n\n\nAlternatively, you can also include the following script directly:\n\n\nhttp://img1a.flixcart.com/linchpin-web/fk-platform-sdk/fkext-browser-min@0.1.5.js (Version 0.1.5)\n\n\nStep 2)\n\n\nImport SDK and create a new platform instance. You will need to provide clientId given to you by Flipkart.\n\n\nIn Node Environment:\n\n\nimport\n \nFKPlatform\n \nfrom\n \nfk-platform-sdk\n\n\nlet\n \nfkPlatform\n \n=\n \nnew\n \nFKPlatform\n(\nclientId\n);\n\n\n\n\n\n\nIn Browser:\n\n\nvar\n \nfkPlatform\n \n=\n \nFKExtension\n.\nnewPlatformInstance\n(\nclientID\n);\n\n\n\n\n\n\nPost this you can start using modules.\n\n\nNote: You should call \nFKPlatform.isPlatformAvailable()\n or, \nwindow.FKExtension \n FKExtension.isPlatformAvailable()\n to check if you're inside Flipkart platform. It is recommended not to do any checks in partner code.\n\n\nModules\n\n\nPermissions Module\n\n\nlet\n \npermissionsModule\n \n=\n \nfkPlatform\n.\ngetModuleHelper\n().\ngetPermissionsModule\n()\n\n\n\n//To get scopes:\n\n\nconst\n \nSCOPES\n \n=\n \npermissionsModule\n.\ngetScopes\n();\n\n\n\n\n\n\nAvailable Scopes:\n\n\nSCOPES.USER_EMAIL,\nSCOPES.USER_MOBILE,\nSCOPES.USER_NAME\n\n\n\n\n\nMethods:\n\n\ngetToken: (permissions: ScopeAccessRequest[]) =\n Promise\nNativeModuleResponse\nPermissionsManagerResponse\n\n\nRelevant interfaces:\n\n\ninterface\n \nScopeAccessRequest\n \n{\n\n    \nscope\n:\n \nScopes\n;\n\n    \nisMandatory\n?:\n \nboolean\n;\n\n    \nshouldVerify\n?:\n \nboolean\n;\n\n\n}\n\n\n\ninterface\n \nNativeModuleResponse\nT\n \n{\n\n    \nresult\n:\n \nT\n,\n\n    \ngrantToken\n?:\n \nstring\n \n|\n \nnull\n\n\n}\n\n\n\ninterface\n \nPermissionsManagerResponse\n \n{\n \n[\nkey\n:\n \nScopes\n]\n:\n \nboolean\n;\n \n}\n\n\n\n\n\n\nisMandatory\n is a boolean which says whether you want the scope to be mandatorily filled by the user\n\n\nadditionally \nshouldVerify\n is boolean which says whether you want the scope to be mandatorily verified as well\n\n\nfor e.g if you call \ngetToken(['scope':'user.email', 'isMandatory':true, 'shouldVerify':true])\n, then that means user cannot grant permissions without filling his email address and also verifying it. You can use this on situations where you know that he user has an unverified email address and want to trigger email verification for the user.\nNote that the flags \nisMandatory\n and \nshouldVerify\n should be set to \ntrue\n only when you ABSOLUTELY need an email address which has to be verified as well, because you could see a significant drop off of permission grants when such constraints are imposed on users. \n\n\nAlso note that the permission popup has a special behaviour when a single scope is requested and also has a unverified value prefilled by the user. For e.g, when you ask permission for a user.email scope, and the user already has an unverified email address in our system, then the UI will automatically initiate the email verfication flow. This is done to avoid an extra click for the user.\n\n\nThe method \ngetToken\n returns you both list of allowed and rejected permissions which depend on user response. It also returns an access token which you should be passing to your server using which it can hit Flipkart api to read relevant info. For security reasons secure info should only be read server to server using given grantToken.\n\n\nPromise resolution : \nPromise fails and enters the \ncatch\n block only if the user dismisses the permission popup (bottomsheet) or the SDK network calls failed.\nIf user denies a permission, the promise will be resolved successfully and you get a \ngrantToken\n.\nThis is because there could be partial permission denial as well. For e.g user denied phone number, but granted email address\nHence all the denials as well as accepts will still be treated as success from a token generation point of view.\nIf you want to check if user denied a permission, you can check the \nNativeModuleResponse\n result to see if the permissions are granted or not.\n\n\nIf the promise fails, Catch block function is invoked with an object which has \nmessage\n and \ncode\n.\nPossible errors are : \n\n\nERROR_CODE_UNKNOWN = 0;\nERROR_CODE_NETWORK_ERROR = 1001;\nERROR_CODE_JSON_PARSE_ERROR = 1002;\nERROR_CODE_INVALID_PERMISSIONS = 1003;\nERROR_CODE_USER_DISMISS = 1004;\nERROR_CODE_BAD_PERMISSION_REQUEST = 1005;\n\n\n\n\n\nNavigation Module\n\n\nCommon methods will enabled application to control their exit behaviour and deeplink into other parts of the app.\n\n\nlet\n \nnavigationModule\n \n=\n \nfkPlatform\n.\ngetModuleHelper\n().\ngetNavigationModule\n()\n\n\n\n\n\n\nMethods:\n\n\nexitSession(): void\n\n\nCloses the application and takes user back to the page from where the app was launched.\n\n\nexitToHomePage(): void\n\n\nCloses the application and takes user to Flipkart homepage.\n\n\nstartPayment(paymentToken: string): void\n\n\nLaunches Flipkart payment screen for given token.\n\n\nclearHistory()?: void\n\n\nClears both forward and backward history such that only the existing page remains.\n\n\nContacts Module (from flipkart app v6.3, ultra v1.4.1)\n\n\nHelps in launching a UI that allows user to select a contact from his address book.\n\n\nlet\n \ncontactModule\n \n=\n \nfkPlatform\n.\ngetModuleHelper\n().\ngetContactsModule\n()\n\n\n\n\n\n\nMethods:\n\n\npickPhoneNumber(): Promise\nNativeModuleResponse\nContact\n\n\nLaunches UI to pick a phone number and returns the same.\n\n\ngetContactInfo(phoneNumbers: string[]): Promise\nNativeModuleResponse\n{[key: string]: Contact;}\n\n\nFetches names and other info against given list of phone numbers. Keys of the returned map will be given phone numbers. \n\n\nRelevant types:\n\n\ninterface\n \nNativeModuleResponse\nT\n \n{\n\n    \nresult\n:\n \nT\n,\n\n    \ngrantToken\n?:\n \nstring\n \n|\n \nnull\n\n\n}\n\n\n\ninterface\n \nContact\n \n{\n\n    \nname\n:\n \nstring\n\n    \nphoneNumber\n:\n \nstring\n\n\n}\n\n\n\n\n\n\nHandling Errors\n\n\nEvery promise reject contains an error code and a message:\nType:\n\n\ninterface\n \nNativeModuleError\n \n{\n\n    \nmessage\n:\n \nstring\n;\n\n    \nerrorCode\n:\n \nnumber\n;\n\n\n}\n\n\n\nCodes\n:\n\n\n0\n:\n \nUnknown\n \nerror\n\n\n\n\n\n\nDetecting flipkart environment\n\n\nIf you want to detect if your webpage is running within Flipkart's ultra environment, you have three ways.\n1. [PREFERRED] Use JS SDK's \nFKPlatform.isPlatformAvailable()\n method.\n2. Use the user agent which contains \"Ultra\". This method is useful if you want to inject the JS SDK only when running within flipkart's ultra environment. An example user agent string \n\nMozilla/5.0 (Linux; Android 8.0.0; Android SDK built for x86 Build/OSR1.170901.008; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.125 Mobile Safari/537.36 [Flipkart/com.flipkart.android/850000/5.16/UltraSDK/4/1.4.2]\n\nNote that if you have service workers making requests, this user agent will not be present.\n3. Use X-Requested-With header which will contain the value 'com.flipkart.android'. This will work for all requests including service workers. This is the least preferred method.\n\n\nDetecting presence of a certain feature\n\n\nUser agent string in ultra is of the following format:\n\nMozilla/5.0 (Linux; Android 8.0.0; Android SDK built for x86 Build/OSR1.170901.008; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.125 Mobile Safari/537.36 [Flipkart/com.flipkart.android/850000/5.16/UltraSDK/4/1.4.2]\n\nIn the above user agent string, 5.16 is the version name and 850000 is version code for flipkart app, 1.4.2 is version name and 4 is version code for ultra SDK. \n\n\nBased on just the ultra version name (1.4.2) you can check if certain newly added modules are present or not.\n\n\nHandling file uploads and downloads (from flipkart app v6.3, ultra v1.3.7)\n\n\nStarting with Flipkart app version 6.3, ultra version 1.3.7, file uploads and downloads are present.\nFor downloads, ensure that 'download' attribute is not used. For e.g \na href='abcd.pdf' download='xyz.pdf' /\n will not work.\nAlso apis like FileSaver.js or blob based APIs dont work due to limitations in webview.\nFor uploads, there are no restrictions.", 
            "title": "Client Side API"
        }, 
        {
            "location": "/clients/#ultra-client-side-sdk", 
            "text": "", 
            "title": "Ultra Client Side SDK"
        }, 
        {
            "location": "/clients/#overview", 
            "text": "This SDK enables developers to build applications that run inside Flipkart app.  All the methods mentioned here will work with both React Native and Webview. \nAll the methods are asynchronous in nature and will always return a promise that gets resolved with the values. Fire and forget calls are an exception where you may not care about the response.  Note: Not open to all, access enabled only for partners.", 
            "title": "Overview"
        }, 
        {
            "location": "/clients/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/clients/#integration-steps", 
            "text": "", 
            "title": "Integration steps:"
        }, 
        {
            "location": "/clients/#step-1", 
            "text": "If using node, add this repository as an npm package  npm install --save fk-platform-sdk  Alternatively, you can also include the following script directly:  http://img1a.flixcart.com/linchpin-web/fk-platform-sdk/fkext-browser-min@0.1.5.js (Version 0.1.5)", 
            "title": "Step 1)"
        }, 
        {
            "location": "/clients/#step-2", 
            "text": "Import SDK and create a new platform instance. You will need to provide clientId given to you by Flipkart.  In Node Environment:  import   FKPlatform   from   fk-platform-sdk  let   fkPlatform   =   new   FKPlatform ( clientId );   In Browser:  var   fkPlatform   =   FKExtension . newPlatformInstance ( clientID );   Post this you can start using modules.  Note: You should call  FKPlatform.isPlatformAvailable()  or,  window.FKExtension   FKExtension.isPlatformAvailable()  to check if you're inside Flipkart platform. It is recommended not to do any checks in partner code.", 
            "title": "Step 2)"
        }, 
        {
            "location": "/clients/#modules", 
            "text": "", 
            "title": "Modules"
        }, 
        {
            "location": "/clients/#permissions-module", 
            "text": "let   permissionsModule   =   fkPlatform . getModuleHelper (). getPermissionsModule ()  //To get scopes:  const   SCOPES   =   permissionsModule . getScopes ();   Available Scopes:  SCOPES.USER_EMAIL,\nSCOPES.USER_MOBILE,\nSCOPES.USER_NAME  Methods:  getToken: (permissions: ScopeAccessRequest[]) =  Promise NativeModuleResponse PermissionsManagerResponse  Relevant interfaces:  interface   ScopeAccessRequest   { \n     scope :   Scopes ; \n     isMandatory ?:   boolean ; \n     shouldVerify ?:   boolean ;  }  interface   NativeModuleResponse T   { \n     result :   T , \n     grantToken ?:   string   |   null  }  interface   PermissionsManagerResponse   {   [ key :   Scopes ] :   boolean ;   }   isMandatory  is a boolean which says whether you want the scope to be mandatorily filled by the user  additionally  shouldVerify  is boolean which says whether you want the scope to be mandatorily verified as well  for e.g if you call  getToken(['scope':'user.email', 'isMandatory':true, 'shouldVerify':true]) , then that means user cannot grant permissions without filling his email address and also verifying it. You can use this on situations where you know that he user has an unverified email address and want to trigger email verification for the user.\nNote that the flags  isMandatory  and  shouldVerify  should be set to  true  only when you ABSOLUTELY need an email address which has to be verified as well, because you could see a significant drop off of permission grants when such constraints are imposed on users.   Also note that the permission popup has a special behaviour when a single scope is requested and also has a unverified value prefilled by the user. For e.g, when you ask permission for a user.email scope, and the user already has an unverified email address in our system, then the UI will automatically initiate the email verfication flow. This is done to avoid an extra click for the user.  The method  getToken  returns you both list of allowed and rejected permissions which depend on user response. It also returns an access token which you should be passing to your server using which it can hit Flipkart api to read relevant info. For security reasons secure info should only be read server to server using given grantToken.  Promise resolution : \nPromise fails and enters the  catch  block only if the user dismisses the permission popup (bottomsheet) or the SDK network calls failed.\nIf user denies a permission, the promise will be resolved successfully and you get a  grantToken .\nThis is because there could be partial permission denial as well. For e.g user denied phone number, but granted email address\nHence all the denials as well as accepts will still be treated as success from a token generation point of view.\nIf you want to check if user denied a permission, you can check the  NativeModuleResponse  result to see if the permissions are granted or not.  If the promise fails, Catch block function is invoked with an object which has  message  and  code .\nPossible errors are :   ERROR_CODE_UNKNOWN = 0;\nERROR_CODE_NETWORK_ERROR = 1001;\nERROR_CODE_JSON_PARSE_ERROR = 1002;\nERROR_CODE_INVALID_PERMISSIONS = 1003;\nERROR_CODE_USER_DISMISS = 1004;\nERROR_CODE_BAD_PERMISSION_REQUEST = 1005;", 
            "title": "Permissions Module"
        }, 
        {
            "location": "/clients/#navigation-module", 
            "text": "Common methods will enabled application to control their exit behaviour and deeplink into other parts of the app.  let   navigationModule   =   fkPlatform . getModuleHelper (). getNavigationModule ()   Methods:  exitSession(): void  Closes the application and takes user back to the page from where the app was launched.  exitToHomePage(): void  Closes the application and takes user to Flipkart homepage.  startPayment(paymentToken: string): void  Launches Flipkart payment screen for given token.  clearHistory()?: void  Clears both forward and backward history such that only the existing page remains.", 
            "title": "Navigation Module"
        }, 
        {
            "location": "/clients/#contacts-module-from-flipkart-app-v63-ultra-v141", 
            "text": "Helps in launching a UI that allows user to select a contact from his address book.  let   contactModule   =   fkPlatform . getModuleHelper (). getContactsModule ()   Methods:  pickPhoneNumber(): Promise NativeModuleResponse Contact  Launches UI to pick a phone number and returns the same.  getContactInfo(phoneNumbers: string[]): Promise NativeModuleResponse {[key: string]: Contact;}  Fetches names and other info against given list of phone numbers. Keys of the returned map will be given phone numbers.   Relevant types:  interface   NativeModuleResponse T   { \n     result :   T , \n     grantToken ?:   string   |   null  }  interface   Contact   { \n     name :   string \n     phoneNumber :   string  }", 
            "title": "Contacts Module (from flipkart app v6.3, ultra v1.4.1)"
        }, 
        {
            "location": "/clients/#handling-errors", 
            "text": "Every promise reject contains an error code and a message:\nType:  interface   NativeModuleError   { \n     message :   string ; \n     errorCode :   number ;  }  Codes :  0 :   Unknown   error", 
            "title": "Handling Errors"
        }, 
        {
            "location": "/clients/#detecting-flipkart-environment", 
            "text": "If you want to detect if your webpage is running within Flipkart's ultra environment, you have three ways.\n1. [PREFERRED] Use JS SDK's  FKPlatform.isPlatformAvailable()  method.\n2. Use the user agent which contains \"Ultra\". This method is useful if you want to inject the JS SDK only when running within flipkart's ultra environment. An example user agent string  Mozilla/5.0 (Linux; Android 8.0.0; Android SDK built for x86 Build/OSR1.170901.008; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.125 Mobile Safari/537.36 [Flipkart/com.flipkart.android/850000/5.16/UltraSDK/4/1.4.2] \nNote that if you have service workers making requests, this user agent will not be present.\n3. Use X-Requested-With header which will contain the value 'com.flipkart.android'. This will work for all requests including service workers. This is the least preferred method.", 
            "title": "Detecting flipkart environment"
        }, 
        {
            "location": "/clients/#detecting-presence-of-a-certain-feature", 
            "text": "User agent string in ultra is of the following format: Mozilla/5.0 (Linux; Android 8.0.0; Android SDK built for x86 Build/OSR1.170901.008; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/58.0.3029.125 Mobile Safari/537.36 [Flipkart/com.flipkart.android/850000/5.16/UltraSDK/4/1.4.2] \nIn the above user agent string, 5.16 is the version name and 850000 is version code for flipkart app, 1.4.2 is version name and 4 is version code for ultra SDK.   Based on just the ultra version name (1.4.2) you can check if certain newly added modules are present or not.", 
            "title": "Detecting presence of a certain feature"
        }, 
        {
            "location": "/clients/#handling-file-uploads-and-downloads-from-flipkart-app-v63-ultra-v137", 
            "text": "Starting with Flipkart app version 6.3, ultra version 1.3.7, file uploads and downloads are present.\nFor downloads, ensure that 'download' attribute is not used. For e.g  a href='abcd.pdf' download='xyz.pdf' /  will not work.\nAlso apis like FileSaver.js or blob based APIs dont work due to limitations in webview.\nFor uploads, there are no restrictions.", 
            "title": "Handling file uploads and downloads (from flipkart app v6.3, ultra v1.3.7)"
        }, 
        {
            "location": "/backend/", 
            "text": "Ultra Backend APIs\n\n\nEndpoint Contracts\n\n\nProd endpoint: \nhttps://platform.flipkart.net\n\n\nAccess token flow\n\n\nUsing the grantToken from the SDK, you have to fetch the accessToken before querying for any resources.\nGet Auth token flow\n\n\nPath: /1/authorization/auth\n\nMethod: GET\n\nQuery parameters: \ngrantToken : String\nclientId : String\nclientSecret : String\n\nResponse :\nAuthTokenResponse {\nidentityToken (string),\naccessToken (string)\n}\n\n\n\n\n\nResource fetching flow\n\n\nResources like user.mobile, user.email can be fetched with this API\nfetch bulk data\n\n\nPath: /1/resource/bulk\n\nMethod: POST\nQuery parameters: \naccessToken : String\nBody: List\nString\n //where each string is scope for which data is to be fetched.\nResponse : Map\nString,Object\n // String the scope and Object for each scope is defined below\nuser.mobile{\nemail(string)\nisVerified(boolean)\n}\nuser.email{\nmobileNumber(string)\nisVerified(boolean)\n}\n\n\n\n\n\nPayment flow.\n\n\nPayment Token\n\n\nPath\n:\n \n1\n/payment/\ntoken\n\n\n\nMethod\n:\n \nPOST\n\n\nBody\n:\n \nPaymentTokenRequest\n \n\nPaymentTokenRequest\n \n{\n\n\nmerchantCredential\n(\nMerchantCredential\n),\n\n\namountPaise\n \n(\nlong\n),\n\n\npaymentExpiryMilliSeconds\n \n(\nlong\n,\n \noptional\n),\n\n\nuserInfo\n \n(\nUserInfo\n),\n\n\nadjustmentWrapper\n(\nAdjustmentWrapper\n,\n \noptional\n),\n\n\npriceSummary\n \n(\nPriceSummary\n),\n\n\nsuccessfulCallBackUrl\n \n(\nstring\n),\n\n\nfailureCallBackUrl\n \n(\nstring\n),\n\n\naddress\n \n(\nAddress\n,\n \noptional\n),\n\n\ndescription\n \n(\nstring\n,\n \noptional\n),\n\n\nmetadata\n \n(\nstring\n,\n \noptional\n),\n\n\nmerchantTransactionId\n \n(\nstring\n),\n\n\nmerchantReferenceId\n \n(\nstring\n)\n\n\n}\n\n\nMerchantCredential\n \n{\n\n\nname\n \n(\nstring\n),\n\n\npassword\n \n(\nstring\n)\n\n\n}\n\n\nUserInfo\n \n{\n\n\nname\n \n(\nstring\n,\n \noptional\n),\n\n\nphone\n \n(\nstring\n,\n \noptional\n),\n\n\nemail\n \n(\nstring\n,\n \noptional\n),\n\n\nidentityToken\n \n(\nstring\n)\n\n\n}\n\n\nAdjustmentWrapper\n \n{\n\n\neligibleAdjustments\n(\nArray\n[\nEligibleAdjustment\n],\n \noptional\n)\n\n\n}\n\n\nEligibleAdjustment\n \n{\n\n\nadjustment_id\n \n(\nstring\n,\n \noptional\n),\n\n\nofferUnitPrice\n \n(\nlong\n,\n \noptional\n),\n\n\nmetadata\n \n(\nobject\n,\n \noptional\n)\n\n\n}\n\n\nPriceSummary\n \n{\n\n\nbasePricePaise\n \n(\nlong\n),\n\n\nitemCount\n \n(\ninteger\n),\n\n\nbreakup\n(\nArray\n[\nPriceSummaryBreakup\n])\n\n\n}\n\n\nPriceSummaryBreakup\n \n{\n\n\ndescription\n \n(\nstring\n),\n\n\ndisplayText\n \n(\nstring\n),\n\n\nvalueInPaise\n \n(\nlong\n),\n\n\nbreakupType\n \n(\nstring\n)\n \n=\n \n[\nDEFAULT\n \nor\n \nDISCOUNT\n]\n\n\n}\n\n\nAddress\n \n{\n\n\naddressLine\n \n(\nstring\n,\n \noptional\n),\n\n\ncity\n \n(\nstring\n,\n \noptional\n),\n\n\nstate\n \n(\nstring\n,\n \noptional\n),\n\n\npincode\n \n(\nstring\n,\n \noptional\n),\n\n\ncountry\n \n(\nstring\n,\n \noptional\n)\n\n\n}\n\n\nResponse\n \n:\n \nPaymentToken\n\n\nPaymentToken\n \n{\n\n\ntoken\n \n(\nstring\n)\n\n\n}\n\n\n\n\n\n\nSample Request\n{\n  \nmerchantCredential\n: {\n    \nname\n: \nEnter name here\n,\n    \npassword\n: \nEnter hash here\n\n  },\n  \nmerchantTransactionId\n: \ntransaction1\n,\n  \nmerchantReferenceId\n: \norder1\n,\n  \namountPaise\n: 200,\n  \npaymentExpiryMilliSeconds\n: 100000,\n  \nuserInfo\n: {\n    \nidentityToken\n: \nActual ID token here\n\n  },\n  \nsuccessfulCallBackUrl\n: \nhttp://www.partner.com/success\n,\n  \nfailureCallBackUrl\n: \nhttp://www.partner.com/failure\n,\n  \ndescription\n: \nthis is a test transaction\n,\n  \nmetadata\n: \nthis is a test transaction\n,\n  \npriceSummary\n: {\n    \nbasePricePaise\n: 100,\n    \nitemCount\n: 0,\n    \nbreakup\n: [\n      {\n        \ndescription\n: \nconvinience_fee\n,\n        \ndisplayText\n: \nConvinence Fee\n,\n        \nvalueInPaise\n: 100,\n        \nbreakupType\n: \nDEFAULT\n\n      }\n    ]\n  }\n}\n\n\n\n\n\nCallback after PGResponse\n\n\nRequest (will be sent as form parameters)\n\n{\n      \ntransaction_status\n: \n, //  SUCCESS, FAILED\n      \naccount_type\n: \nNODAL\n,\n      \npg_trackid\n: \n,     \n      \nmerchant_adjustments\n: \n      \n[\n      {\noffer_id\n:\n,\n      \noffer_unit_price\n:0,\n      \namount_applied\n:0,\n      \namount_requested\n:0,\n      \nactual_subvention_amount\n:0,\n      \neffective_subvention_amount\n:0,\n      \nAdjustment_response_code\n: AdjustmentResponseCode,   //  Appendix\n      \nmetadata\n:{\npaymentSystem\n:\n, \nofferId\n:\n, \ndiscountType\n:\n}}\n      ]\n,\n      \ntransaction_amount\n: \n,\n      \nemi_months\n: \n,\n      \nmerchant_id\n: \n,\n      \ntransaction_response_code\n: \n,      //  Appendix\n      \npayzippy_transaction_id\n: \n,\n      \nhaving_multiple_transactions\n: \n,\n      \nbank_name\n: \n,\n      \ncard_brand\n: CardName,   //  Appendix\n      \nhash_method\n: \n,\n      \ntransaction_time\n: \n,\n      \ntransaction_currency\n: \n,\n      \npayment_method\n: \n,     //  Appendix\n      \ntimestamp\n: \n,\n      \nmerchant_key_id\n: \n,\n      \nprimary_record\n: \n      \n{\ntransaction_id\n: \n, \nprimary_amount\n: \n}\n,\n      \nmerchant_transaction_id\n: \n,\n      \nbank_transaction_id\n: \n,\n      \npayment_instrument\n: \n,\n      \ntransaction_response_message\n: \n,\n      \npg_mid\n: \n,\n      \npg_name\n: \n,\n      \npg_authcode\n: \n,\n      \npg_id\n: \n,\n      \nis_international\n: \n,\n      \nfraud_action\n: \n,\n      \nis_risky_instrument\n: \n,\n      \ntransaction_auth_state\n: \n,\n      \nhash\n: \n,\n      \nmasked_card_number\n: \n,\n\ncard_bin\n: \n,\n}\n\n\n\n\n\nForm Data\n\ntransaction_status=\naccount_type=\npg_trackid=\nmerchant_adjustments=[ {\noffer_id\n:\n, \noffer_unit_price\n:0, \namount_applied\n:0, \namount_requested\n:0, \nactual_subvention_amount\n:0, \neffective_subvention_amount\n:0, ent_response_code\n:\n, \nmetadata\n:{\npaymentSystem\n:\n, \nofferId\n:\n, \ndiscountType\n:\n}} ]transaction_amount=\nemi_months=\nmerchant_id=\ntransaction_response_code=\npayzippy_transaction_id=\nhaving_multiple_transactions=\nbank_name=\ncard_brand=\nhash_method=\ntransaction_time=\ntransaction_currency=\npayment_method=\ntimestamp=\nmerchant_key_id=\nprimary_record={\ntransaction_id\n: \n, \nprimary_amount\n: \n}merchant_transaction_id=\nbank_transaction_id=\npayment_instrument=\ntransaction_response_message=\npg_mid=\npg_name=\npg_authcode=\npg_id=\nis_international=\nfraud_action=\nis_risky_instrument=\ntransaction_auth_state=\nhash=\nmasked_card_number=\ntransaction_status=\naccount_type=\npg_trackid=\nmerchant_adjustments=\ntransaction_amount=\nemi_months=\nmerchant_id=\ntransaction_response_code=\npayzippy_transaction_id=\nhaving_multiple_transactions=\nbank_name=\ncard_brand=\nhash_method=\ntransaction_time=\ntransaction_currency=\npayment_method=\ntimestamp=\nmerchant_key_id=\nprimary_record=\nmerchant_transaction_id=\nbank_transaction_id=\npayment_instrument=\ntransaction_response_message=\npg_mid=\npg_name=\npg_authcode=\npg_id=\nis_international=\nfraud_action=\nis_risky_instrument=\ntransaction_auth_state=\nhash=\nmasked_card_number=\n\n\n\n\n\n\nQuery\n\n\nPath\n:\n \n1\n/payment/\nquery\n\n\n\nMethod\n:\n \nPOST\n\n\nBody\n:\n \nQueryRequest\n \n\nQueryRequest\n \n{\n\n\nmerchantCredential\n(\nMerchantCredential\n),\n\n\nforcePgQuery\n \n(\nboolean\n,\n \noptional\n),\n\n\nmerchantTransactionId\n \n(\nstring\n),\n\n\npaymentTransactionId\n \n(\nstring\n),\n\n\ntransactionType\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nADJUSTMENT\n \nor\n \nSALE\n \nor\n \nREFUND\n \nor\n \nREVADJUSTMENT\n]\n\n\n}\n\n\nMerchantCredential\n \n{\n\n\nname\n \n(\nstring\n),\n\n\npassword\n \n(\nstring\n)\n\n\n}\n\n\nResponse\n \n:\n \nQueryResponse\n\n \nQueryResponse\n \n{\n\n\nresponseStatus\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nSUCCESS\n \nor\n \nFAILED\n],\n\n\nresponseType\n \n(\nstring\n,\n \noptional\n),\n\n\nresponseMessage\n \n(\nstring\n,\n \noptional\n),\n\n\nmessages\n \n(\nArray\n[\nQueryMessage\n],\n \noptional\n),\n\n\nmerchantId\n \n(\nstring\n,\n \noptional\n),\n\n\nmerchantTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nmerchantReferenceId\n \n(\nstring\n,\n \noptional\n),\n\n\ntransactionState\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nINITIATED\n \nor\n \nPENDING\n \nor\n \nSUCCESS\n \nor\n \nFAILED\n],\n\n\npaymentTransactions\n \n(\nArray\n[\nPaymentTransaction\n],\n \noptional\n)\n\n\n}\n\n\n\nQueryMessage\n \n{\n\n\ntype\n \n(\nstring\n,\n \noptional\n),\n\n\nmessage\n \n(\nstring\n,\n \noptional\n)\n\n\n}\n\n\nPaymentTransaction\n \n{\n\n\nmerchantTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\npaymentTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\ntransactionAmount\n \n(\nlong\n,\n \noptional\n),\n\n\ntransactionCurrency\n \n(\nstring\n,\n \noptional\n),\n\n\ntransactionType\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nADJUSTMENT\n \nor\n \nSALE\n \nor\n \nREFUND\n \nor\n \nREVADJUSTMENT\n],\n\n\ntransactionTime\n \n(\nstring\n,\n \noptional\n),\n\n\nrealTransactionTime\n \n(\nstring\n,\n \noptional\n),\n\n\ntransactionStatus\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nINITIATED\n \nor\n \nPENDING\n \nor\n \nSUCCESS\n \nor\n \nFAILED\n],\n\n\ntransactionAuthState\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nPRE_AUTH\n \nor\n \nPARTIAL_CAPTURED\n \nor\n \nFULL_CAPTURED\n \nor\n \nCAPTURE_COMPLETED\n \nor\n \nVOID\n \nor\n \nFAILED\n \nor\n \nSALE\n],\n\n\ntransactionResponseCode\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nREFUND_REQUEST_ACCEPTED\n \nor\n \nREFUND_REQUEST_SENT\n \nor\n \nREFUNDED\n \nor\n \nREFUND_VOID_SUCCESS\n \nor\n \nTXNID_NOT_FOUND\n \nor\n \nREFUND_NOT_SUPPORTED\n \nor\n \nREFUND_WINDOW_EXPIRED\n \nor\n \nSIMILAR_PREVIOUS_PARTIAL_REFUND_DETECTED\n \nor\n \nSALE_TRANSACTION_UNSUCCESSFUL\n \nor\n \nSALE_TRANSACTION_VOID\n \nor\n \nPARTIAL_REFUNDS_UNSUPPORTED\n \nor\n \nINSUFFICIENT_BALANCE\n \nor\n \nDUPLICATE_REFUND_REQUEST\n \nor\n \nEXCESS_REFUND_AMOUNT\n \nor\n \nSALE_TRANSACTION_REFUNDED\n \nor\n \nMULTIPLE_REFUNDS_UNSUPPORTED\n \nor\n \nREFUND_TEMPORARILY_UNAVAILABLE\n \nor\n \nVISA_DIRECT_TIMEOUT\n \nor\n \nPENDING_ON_REFUND_REQUERY\n \nor\n \nFAILED_ON_REFUND_REQUERY\n \nor\n \nCOULD_NOT_ACQUIRE_LOCK\n \nor\n \n_3DS_AUTH_FAILED\n \nor\n \n_3DS_AUTH_UNSUPPORTED\n \nor\n \nADDRESS_VERIFICATION_FAILED\n \nor\n \nBANK_RESPONSE_DELAYED\n \nor\n \nBIN_BLOCKED_BY_ACQUIRER\n \nor\n \nCARD_EXPIRED\n \nor\n \nCARD_NOT_ENROLLED\n \nor\n \nCARD_NUMBER_INVALID\n \nor\n \nCOUNTRY_NOT_SUPPORTED\n \nor\n \nCVV_INCORRECT\n \nor\n \nCVV_MISSING\n \nor\n \nSBI_DEBIT_CARD_BLOCKED\n \nor\n \nPIN_INCORRECT\n \nor\n \nCANCELLED_BY_ACQUIRER\n \nor\n \nDECLINED_BY_ACQUIRER\n \nor\n \nDECLINED_BY_ISSUER\n \nor\n \nDECLINED_BY_RISK\n \nor\n \nINSUFFICIENT_FUNDS\n \nor\n \nISSUER_TECHNICAL_ERROR\n \nor\n \nEMI_NO_PG_FOR_CURRENT_AMOUNT\n \nor\n \nNO_PG_FOR_CURRENT_AMOUNT\n \nor\n \nUPI_EXTERNAL_VPA_UNSUPPORTED\n \nor\n \nMID_NOT_ACTIVE\n \nor\n \nMID_NOT_FOUND\n \nor\n \nDUPLICATE_TXN_REQUEST\n \nor\n \nINVALID_TRANSACTION_ID\n \nor\n \nMERCHANT_AUTH_FAILED\n \nor\n \nDECLINED_BY_PAYZIPPY\n \nor\n \nBANK_UNAVAILABLE\n \nor\n \nCARD_EXPIRY_DATE_INVALID\n \nor\n \nCANCELLED_BY_USER\n \nor\n \nUSER_SESSION_TIMED_OUT\n \nor\n \nUSER_REFRESH_COUNT_EXCEEDED\n \nor\n \nUSER_RETRY_COUNT_EXCEEDED\n \nor\n \nINVALID_PROCESSPAY_REQUEST\n \nor\n \nMANDATORY_PARAM_MISSING\n \nor\n \nINVALID_PARAM_FORMAT\n \nor\n \nINVALID_PARAM_VALUE\n \nor\n \nINVALID_PAYZIPPY_ACCOUNT\n \nor\n \nNETBANKING_NOT_ENABLED\n \nor\n \nNETBANKING_LIMIT_EXCEEDED\n \nor\n \nACCOUNT_ON_HOLD\n \nor\n \nPAY_LATER_ELIGIBILITY_FAILURE\n \nor\n \nPAYZIPPY_TECHNICAL_ERROR\n \nor\n \nACQUIRER_TECHNICAL_ERROR\n \nor\n \nSUCCESS\n \nor\n \nINITIATED\n \nor\n \nPENDING\n \nor\n \nREQUEST_FIELD_INVALID\n \nor\n \nSYSTEM_UNDER_MAINTENANCE\n \nor\n \nEMPTY_OTP_ERROR\n \nor\n \nINTERNAL_SERVER_ERROR\n \nor\n \nDATABASE_SERVER_ERROR\n \nor\n \nPROTOCOL_ERROR\n \nor\n \nNOT_PERMITTED\n \nor\n \nCARD_NOT_IN_3DS_RANGE\n \nor\n \nINVALID_AUTH_DATA\n \nor\n \nINVALID_REQUEST_TYPE\n \nor\n \nINVALID_REQUEST_XML_FORMAT\n \nor\n \nHASH_CHECK_FAILED\n \nor\n \nINVALID_MERCHANT_ID\n \nor\n \nITP_VALIDATION_FAILED\n \nor\n \nINVALID_IVR_OTP_DATA\n \nor\n \nTIMED_OUT\n \nor\n \nUNABLE_TO_PROCESS_REQUEST\n \nor\n \nINVALID_RESPONSE_XML_FORMAT\n \nor\n \nCARD_BLOCKS\n \nor\n \nOPEN_ECS_NACH_MANDATE\n \nor\n \nDDF_DEALER\n \nor\n \nCARD_OFFER_EXHAUSTED\n \nor\n \nCHECK_SUM_MISMATCH\n],\n\n\nrefundResponseCode\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nSUCCESS\n \nor\n \nREFUND_REQUEST_ACCEPTED\n \nor\n \nREFUND_REQUEST_SENT\n \nor\n \nREFUNDED\n \nor\n \nREFUND_VOID_SUCCESS\n \nor\n \nTXNID_NOT_FOUND\n \nor\n \nREFUND_NOT_SUPPORTED\n \nor\n \nREFUND_WINDOW_EXPIRED\n \nor\n \nSIMILAR_PREVIOUS_PARTIAL_REFUND_DETECTED\n \nor\n \nSALE_TRANSACTION_UNSUCCESSFUL\n \nor\n \nSALE_TRANSACTION_VOID\n \nor\n \nPARTIAL_REFUNDS_UNSUPPORTED\n \nor\n \nINSUFFICIENT_BALANCE\n \nor\n \nDUPLICATE_REFUND_REQUEST\n \nor\n \nEXCESS_REFUND_AMOUNT\n \nor\n \nSALE_TRANSACTION_REFUNDED\n \nor\n \nMULTIPLE_REFUNDS_UNSUPPORTED\n \nor\n \nPAYZIPPY_TECHNICAL_ERROR\n \nor\n \nACQUIRER_TECHNICAL_ERROR\n \nor\n \nREFUND_TEMPORARILY_UNAVAILABLE\n \nor\n \nVISA_DIRECT_TIMEOUT\n \nor\n \nPENDING_ON_REFUND_REQUERY\n \nor\n \nFAILED_ON_REFUND_REQUERY\n \nor\n \nCOULD_NOT_ACQUIRE_LOCK\n \nor\n \nUPI_EXTERNAL_VPA_UNSUPPORTED\n],\n\n\ntransactionResponseMessage\n \n(\nstring\n,\n \noptional\n),\n\n\nbankArn\n \n(\nstring\n,\n \noptional\n),\n\n\nrefundSla\n \n(\nRefundSla\n,\n \noptional\n),\n\n\npaymentMethod\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nCREDIT\n \nor\n \nDEBIT\n \nor\n \nEMI\n \nor\n \nNET\n \nor\n \nPAYZIPPY\n \nor\n \nNET_OPTIONS\n \nor\n \nEMI_OPTIONS\n \nor\n \nPHONEPE\n \nor\n \nFLIPKART_CREDIT\n],\n\n\npaymentInstrument\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nCREDIT\n \nor\n \nDEBIT\n \nor\n \nEMI\n \nor\n \nNET\n \nor\n \nPAYZIPPY\n \nor\n \nNET_OPTIONS\n \nor\n \nEMI_OPTIONS\n \nor\n \nPHONEPE\n \nor\n \nFLIPKART_CREDIT\n],\n\n\nemiMonths\n \n(\nlong\n,\n \noptional\n),\n\n\nbankName\n \n(\nstring\n,\n \noptional\n),\n\n\nemiScheme\n \n(\nEmiScheme\n,\n \noptional\n),\n\n\nfraudAction\n \n(\nstring\n,\n \noptional\n),\n\n\nfraudDecision\n \n(\nstring\n,\n \noptional\n),\n\n\nfraudDetails\n \n(\nstring\n,\n \noptional\n),\n\n\nfraudSource\n \n(\nstring\n,\n \noptional\n),\n\n\npgMID\n \n(\nstring\n,\n \noptional\n),\n\n\npgTrackId\n \n(\nstring\n,\n \noptional\n),\n\n\npgId\n \n(\nstring\n,\n \noptional\n),\n\n\npgName\n \n(\nstring\n,\n \noptional\n),\n\n\nbankTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nterminalId\n \n(\nstring\n,\n \noptional\n),\n\n\npgAuthCode\n \n(\nstring\n,\n \noptional\n),\n\n\naccountType\n \n(\nstring\n,\n \noptional\n),\n\n\nsubventionPercentage\n \n(\nlong\n,\n \noptional\n),\n\n\ncardBrand\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nVISA\n \nor\n \nMASTERCARD\n \nor\n \nAMEX\n \nor\n \nMAESTRO\n \nor\n \nDINERS\n \nor\n \nRUPAY\n \nor\n \nDEFAULT\n \nor\n \nDISCOVER\n \nor\n \nBAJAJ\n],\n\n\ncardBin\n \n(\nstring\n,\n \noptional\n),\n\n\norderId\n \n(\nstring\n,\n \noptional\n),\n\n\nrelatedRecords\n \n(\nArray\n[\nRelatedRecord\n],\n \noptional\n),\n\n\nprimaryAmount\n \n(\nlong\n,\n \noptional\n),\n\n\nmerchantAdjustments\n \n(\nArray\n[\nMerchantAdjustment\n],\n \noptional\n),\n\n\nqueryTransactionStatus\n \n(\nstring\n,\n \noptional\n),\n\n\nmetadata\n \n(\nstring\n,\n \noptional\n),\n\n\nsaleTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nconfirmedFraud\n \n(\nboolean\n,\n \noptional\n),\n\n\ninternational\n \n(\nboolean\n,\n \noptional\n),\n\n\nriskyInstrument\n \n(\nboolean\n,\n \noptional\n)\n\n\n}\n\n\nRefundSla\n \n{\n\n\nminSla\n \n(\nlong\n,\n \noptional\n),\n\n\nmaxSla\n \n(\nlong\n,\n \noptional\n)\n\n\n}\n\n\nEmiScheme\n \n{\n\n\nemiTenureInMonths\n \n(\nlong\n,\n \noptional\n),\n\n\ninterestValue\n \n(\nlong\n,\n \noptional\n),\n\n\ninterestType\n \n(\nstring\n,\n \noptional\n)\n\n\n}\n\n\nRelatedRecord\n \n{\n\n\nadjustmentTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nrelation\n \n(\nstring\n,\n \noptional\n),\n\n\nadjustmentId\n \n(\nstring\n,\n \noptional\n),\n\n\nadjustmentAmount\n \n(\nlong\n,\n \noptional\n)\n\n\n}\n\n\nMerchantAdjustment\n \n{\n\n\ntransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nofferId\n \n(\nstring\n,\n \noptional\n),\n\n\nofferUnitPrice\n \n(\nlong\n,\n \noptional\n),\n\n\namountApplied\n \n(\nlong\n,\n \noptional\n),\n\n\namountRequested\n \n(\nlong\n,\n \noptional\n),\n\n\npromiseDate\n \n(\nstring\n,\n \noptional\n),\n\n\nactualSubventionAmount\n \n(\nlong\n,\n \noptional\n),\n\n\neffectiveSubventionAmount\n \n(\nlong\n,\n \noptional\n),\n\n\nadjustmentResponseCode\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nEXPIRED\n \nor\n \nINVALID\n \nor\n \nFAILED_BY_TIME\n \nor\n \nREJECTED_BY_WHITELIST\n \nor\n \nREJECTED_BY_BLACKLIST\n \nor\n \nREJECTED_BY_RULE\n \nor\n \nREJECTED_LOW_PRIORITY\n \nor\n \nEXHAUSTED_BY_TXNID\n \nor\n \nEXHAUSTED_BY_EMAIL\n \nor\n \nEXHAUSTED_BY_ACCOUNT\n \nor\n \nEXHAUSTED_BY_PHONE\n \nor\n \nEXHAUSTED_BY_IP\n \nor\n \nEXHAUSTED_BY_ACCID\n \nor\n \nEXHAUSTED_BY_MID\n \nor\n \nEXHAUSTED_GLOBAL\n \nor\n \nEXHAUSTED_BY_CARD\n \nor\n \nMISSING_PAYMENT_INFO\n \nor\n \nELIGIBLE\n \nor\n \nNOT_ELIGIBLE\n \nor\n \nOFFER_NOT_APPLIED\n \nor\n \nREJECTED_DUE_TO_PAYMENT_WARNING\n],\n\n\nadjustmentType\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nINSTANT_DISCOUNT\n \nor\n \nCASHBACK_ON_CARD\n \nor\n \nCASHBACK_IN_BANK\n \nor\n \nCASHBACK_IN_WALLET\n \nor\n \nINSTANT_CASHBACK\n \nor\n \nDOWN_PAYMENT\n],\n\n\nmetadata\n \n(\nobject\n,\n \noptional\n)\n\n\n}\n\n\n\n\n\n\nSample Request\n{\n  \nmerchantCredential\n: {\n    \nname\n: \nEnter name here\n,\n    \npassword\n: \nEnter hash here\n\n  },\n  \nforcePgQuery\n: true,\n  \nmerchantTransactionId\n: \ntransaction1\n,\n  \npaymentTransactionId\n: \nPZT1712211056FQM0400\n\n}\n\n\n\n\n\nRefund\n\n\nPath\n:\n \n1\n/payment/\nquery\n\n\n\nMethod\n:\n \nPOST\n\n\nBody\n:\n \nRefundRequest\n \n\nRefundRequest\n \n{\n\n\nmerchantCredential\n(\nMerchantCredential\n),\n\n\nmerchantTransactionId\n \n(\nstring\n),\n\n\npayzippySaleTrasactionId\n \n(\nstring\n),\n\n\nrefundAmount\n \n(\nlong\n),\n\n\nrefundReason\n \n(\nstring\n),\n\n\nrefundedBy\n \n(\nstring\n),\n\n\nmerchantRefundTransactionId\n(\nstring\n,\n \noptional\n),\n\n\nidempotencyId\n \n(\nstring\n,\n \noptional\n),\n\n\nmetadata\n \n(\nstring\n,\n \noptional\n)\n\n\n}\n\n\nMerchantCredential\n \n{\n\n\nname\n \n(\nstring\n),\n\n\npassword\n \n(\nstring\n)\n\n\n}\n\n\nResponse\n \n:\n \nRefundResponse\n\n\nRefundResponse\n \n{\n\n\nbankArn\n \n(\nstring\n,\n \noptional\n),\n\n\npgMID\n \n(\nstring\n,\n \noptional\n),\n\n\npgTrackId\n \n(\nstring\n,\n \noptional\n),\n\n\npgId\n \n(\nstring\n,\n \noptional\n),\n\n\npgName\n \n(\nstring\n,\n \noptional\n),\n\n\nbankTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nterminalId\n \n(\nstring\n,\n \noptional\n),\n\n\ncardBrand\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nVISA\n \nor\n \nMASTERCARD\n \nor\n \nAMEX\n \nor\n \nMAESTRO\n \nor\n \nDINERS\n \nor\n \nRUPAY\n \nor\n \nDEFAULT\n \nor\n \nDISCOVER\n \nor\n \nBAJAJ\n],\n\n\ncardBin\n \n(\nstring\n,\n \noptional\n),\n\n\nadjustmentTransactionIds\n \n(\nstring\n,\n \noptional\n),\n\n\nadjustmentRelations\n \n(\nstring\n,\n \noptional\n),\n\n\nadjustmentIds\n \n(\nstring\n,\n \noptional\n),\n\n\nadjustmentAmounts\n \n(\nstring\n,\n \noptional\n),\n\n\nrefundAmount\n \n(\nlong\n,\n \noptional\n),\n\n\nmerchantTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\npayzippyTransactionId\n \n(\nstring\n,\n \noptional\n),\n\n\nrefundCurrency\n \n(\nstring\n,\n \noptional\n),\n\n\ntransactionTime\n \n(\nlong\n,\n \noptional\n),\n\n\nrefundSla\n \n(\nRefundSla\n,\n \noptional\n),\n\n\nrefundStatus\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nREFUND_REQUEST_RECEIVED\n \nor\n \nREFUND_REQUEST_SUBMITTED\n \nor\n \nSUCCESS\n \nor\n \nFAILED\n \nor\n \nREFUNDED\n \nor\n \nPENDING\n],\n\n\nrefundResponseCode\n \n(\nstring\n,\n \noptional\n)\n \n=\n \n[\nSUCCESS\n \nor\n \nREFUND_REQUEST_ACCEPTED\n \nor\n \nREFUND_REQUEST_SENT\n \nor\n \nREFUNDED\n \nor\n \nREFUND_VOID_SUCCESS\n \nor\n \nTXNID_NOT_FOUND\n \nor\n \nREFUND_NOT_SUPPORTED\n \nor\n \nREFUND_WINDOW_EXPIRED\n \nor\n \nSIMILAR_PREVIOUS_PARTIAL_REFUND_DETECTED\n \nor\n \nSALE_TRANSACTION_UNSUCCESSFUL\n \nor\n \nSALE_TRANSACTION_VOID\n \nor\n \nPARTIAL_REFUNDS_UNSUPPORTED\n \nor\n \nINSUFFICIENT_BALANCE\n \nor\n \nDUPLICATE_REFUND_REQUEST\n \nor\n \nEXCESS_REFUND_AMOUNT\n \nor\n \nSALE_TRANSACTION_REFUNDED\n \nor\n \nMULTIPLE_REFUNDS_UNSUPPORTED\n \nor\n \nPAYZIPPY_TECHNICAL_ERROR\n \nor\n \nACQUIRER_TECHNICAL_ERROR\n \nor\n \nREFUND_TEMPORARILY_UNAVAILABLE\n \nor\n \nVISA_DIRECT_TIMEOUT\n \nor\n \nPENDING_ON_REFUND_REQUERY\n \nor\n \nFAILED_ON_REFUND_REQUERY\n \nor\n \nCOULD_NOT_ACQUIRE_LOCK\n \nor\n \nUPI_EXTERNAL_VPA_UNSUPPORTED\n],\n\n\nrefundResponseMessage\n \n(\nstring\n,\n \noptional\n),\n\n\nmetaData\n \n(\nstring\n,\n \noptional\n)\n\n\n}\n\n\nRefundSla\n \n{\n\n\nminSla\n \n(\nlong\n,\n \noptional\n),\n\n\nmaxSla\n \n(\nlong\n,\n \noptional\n)\n\n\n}\n\n\n\n\n\n\nSample Request\n{\n  \nmerchantCredential\n: {\n    \nname\n: \nEnter name here\n,\n    \npassword\n: \nEnter hash here\n\n  },\n  \nmerchantTransactionId\n: \ntransaction1\n,\n  \npayzippySaleTrasactionId\n: \nPZT1712211056FQM0400\n,\n  \nrefundAmount\n: 100,\n  \nrefundReason\n: \ntesting\n,\n  \nrefundedBy\n: \nAnvay\n,\n  \nmerchantRefundTransactionId\n: \ntransaction1-refund1\n\n}\n\n\n\n\n\nOMS\n\n\nOMS Insert\n\n\nPath: /1/oms/insert\nMethod: POST\nBody: RefundRequest \nOMSPayload {\norderId (string),\nimageUrl (string),\ndescription (string),\namount (double),\ndisbursalText (string),\nsecondaryDisbursalText (string),\nidentityToken (string),\nstate (string) [\nINITIATED\n or \nSUCCESSFUL\n or \nFAILED\n],\nitems (Array[OMSItem]),\noffers (Array[OMSOffers], optional),\ntimestamp (long)\n}\nOMSItem {\nitemId (string),\ntitle (string),\namount (long),\ncategory (string)\n}\nOMSOffers {\nofferId (string),\ntitle (string),\nsource (string)\n}\nResponse: String\n\n\n\n\n\nSample Request\n{\n    \norderId\n:\ndummyOrder1\n,\n    \nimageUrl\n: \nhttp://www.google.com/img/test\n,\n    \ndescription\n:\nThis is an order id\n,\n    \namount\n: 220.14,\n    \ndisbursalText\n:\nYou order has been recharged\n,\n    \nsecondaryDisbursalText\n:\nRecharge is already done, Go get a life\n,\n    \nidentityToken\n:\nIDTKNE4783BAFB3B54713A46EC4B9EB5D59DEKNG\n,\n    \nstate\n:\nDUMMY\n,\n    \ntimestamp\n: 1523960011000,\n    \nitems\n: [\n        {\n            \nitemId\n : \ndummyItemId1\n,\n            \ntitle\n : \nThis is the recharge product you just purchased\n,\n            \namount\n : 220.14,\n            \ncategory\n : \nrecharge\n\n        }\n    ],\n    \noffers\n: [\n        {\n            \nofferId\n : \ndummyOfferId\n,\n            \ntitle\n : \nGet everything for free\n,\n            \nsource\n : \nmerchant\n\n        }\n    ]\n}\n\n\n\n\n\nOMS State update\n\n\nPath: /1/oms/update/state\nMethod: PUT\nQuery: \norderId : String\nstate : String  [\nINITIATED\n or \nSUCCESSFUL\n or \nFAILED\n]\n\n\n\n\n\nOMS Refund\n\n\nPath: /1/oms/create/refund\nMethod: PUT\nBody: \nRefundPayload {\norderId (string),\ntransactionId (string),\namount (double),\nsource (string),\ntitle (string),\nrefundId (string)\n}\n\n\n\n\n\nSample Request\n{\n    \norderId\n : \ndummyOrder1\n,\n    \ntransactionId\n : \ndummyRefundTransactionId\n,\n    \namount\n : 20.12,\n    \nsource\n : \nmerchant\n,\n    \ntitle\n : \nRefund because merchant says so\n,\n    \nrefundId\n : \ndummyRefundId\n\n}\n\n\n\n\n\nSecurity\n\n\nAll production endpoints will be over https.\nWe will validate Client\u2019s identity using JWT.\nThe JWT will be shared in every call in header as a \u2018secureToken\u2019\n\n\nProperties of secure token\nAlgorithm RS256\nFields to be present in payload\niss -\n Issuer -\n which is equal to clientId\niat -\n Issued At -\n Timestamp with seconds resolution when the token was generate. This will fail if in future.\nexp -\n Expiry At -\n Timestamp with seconds resolution when the token expires. exp-iat should not be more than 1000\nThe Public key should be shared with flipkart before hand.\n\n\nTest endpoint for secure token\n\n\nPath: /1/dummy\nMethod: GET\nHeader: secureToken\nResponse:  Will be HTTP 200 if secureToken is valid otherwise response code will be self explanatory.", 
            "title": "Server Side API"
        }, 
        {
            "location": "/backend/#ultra-backend-apis", 
            "text": "", 
            "title": "Ultra Backend APIs"
        }, 
        {
            "location": "/backend/#endpoint-contracts", 
            "text": "Prod endpoint:  https://platform.flipkart.net", 
            "title": "Endpoint Contracts"
        }, 
        {
            "location": "/backend/#access-token-flow", 
            "text": "Using the grantToken from the SDK, you have to fetch the accessToken before querying for any resources.\nGet Auth token flow  Path: /1/authorization/auth\n\nMethod: GET\n\nQuery parameters: \ngrantToken : String\nclientId : String\nclientSecret : String\n\nResponse :\nAuthTokenResponse {\nidentityToken (string),\naccessToken (string)\n}", 
            "title": "Access token flow"
        }, 
        {
            "location": "/backend/#resource-fetching-flow", 
            "text": "Resources like user.mobile, user.email can be fetched with this API\nfetch bulk data  Path: /1/resource/bulk\n\nMethod: POST\nQuery parameters: \naccessToken : String\nBody: List String  //where each string is scope for which data is to be fetched.\nResponse : Map String,Object  // String the scope and Object for each scope is defined below\nuser.mobile{\nemail(string)\nisVerified(boolean)\n}\nuser.email{\nmobileNumber(string)\nisVerified(boolean)\n}", 
            "title": "Resource fetching flow"
        }, 
        {
            "location": "/backend/#payment-flow", 
            "text": "", 
            "title": "Payment flow."
        }, 
        {
            "location": "/backend/#payment-token", 
            "text": "Path :   1 /payment/ token  Method :   POST  Body :   PaymentTokenRequest   PaymentTokenRequest   {  merchantCredential ( MerchantCredential ),  amountPaise   ( long ),  paymentExpiryMilliSeconds   ( long ,   optional ),  userInfo   ( UserInfo ),  adjustmentWrapper ( AdjustmentWrapper ,   optional ),  priceSummary   ( PriceSummary ),  successfulCallBackUrl   ( string ),  failureCallBackUrl   ( string ),  address   ( Address ,   optional ),  description   ( string ,   optional ),  metadata   ( string ,   optional ),  merchantTransactionId   ( string ),  merchantReferenceId   ( string )  }  MerchantCredential   {  name   ( string ),  password   ( string )  }  UserInfo   {  name   ( string ,   optional ),  phone   ( string ,   optional ),  email   ( string ,   optional ),  identityToken   ( string )  }  AdjustmentWrapper   {  eligibleAdjustments ( Array [ EligibleAdjustment ],   optional )  }  EligibleAdjustment   {  adjustment_id   ( string ,   optional ),  offerUnitPrice   ( long ,   optional ),  metadata   ( object ,   optional )  }  PriceSummary   {  basePricePaise   ( long ),  itemCount   ( integer ),  breakup ( Array [ PriceSummaryBreakup ])  }  PriceSummaryBreakup   {  description   ( string ),  displayText   ( string ),  valueInPaise   ( long ),  breakupType   ( string )   =   [ DEFAULT   or   DISCOUNT ]  }  Address   {  addressLine   ( string ,   optional ),  city   ( string ,   optional ),  state   ( string ,   optional ),  pincode   ( string ,   optional ),  country   ( string ,   optional )  }  Response   :   PaymentToken  PaymentToken   {  token   ( string )  }   Sample Request\n{\n   merchantCredential : {\n     name :  Enter name here ,\n     password :  Enter hash here \n  },\n   merchantTransactionId :  transaction1 ,\n   merchantReferenceId :  order1 ,\n   amountPaise : 200,\n   paymentExpiryMilliSeconds : 100000,\n   userInfo : {\n     identityToken :  Actual ID token here \n  },\n   successfulCallBackUrl :  http://www.partner.com/success ,\n   failureCallBackUrl :  http://www.partner.com/failure ,\n   description :  this is a test transaction ,\n   metadata :  this is a test transaction ,\n   priceSummary : {\n     basePricePaise : 100,\n     itemCount : 0,\n     breakup : [\n      {\n         description :  convinience_fee ,\n         displayText :  Convinence Fee ,\n         valueInPaise : 100,\n         breakupType :  DEFAULT \n      }\n    ]\n  }\n}", 
            "title": "Payment Token"
        }, 
        {
            "location": "/backend/#callback-after-pgresponse", 
            "text": "Request (will be sent as form parameters)\n\n{\n       transaction_status :  , //  SUCCESS, FAILED\n       account_type :  NODAL ,\n       pg_trackid :  ,     \n       merchant_adjustments : \n       [\n      { offer_id : ,\n       offer_unit_price :0,\n       amount_applied :0,\n       amount_requested :0,\n       actual_subvention_amount :0,\n       effective_subvention_amount :0,\n       Adjustment_response_code : AdjustmentResponseCode,   //  Appendix\n       metadata :{ paymentSystem : ,  offerId : ,  discountType : }}\n      ] ,\n       transaction_amount :  ,\n       emi_months :  ,\n       merchant_id :  ,\n       transaction_response_code :  ,      //  Appendix\n       payzippy_transaction_id :  ,\n       having_multiple_transactions :  ,\n       bank_name :  ,\n       card_brand : CardName,   //  Appendix\n       hash_method :  ,\n       transaction_time :  ,\n       transaction_currency :  ,\n       payment_method :  ,     //  Appendix\n       timestamp :  ,\n       merchant_key_id :  ,\n       primary_record : \n       { transaction_id :  ,  primary_amount :  } ,\n       merchant_transaction_id :  ,\n       bank_transaction_id :  ,\n       payment_instrument :  ,\n       transaction_response_message :  ,\n       pg_mid :  ,\n       pg_name :  ,\n       pg_authcode :  ,\n       pg_id :  ,\n       is_international :  ,\n       fraud_action :  ,\n       is_risky_instrument :  ,\n       transaction_auth_state :  ,\n       hash :  ,\n       masked_card_number :  , card_bin :  ,\n}  Form Data\n\ntransaction_status= account_type= pg_trackid= merchant_adjustments=[ { offer_id : ,  offer_unit_price :0,  amount_applied :0,  amount_requested :0,  actual_subvention_amount :0,  effective_subvention_amount :0, ent_response_code : ,  metadata :{ paymentSystem : ,  offerId : ,  discountType : }} ]transaction_amount= emi_months= merchant_id= transaction_response_code= payzippy_transaction_id= having_multiple_transactions= bank_name= card_brand= hash_method= transaction_time= transaction_currency= payment_method= timestamp= merchant_key_id= primary_record={ transaction_id :  ,  primary_amount :  }merchant_transaction_id= bank_transaction_id= payment_instrument= transaction_response_message= pg_mid= pg_name= pg_authcode= pg_id= is_international= fraud_action= is_risky_instrument= transaction_auth_state= hash= masked_card_number= transaction_status= account_type= pg_trackid= merchant_adjustments= transaction_amount= emi_months= merchant_id= transaction_response_code= payzippy_transaction_id= having_multiple_transactions= bank_name= card_brand= hash_method= transaction_time= transaction_currency= payment_method= timestamp= merchant_key_id= primary_record= merchant_transaction_id= bank_transaction_id= payment_instrument= transaction_response_message= pg_mid= pg_name= pg_authcode= pg_id= is_international= fraud_action= is_risky_instrument= transaction_auth_state= hash= masked_card_number=", 
            "title": "Callback after PGResponse"
        }, 
        {
            "location": "/backend/#query", 
            "text": "Path :   1 /payment/ query  Method :   POST  Body :   QueryRequest   QueryRequest   {  merchantCredential ( MerchantCredential ),  forcePgQuery   ( boolean ,   optional ),  merchantTransactionId   ( string ),  paymentTransactionId   ( string ),  transactionType   ( string ,   optional )   =   [ ADJUSTMENT   or   SALE   or   REFUND   or   REVADJUSTMENT ]  }  MerchantCredential   {  name   ( string ),  password   ( string )  }  Response   :   QueryResponse \n  QueryResponse   {  responseStatus   ( string ,   optional )   =   [ SUCCESS   or   FAILED ],  responseType   ( string ,   optional ),  responseMessage   ( string ,   optional ),  messages   ( Array [ QueryMessage ],   optional ),  merchantId   ( string ,   optional ),  merchantTransactionId   ( string ,   optional ),  merchantReferenceId   ( string ,   optional ),  transactionState   ( string ,   optional )   =   [ INITIATED   or   PENDING   or   SUCCESS   or   FAILED ],  paymentTransactions   ( Array [ PaymentTransaction ],   optional )  }  QueryMessage   {  type   ( string ,   optional ),  message   ( string ,   optional )  }  PaymentTransaction   {  merchantTransactionId   ( string ,   optional ),  paymentTransactionId   ( string ,   optional ),  transactionAmount   ( long ,   optional ),  transactionCurrency   ( string ,   optional ),  transactionType   ( string ,   optional )   =   [ ADJUSTMENT   or   SALE   or   REFUND   or   REVADJUSTMENT ],  transactionTime   ( string ,   optional ),  realTransactionTime   ( string ,   optional ),  transactionStatus   ( string ,   optional )   =   [ INITIATED   or   PENDING   or   SUCCESS   or   FAILED ],  transactionAuthState   ( string ,   optional )   =   [ PRE_AUTH   or   PARTIAL_CAPTURED   or   FULL_CAPTURED   or   CAPTURE_COMPLETED   or   VOID   or   FAILED   or   SALE ],  transactionResponseCode   ( string ,   optional )   =   [ REFUND_REQUEST_ACCEPTED   or   REFUND_REQUEST_SENT   or   REFUNDED   or   REFUND_VOID_SUCCESS   or   TXNID_NOT_FOUND   or   REFUND_NOT_SUPPORTED   or   REFUND_WINDOW_EXPIRED   or   SIMILAR_PREVIOUS_PARTIAL_REFUND_DETECTED   or   SALE_TRANSACTION_UNSUCCESSFUL   or   SALE_TRANSACTION_VOID   or   PARTIAL_REFUNDS_UNSUPPORTED   or   INSUFFICIENT_BALANCE   or   DUPLICATE_REFUND_REQUEST   or   EXCESS_REFUND_AMOUNT   or   SALE_TRANSACTION_REFUNDED   or   MULTIPLE_REFUNDS_UNSUPPORTED   or   REFUND_TEMPORARILY_UNAVAILABLE   or   VISA_DIRECT_TIMEOUT   or   PENDING_ON_REFUND_REQUERY   or   FAILED_ON_REFUND_REQUERY   or   COULD_NOT_ACQUIRE_LOCK   or   _3DS_AUTH_FAILED   or   _3DS_AUTH_UNSUPPORTED   or   ADDRESS_VERIFICATION_FAILED   or   BANK_RESPONSE_DELAYED   or   BIN_BLOCKED_BY_ACQUIRER   or   CARD_EXPIRED   or   CARD_NOT_ENROLLED   or   CARD_NUMBER_INVALID   or   COUNTRY_NOT_SUPPORTED   or   CVV_INCORRECT   or   CVV_MISSING   or   SBI_DEBIT_CARD_BLOCKED   or   PIN_INCORRECT   or   CANCELLED_BY_ACQUIRER   or   DECLINED_BY_ACQUIRER   or   DECLINED_BY_ISSUER   or   DECLINED_BY_RISK   or   INSUFFICIENT_FUNDS   or   ISSUER_TECHNICAL_ERROR   or   EMI_NO_PG_FOR_CURRENT_AMOUNT   or   NO_PG_FOR_CURRENT_AMOUNT   or   UPI_EXTERNAL_VPA_UNSUPPORTED   or   MID_NOT_ACTIVE   or   MID_NOT_FOUND   or   DUPLICATE_TXN_REQUEST   or   INVALID_TRANSACTION_ID   or   MERCHANT_AUTH_FAILED   or   DECLINED_BY_PAYZIPPY   or   BANK_UNAVAILABLE   or   CARD_EXPIRY_DATE_INVALID   or   CANCELLED_BY_USER   or   USER_SESSION_TIMED_OUT   or   USER_REFRESH_COUNT_EXCEEDED   or   USER_RETRY_COUNT_EXCEEDED   or   INVALID_PROCESSPAY_REQUEST   or   MANDATORY_PARAM_MISSING   or   INVALID_PARAM_FORMAT   or   INVALID_PARAM_VALUE   or   INVALID_PAYZIPPY_ACCOUNT   or   NETBANKING_NOT_ENABLED   or   NETBANKING_LIMIT_EXCEEDED   or   ACCOUNT_ON_HOLD   or   PAY_LATER_ELIGIBILITY_FAILURE   or   PAYZIPPY_TECHNICAL_ERROR   or   ACQUIRER_TECHNICAL_ERROR   or   SUCCESS   or   INITIATED   or   PENDING   or   REQUEST_FIELD_INVALID   or   SYSTEM_UNDER_MAINTENANCE   or   EMPTY_OTP_ERROR   or   INTERNAL_SERVER_ERROR   or   DATABASE_SERVER_ERROR   or   PROTOCOL_ERROR   or   NOT_PERMITTED   or   CARD_NOT_IN_3DS_RANGE   or   INVALID_AUTH_DATA   or   INVALID_REQUEST_TYPE   or   INVALID_REQUEST_XML_FORMAT   or   HASH_CHECK_FAILED   or   INVALID_MERCHANT_ID   or   ITP_VALIDATION_FAILED   or   INVALID_IVR_OTP_DATA   or   TIMED_OUT   or   UNABLE_TO_PROCESS_REQUEST   or   INVALID_RESPONSE_XML_FORMAT   or   CARD_BLOCKS   or   OPEN_ECS_NACH_MANDATE   or   DDF_DEALER   or   CARD_OFFER_EXHAUSTED   or   CHECK_SUM_MISMATCH ],  refundResponseCode   ( string ,   optional )   =   [ SUCCESS   or   REFUND_REQUEST_ACCEPTED   or   REFUND_REQUEST_SENT   or   REFUNDED   or   REFUND_VOID_SUCCESS   or   TXNID_NOT_FOUND   or   REFUND_NOT_SUPPORTED   or   REFUND_WINDOW_EXPIRED   or   SIMILAR_PREVIOUS_PARTIAL_REFUND_DETECTED   or   SALE_TRANSACTION_UNSUCCESSFUL   or   SALE_TRANSACTION_VOID   or   PARTIAL_REFUNDS_UNSUPPORTED   or   INSUFFICIENT_BALANCE   or   DUPLICATE_REFUND_REQUEST   or   EXCESS_REFUND_AMOUNT   or   SALE_TRANSACTION_REFUNDED   or   MULTIPLE_REFUNDS_UNSUPPORTED   or   PAYZIPPY_TECHNICAL_ERROR   or   ACQUIRER_TECHNICAL_ERROR   or   REFUND_TEMPORARILY_UNAVAILABLE   or   VISA_DIRECT_TIMEOUT   or   PENDING_ON_REFUND_REQUERY   or   FAILED_ON_REFUND_REQUERY   or   COULD_NOT_ACQUIRE_LOCK   or   UPI_EXTERNAL_VPA_UNSUPPORTED ],  transactionResponseMessage   ( string ,   optional ),  bankArn   ( string ,   optional ),  refundSla   ( RefundSla ,   optional ),  paymentMethod   ( string ,   optional )   =   [ CREDIT   or   DEBIT   or   EMI   or   NET   or   PAYZIPPY   or   NET_OPTIONS   or   EMI_OPTIONS   or   PHONEPE   or   FLIPKART_CREDIT ],  paymentInstrument   ( string ,   optional )   =   [ CREDIT   or   DEBIT   or   EMI   or   NET   or   PAYZIPPY   or   NET_OPTIONS   or   EMI_OPTIONS   or   PHONEPE   or   FLIPKART_CREDIT ],  emiMonths   ( long ,   optional ),  bankName   ( string ,   optional ),  emiScheme   ( EmiScheme ,   optional ),  fraudAction   ( string ,   optional ),  fraudDecision   ( string ,   optional ),  fraudDetails   ( string ,   optional ),  fraudSource   ( string ,   optional ),  pgMID   ( string ,   optional ),  pgTrackId   ( string ,   optional ),  pgId   ( string ,   optional ),  pgName   ( string ,   optional ),  bankTransactionId   ( string ,   optional ),  terminalId   ( string ,   optional ),  pgAuthCode   ( string ,   optional ),  accountType   ( string ,   optional ),  subventionPercentage   ( long ,   optional ),  cardBrand   ( string ,   optional )   =   [ VISA   or   MASTERCARD   or   AMEX   or   MAESTRO   or   DINERS   or   RUPAY   or   DEFAULT   or   DISCOVER   or   BAJAJ ],  cardBin   ( string ,   optional ),  orderId   ( string ,   optional ),  relatedRecords   ( Array [ RelatedRecord ],   optional ),  primaryAmount   ( long ,   optional ),  merchantAdjustments   ( Array [ MerchantAdjustment ],   optional ),  queryTransactionStatus   ( string ,   optional ),  metadata   ( string ,   optional ),  saleTransactionId   ( string ,   optional ),  confirmedFraud   ( boolean ,   optional ),  international   ( boolean ,   optional ),  riskyInstrument   ( boolean ,   optional )  }  RefundSla   {  minSla   ( long ,   optional ),  maxSla   ( long ,   optional )  }  EmiScheme   {  emiTenureInMonths   ( long ,   optional ),  interestValue   ( long ,   optional ),  interestType   ( string ,   optional )  }  RelatedRecord   {  adjustmentTransactionId   ( string ,   optional ),  relation   ( string ,   optional ),  adjustmentId   ( string ,   optional ),  adjustmentAmount   ( long ,   optional )  }  MerchantAdjustment   {  transactionId   ( string ,   optional ),  offerId   ( string ,   optional ),  offerUnitPrice   ( long ,   optional ),  amountApplied   ( long ,   optional ),  amountRequested   ( long ,   optional ),  promiseDate   ( string ,   optional ),  actualSubventionAmount   ( long ,   optional ),  effectiveSubventionAmount   ( long ,   optional ),  adjustmentResponseCode   ( string ,   optional )   =   [ EXPIRED   or   INVALID   or   FAILED_BY_TIME   or   REJECTED_BY_WHITELIST   or   REJECTED_BY_BLACKLIST   or   REJECTED_BY_RULE   or   REJECTED_LOW_PRIORITY   or   EXHAUSTED_BY_TXNID   or   EXHAUSTED_BY_EMAIL   or   EXHAUSTED_BY_ACCOUNT   or   EXHAUSTED_BY_PHONE   or   EXHAUSTED_BY_IP   or   EXHAUSTED_BY_ACCID   or   EXHAUSTED_BY_MID   or   EXHAUSTED_GLOBAL   or   EXHAUSTED_BY_CARD   or   MISSING_PAYMENT_INFO   or   ELIGIBLE   or   NOT_ELIGIBLE   or   OFFER_NOT_APPLIED   or   REJECTED_DUE_TO_PAYMENT_WARNING ],  adjustmentType   ( string ,   optional )   =   [ INSTANT_DISCOUNT   or   CASHBACK_ON_CARD   or   CASHBACK_IN_BANK   or   CASHBACK_IN_WALLET   or   INSTANT_CASHBACK   or   DOWN_PAYMENT ],  metadata   ( object ,   optional )  }   Sample Request\n{\n   merchantCredential : {\n     name :  Enter name here ,\n     password :  Enter hash here \n  },\n   forcePgQuery : true,\n   merchantTransactionId :  transaction1 ,\n   paymentTransactionId :  PZT1712211056FQM0400 \n}", 
            "title": "Query"
        }, 
        {
            "location": "/backend/#refund", 
            "text": "Path :   1 /payment/ query  Method :   POST  Body :   RefundRequest   RefundRequest   {  merchantCredential ( MerchantCredential ),  merchantTransactionId   ( string ),  payzippySaleTrasactionId   ( string ),  refundAmount   ( long ),  refundReason   ( string ),  refundedBy   ( string ),  merchantRefundTransactionId ( string ,   optional ),  idempotencyId   ( string ,   optional ),  metadata   ( string ,   optional )  }  MerchantCredential   {  name   ( string ),  password   ( string )  }  Response   :   RefundResponse  RefundResponse   {  bankArn   ( string ,   optional ),  pgMID   ( string ,   optional ),  pgTrackId   ( string ,   optional ),  pgId   ( string ,   optional ),  pgName   ( string ,   optional ),  bankTransactionId   ( string ,   optional ),  terminalId   ( string ,   optional ),  cardBrand   ( string ,   optional )   =   [ VISA   or   MASTERCARD   or   AMEX   or   MAESTRO   or   DINERS   or   RUPAY   or   DEFAULT   or   DISCOVER   or   BAJAJ ],  cardBin   ( string ,   optional ),  adjustmentTransactionIds   ( string ,   optional ),  adjustmentRelations   ( string ,   optional ),  adjustmentIds   ( string ,   optional ),  adjustmentAmounts   ( string ,   optional ),  refundAmount   ( long ,   optional ),  merchantTransactionId   ( string ,   optional ),  payzippyTransactionId   ( string ,   optional ),  refundCurrency   ( string ,   optional ),  transactionTime   ( long ,   optional ),  refundSla   ( RefundSla ,   optional ),  refundStatus   ( string ,   optional )   =   [ REFUND_REQUEST_RECEIVED   or   REFUND_REQUEST_SUBMITTED   or   SUCCESS   or   FAILED   or   REFUNDED   or   PENDING ],  refundResponseCode   ( string ,   optional )   =   [ SUCCESS   or   REFUND_REQUEST_ACCEPTED   or   REFUND_REQUEST_SENT   or   REFUNDED   or   REFUND_VOID_SUCCESS   or   TXNID_NOT_FOUND   or   REFUND_NOT_SUPPORTED   or   REFUND_WINDOW_EXPIRED   or   SIMILAR_PREVIOUS_PARTIAL_REFUND_DETECTED   or   SALE_TRANSACTION_UNSUCCESSFUL   or   SALE_TRANSACTION_VOID   or   PARTIAL_REFUNDS_UNSUPPORTED   or   INSUFFICIENT_BALANCE   or   DUPLICATE_REFUND_REQUEST   or   EXCESS_REFUND_AMOUNT   or   SALE_TRANSACTION_REFUNDED   or   MULTIPLE_REFUNDS_UNSUPPORTED   or   PAYZIPPY_TECHNICAL_ERROR   or   ACQUIRER_TECHNICAL_ERROR   or   REFUND_TEMPORARILY_UNAVAILABLE   or   VISA_DIRECT_TIMEOUT   or   PENDING_ON_REFUND_REQUERY   or   FAILED_ON_REFUND_REQUERY   or   COULD_NOT_ACQUIRE_LOCK   or   UPI_EXTERNAL_VPA_UNSUPPORTED ],  refundResponseMessage   ( string ,   optional ),  metaData   ( string ,   optional )  }  RefundSla   {  minSla   ( long ,   optional ),  maxSla   ( long ,   optional )  }   Sample Request\n{\n   merchantCredential : {\n     name :  Enter name here ,\n     password :  Enter hash here \n  },\n   merchantTransactionId :  transaction1 ,\n   payzippySaleTrasactionId :  PZT1712211056FQM0400 ,\n   refundAmount : 100,\n   refundReason :  testing ,\n   refundedBy :  Anvay ,\n   merchantRefundTransactionId :  transaction1-refund1 \n}", 
            "title": "Refund"
        }, 
        {
            "location": "/backend/#oms", 
            "text": "", 
            "title": "OMS"
        }, 
        {
            "location": "/backend/#oms-insert", 
            "text": "Path: /1/oms/insert\nMethod: POST\nBody: RefundRequest \nOMSPayload {\norderId (string),\nimageUrl (string),\ndescription (string),\namount (double),\ndisbursalText (string),\nsecondaryDisbursalText (string),\nidentityToken (string),\nstate (string) [ INITIATED  or  SUCCESSFUL  or  FAILED ],\nitems (Array[OMSItem]),\noffers (Array[OMSOffers], optional),\ntimestamp (long)\n}\nOMSItem {\nitemId (string),\ntitle (string),\namount (long),\ncategory (string)\n}\nOMSOffers {\nofferId (string),\ntitle (string),\nsource (string)\n}\nResponse: String  Sample Request\n{\n     orderId : dummyOrder1 ,\n     imageUrl :  http://www.google.com/img/test ,\n     description : This is an order id ,\n     amount : 220.14,\n     disbursalText : You order has been recharged ,\n     secondaryDisbursalText : Recharge is already done, Go get a life ,\n     identityToken : IDTKNE4783BAFB3B54713A46EC4B9EB5D59DEKNG ,\n     state : DUMMY ,\n     timestamp : 1523960011000,\n     items : [\n        {\n             itemId  :  dummyItemId1 ,\n             title  :  This is the recharge product you just purchased ,\n             amount  : 220.14,\n             category  :  recharge \n        }\n    ],\n     offers : [\n        {\n             offerId  :  dummyOfferId ,\n             title  :  Get everything for free ,\n             source  :  merchant \n        }\n    ]\n}", 
            "title": "OMS Insert"
        }, 
        {
            "location": "/backend/#oms-state-update", 
            "text": "Path: /1/oms/update/state\nMethod: PUT\nQuery: \norderId : String\nstate : String  [ INITIATED  or  SUCCESSFUL  or  FAILED ]", 
            "title": "OMS State update"
        }, 
        {
            "location": "/backend/#oms-refund", 
            "text": "Path: /1/oms/create/refund\nMethod: PUT\nBody: \nRefundPayload {\norderId (string),\ntransactionId (string),\namount (double),\nsource (string),\ntitle (string),\nrefundId (string)\n}  Sample Request\n{\n     orderId  :  dummyOrder1 ,\n     transactionId  :  dummyRefundTransactionId ,\n     amount  : 20.12,\n     source  :  merchant ,\n     title  :  Refund because merchant says so ,\n     refundId  :  dummyRefundId \n}", 
            "title": "OMS Refund"
        }, 
        {
            "location": "/backend/#security", 
            "text": "All production endpoints will be over https.\nWe will validate Client\u2019s identity using JWT.\nThe JWT will be shared in every call in header as a \u2018secureToken\u2019  Properties of secure token\nAlgorithm RS256\nFields to be present in payload\niss -  Issuer -  which is equal to clientId\niat -  Issued At -  Timestamp with seconds resolution when the token was generate. This will fail if in future.\nexp -  Expiry At -  Timestamp with seconds resolution when the token expires. exp-iat should not be more than 1000\nThe Public key should be shared with flipkart before hand.", 
            "title": "Security"
        }, 
        {
            "location": "/backend/#test-endpoint-for-secure-token", 
            "text": "Path: /1/dummy\nMethod: GET\nHeader: secureToken\nResponse:  Will be HTTP 200 if secureToken is valid otherwise response code will be self explanatory.", 
            "title": "Test endpoint for secure token"
        }
    ]
}